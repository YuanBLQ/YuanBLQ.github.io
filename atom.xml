<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuanBLQ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanblq.github.io/"/>
  <updated>2017-05-02T07:01:57.995Z</updated>
  <id>https://yuanblq.github.io/</id>
  
  <author>
    <name>Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>itchat 微信机器人</title>
    <link href="https://yuanblq.github.io/2017/05/02/itchat/"/>
    <id>https://yuanblq.github.io/2017/05/02/itchat/</id>
    <published>2017-05-02T04:13:51.000Z</published>
    <updated>2017-05-02T07:01:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人"><a href="#通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人" class="headerlink" title="通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人"></a>通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>通过微信的 python 接口 itchat获取微信消息  </li>
<li>将微信消息转发给”小冰”  </li>
<li>获取”小冰”处理后的返回消息  </li>
<li>将返回消息返回给微信消息的发送人  </li>
</ul>
<a id="more"></a>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="获取微信消息"><a href="#获取微信消息" class="headerlink" title="获取微信消息"></a>获取微信消息</h3><p>itchat 在注册时会根据相应的消息类型调用对应的函数.<br>比如现在只需获取基本的文本消息, 只需这样注册:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_msg</span><span class="params">(msg)</span>:</span></div><div class="line">	print(msg[<span class="string">'Text'</span>])</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>第三行, 通过装饰符将 <code>get_msg()</code> 注册为处理文本消息的函数.<br>微信的消息有很多类型, 通过注册不同的消息类型, 可以分别处理不同类型的消息.<br>执行命令后, 和登录网页版微信一样, 扫描弹出来的二维码, 即可登录你的微信并开始处理微信消息:<br><img src="/2017/05/02/itchat/qr.png" alt="png">  </p>
<h3 id="发送微信消息"><a href="#发送微信消息" class="headerlink" title="发送微信消息"></a>发送微信消息</h3><p>同样, 发送的微信消息有各种类型, 现在我们同样只处理文本类型的消息.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itchat.send(<span class="string">'your msg'</span>, <span class="string">'toUserName'</span>)</div></pre></td></tr></table></figure></p>
<p>该发送消息的函数接收两个参数, 消息的内容和消息接收者的 UserName, 即该对象的标识符.<br>我们先试着给文件助手发送一条消息:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.send(<span class="string">'我发送的消息'</span>, <span class="string">'filehelper'</span>)</div></pre></td></tr></table></figure></p>
<p>如果每次调试都要扫码登录的话比较麻烦.<br>第三行, 通过将 <code>auto_login()</code> 函数的 <code>hotReload</code> 参数设为 <code>True</code>, 即可实现热登陆.<br>保存代码后, 执行命令后, 效果如下:<br><img src="/2017/05/02/itchat/file.png" alt="png">  </p>
<p>该方法是主动给别人发送消息, 还有种是给你发送消息的回复消息.<br>如下的代码所示, 是回复给你发送消息的人:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reply_msg</span><span class="params">(msg)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'我回复的内容'</span></div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>这种回复消息的方法属于被动触发, 只有别人给你发消息了, 才会去回复并且不需要消息接收者的 UserName.  </p>
<h3 id="将消息转发给”小冰”"><a href="#将消息转发给”小冰”" class="headerlink" title="将消息转发给”小冰”"></a>将消息转发给”小冰”</h3><p>既然我们已经会了收发消息的方法, 那么现在就可以完成将别人发给你的微信消息转发给”小冰”, 进而获取”小冰”的回复.<br>但是要发送消息给”小冰”, 那么”小冰”的 UserName 是什么呢?<br>itchat 提供了搜索每个人 UserName 的方法, 比如搜索公众号 UserName 的方法为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itchat.search_mps(name=<span class="string">'小冰'</span>)</div></pre></td></tr></table></figure></p>
<p>该方法返回的是一个字典, 通过查看字典结构即可拿到”小冰”的 UserName:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoice = itchat.search_mps(name=<span class="string">'小冰'</span>)[<span class="number">0</span>][<span class="string">'UserName'</span>]</div></pre></td></tr></table></figure></p>
<p>现在, 我们就可一接收消息, 并把消息转发给”小冰”了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fw_ice</span><span class="params">(msg)</span>:</span></div><div class="line">    msg_text = msg[<span class="string">'Text'</span>]</div><div class="line">    itchat.send(msg_text, xiaoice)</div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">xiaoice = itchat.search_mps(name=<span class="string">'小冰'</span>)[<span class="number">0</span>][<span class="string">'UserName'</span>]</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>运行之后, 当别人给你发送消息的时候, 程序会自动将其转发给”小冰”:<br><img src="/2017/05/02/itchat/ice_reply.png" alt="png"><br><img src="/2017/05/02/itchat/ice_reply2.PNG" alt="png">  </p>
<h3 id="获取小冰的回复内容-并将其转发给给你发送微信的人"><a href="#获取小冰的回复内容-并将其转发给给你发送微信的人" class="headerlink" title="获取小冰的回复内容, 并将其转发给给你发送微信的人"></a>获取小冰的回复内容, 并将其转发给给你发送微信的人</h3><p>首先, 我们获取给你发微信的人 UserName<br>从 <code>def fw_ice(msg)</code> 传进来 msg 是一个字典, 我们可以从中获取到该次消息对话的很多信息, 其中就有消息发送者的 UserName: <code>msg[&#39;FromUserName&#39;]</code>.<br>我们把发送者的 UserName 存储在一个全局变量中, 这样等获取到”小冰”发送的内容后就能知道转发给谁了.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">who_send = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fw_ice</span><span class="params">(msg)</span>:</span></div><div class="line">	<span class="keyword">global</span> who_send</div><div class="line">    msg_text = msg[<span class="string">'Text'</span>]</div><div class="line">    who_send = msg[<span class="string">'FromUserName'</span>]</div><div class="line">    itchat.send(msg_text, xiaoice)</div></pre></td></tr></table></figure></p>
<p>然后, 我们获取”小冰”的回复内容, 并把它转发给发送者:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT, isMpChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ice</span><span class="params">(msg)</span>:</span></div><div class="line">    ice_msg = msg[<span class="string">'Text'</span>]</div><div class="line">    itchat.send(ice_msg, toUserName=g_who_send)</div></pre></td></tr></table></figure></p>
<p>因为和”小冰”聊天属于和公众号的聊天, 所以在注册时需要添加 <code>isMpChat=True</code> 来让该函数知道它需要处理的是和公众号的聊天消息.<br>接着, 我们通过 msg 这个字典获取到”小冰”的回复内容后通过 <code>itchat.send()</code> 方法, 把该内容转发给发送者.<br>执行后, 如图所示:<br><img src="/2017/05/02/itchat/ice_reply3.PNG" alt="png"><br><img src="/2017/05/02/itchat/ice_reply4.PNG" alt="png"><br>这样就基本完成了利用”小冰”来实现的微信机器人.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人&quot;&gt;&lt;a href=&quot;#通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人&quot; class=&quot;headerlink&quot; title=&quot;通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人&quot;&gt;&lt;/a&gt;通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人&lt;/h1&gt;&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过微信的 python 接口 itchat获取微信消息  &lt;/li&gt;
&lt;li&gt;将微信消息转发给”小冰”  &lt;/li&gt;
&lt;li&gt;获取”小冰”处理后的返回消息  &lt;/li&gt;
&lt;li&gt;将返回消息返回给微信消息的发送人  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="应用实例" scheme="https://yuanblq.github.io/categories/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="itchat" scheme="https://yuanblq.github.io/tags/itchat/"/>
    
      <category term="小冰" scheme="https://yuanblq.github.io/tags/%E5%B0%8F%E5%86%B0/"/>
    
  </entry>
  
  <entry>
    <title>mySQL操作</title>
    <link href="https://yuanblq.github.io/2017/04/11/mySQL%E6%93%8D%E4%BD%9C/"/>
    <id>https://yuanblq.github.io/2017/04/11/mySQL操作/</id>
    <published>2017-04-11T11:38:36.000Z</published>
    <updated>2017-04-11T13:51:52.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-hlocalhost-P3306-uroot-p"><a href="#mysql-hlocalhost-P3306-uroot-p" class="headerlink" title="mysql -hlocalhost -P3306 -uroot -p"></a>mysql -hlocalhost -P3306 -uroot -p</h1><h2 id="库的操作"><a href="#库的操作" class="headerlink" title="库的操作"></a>库的操作</h2><h3 id="新增数据库"><a href="#新增数据库" class="headerlink" title="新增数据库"></a>新增数据库</h3><p>create database 数据库名 [库选项];</p>
<h4 id="库选项：用来约束数据库，分为两个选项"><a href="#库选项：用来约束数据库，分为两个选项" class="headerlink" title="库选项：用来约束数据库，分为两个选项"></a>库选项：用来约束数据库，分为两个选项</h4><ul>
<li>字符集设定: charset / character set 具体字符集(数据存储的编码格式): 常用字符集: GBK, UTF8</li>
<li>校对集设定: collate 具体校对集(数据比较的规则)<h4 id="数据库名可以用关键词，保留字等，但必须再数据库名字前后加上反引号-一般不这么干"><a href="#数据库名可以用关键词，保留字等，但必须再数据库名字前后加上反引号-一般不这么干" class="headerlink" title="数据库名可以用关键词，保留字等，但必须再数据库名字前后加上反引号 `(一般不这么干)"></a>数据库名可以用关键词，保留字等，但必须再数据库名字前后加上反引号 `(一般不这么干)</h4><h4 id="解决中文数据库名报错"><a href="#解决中文数据库名报错" class="headerlink" title="解决中文数据库名报错"></a>解决中文数据库名报错</h4></li>
</ul>
<ol>
<li>set names gbk;  –因为 win 的命令窗口默认时 gbk 编码</li>
<li>然后就可以设置中文数据库名了</li>
<li>一般不创建中文数据库名，因为保存时会编码成不友好的字符<h4 id="每个数据库文件夹有个-opt-文件，保存的是库选项"><a href="#每个数据库文件夹有个-opt-文件，保存的是库选项" class="headerlink" title="每个数据库文件夹有个 opt 文件，保存的是库选项"></a>每个数据库文件夹有个 opt 文件，保存的是库选项</h4></li>
</ol>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><h4 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h4><p>show databases;</p>
<h4 id="查看指定部分的数据库：模糊查询"><a href="#查看指定部分的数据库：模糊查询" class="headerlink" title="查看指定部分的数据库：模糊查询"></a>查看指定部分的数据库：模糊查询</h4><p>show databases like ‘pattern’   – pattern 是匹配模式<br>%: 表示匹配多个字符<br>_: 表示匹配单个字符<br><strong>如果数据库名字中有下划线(_)查找时需要转义(\_)</strong></p>
<h4 id="查看数据库的创建语句"><a href="#查看数据库的创建语句" class="headerlink" title="查看数据库的创建语句"></a>查看数据库的创建语句</h4><p>show create database 数据库名;</p>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><h4 id="数据库名字不可以修改"><a href="#数据库名字不可以修改" class="headerlink" title="数据库名字不可以修改"></a>数据库名字不可以修改</h4><p>因为修改数据库名字会导致后续一系列麻烦的操作</p>
<h4 id="数据库的修改仅限库选项：字符集和校对集-校对集依赖字符集"><a href="#数据库的修改仅限库选项：字符集和校对集-校对集依赖字符集" class="headerlink" title="数据库的修改仅限库选项：字符集和校对集(校对集依赖字符集)"></a>数据库的修改仅限库选项：字符集和校对集(校对集依赖字符集)</h4><p>alter database 数据库名字 [库选项];<br>charset/character set [=] utf8/gbk</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>drop database 数据库名字;</p>
<h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><p>表与字段密不可分。</p>
<h3 id="新增数据表"><a href="#新增数据表" class="headerlink" title="新增数据表"></a>新增数据表</h3><p>create table [if not exists] 表名(<br>字段名 数据类型,<br>字段名 数据类型,<br>…<br>)[表选项];</p>
<ul>
<li>表选项: 控制表的表现<br>字符集: charset/character set 具体字符集;   – 保证表中数据存储的字符集<br>校对集: collate 具体校对集<br>存储引擎: engine 具体的存储引擎(innodb 和 myisam)  </li>
<li>例: 创建表<br>方法 1(显式指定表所属的数据库):<br>create table if not exists 数据库名.student(<br>name varchar(10),<br>gender varchar(10),<br>number varchar(10),<br>age int<br>)charset utf8;<br>方法2(隐式指定表所属的数据库，先进入数据库):<br>use 数据库名;<br>create table if not exists student(<br>name varchar(10),<br>gender varchar(10),<br>number varchar(10),<br>age int<br>)charset utf8;  </li>
</ul>
<h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><ul>
<li>查看所有表:<br>show tables;</li>
<li>查看部分表: 模糊匹配<br>show tables like ‘pattren’</li>
</ul>
<h3 id="查看表创建语句"><a href="#查看表创建语句" class="headerlink" title="查看表创建语句"></a>查看表创建语句</h3><p>show create table 表名[\g];   –<br>show create table 表名\G;   – 旋转90°(纵向)</p>
<h3 id="查看表结构-查看表中的字段信息"><a href="#查看表结构-查看表中的字段信息" class="headerlink" title="查看表结构: 查看表中的字段信息"></a>查看表结构: 查看表中的字段信息</h3><p>desc/describe / show columns from 表名;</p>
<h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><p>表的修改分为两部分: 修改表本身和修改字段  </p>
<h4 id="修改表本身-表名和表选项"><a href="#修改表本身-表名和表选项" class="headerlink" title="修改表本身: 表名和表选项"></a>修改表本身: 表名和表选项</h4><ul>
<li>修改表名:<br>rename table 老表名 to 新表名</li>
<li>修改表选项: 字符集, 校对集, 存储引擎<br>alter table 表名 charset = gbk  <h4 id="修改字段-新增-修改-重名-删除"><a href="#修改字段-新增-修改-重名-删除" class="headerlink" title="修改字段: 新增, 修改, 重名, 删除"></a>修改字段: 新增, 修改, 重名, 删除</h4></li>
<li>新增字段<br>alter table 表名 add [column] 字段名 数据类型 [列属性] [位置];<br>位置: 字段可以存放在表中的任意位置(first, after 字段名)<br>例如:<br>alter table 表名 add [column] id int first;</li>
<li>修改字段: 修改通常是修改属性或者数据类型<br>alter table 表名 modify 字段名 数据类型 [属性] [位置];<br>例如: 将表中number字段变成固定长度，且放到第二位之后<br>alter table 表名 modify number char(10) after id;</li>
<li>重命名字段<br>alter table 表名 change 旧字段名 新字段名 数据类型 [属性] [位置];  </li>
<li>删除字段<br>alter table 表名 drop 字段名;  <h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3>drop table 表名1,表名2…;   – 可以一次性删除多张表</li>
</ul>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql-hlocalhost-P3306-uroot-p&quot;&gt;&lt;a href=&quot;#mysql-hlocalhost-P3306-uroot-p&quot; class=&quot;headerlink&quot; title=&quot;mysql -hlocalhost -P3306 -uroot 
    
    </summary>
    
      <category term="document" scheme="https://yuanblq.github.io/categories/document/"/>
    
    
      <category term="mySQL" scheme="https://yuanblq.github.io/tags/mySQL/"/>
    
  </entry>
  
  <entry>
    <title>词云小例子</title>
    <link href="https://yuanblq.github.io/2017/03/27/%E8%AF%8D%E4%BA%91%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
    <id>https://yuanblq.github.io/2017/03/27/词云小例子/</id>
    <published>2017-03-27T14:52:09.000Z</published>
    <updated>2017-03-28T09:10:40.658Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">在<a href="/2017/03/26/WordCloud/" title="&nbsp;上一篇&nbsp;">&nbsp;上一篇&nbsp;</a>中介绍了 word cloud 的一些用法，下面是几个实战小例子。</font></p>
<h2 id="使用默认参数从文本中生成矩形词云"><a href="#使用默认参数从文本中生成矩形词云" class="headerlink" title="使用默认参数从文本中生成矩形词云"></a>使用默认参数从文本中生成矩形词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div></pre></td></tr></table></figure>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'JaneEyre.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    text = f.read()</div></pre></td></tr></table></figure>
<h3 id="生成词云图"><a href="#生成词云图" class="headerlink" title="生成词云图"></a>生成词云图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wordcloud = WordCloud().generate(text)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="展示生成的图片"><a href="#展示生成的图片" class="headerlink" title="展示生成的图片"></a>展示生成的图片</h3><h4 id="matplotlib-方式："><a href="#matplotlib-方式：" class="headerlink" title="matplotlib 方式："></a>matplotlib 方式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/03/27/词云小例子/output_8_0.png" alt="png"></p>
<h5 id="把最大字体尺寸改小点"><a href="#把最大字体尺寸改小点" class="headerlink" title="把最大字体尺寸改小点"></a>把最大字体尺寸改小点</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wordcloud = WordCloud(max_font_size=<span class="number">40</span>).generate(text)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/03/27/词云小例子/output_10_0.png" alt="png"></p>
<h4 id="用PIL方式（这种方式需要有管理员权限才可以运行）："><a href="#用PIL方式（这种方式需要有管理员权限才可以运行）：" class="headerlink" title="用PIL方式（这种方式需要有管理员权限才可以运行）："></a>用PIL方式（这种方式需要有管理员权限才可以运行）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行之后会自动打开生成的图片文件</span></div><div class="line">image = wordcloud.to_image()</div><div class="line">image.show()</div></pre></td></tr></table></figure>
<h2 id="在mask中生成词云图"><a href="#在mask中生成词云图" class="headerlink" title="在mask中生成词云图"></a>在mask中生成词云图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS</div></pre></td></tr></table></figure>
<h3 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'JaneEyre.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    text = f.read()</div></pre></td></tr></table></figure>
<h3 id="读取用作mask的图片"><a href="#读取用作mask的图片" class="headerlink" title="读取用作mask的图片"></a>读取用作mask的图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> Image.open(<span class="string">'mask.jpg'</span>) <span class="keyword">as</span> p:</div><div class="line">    mask = np.array(p)</div></pre></td></tr></table></figure>
<h3 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a>生成词云</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wc = WordCloud(background_color=<span class="string">'white'</span>, max_words=<span class="number">2000</span>, mask=mask)</div><div class="line">wc.generate(text)</div></pre></td></tr></table></figure>
<pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x7c849b0&gt;
</code></pre><h3 id="存储到文件中"><a href="#存储到文件中" class="headerlink" title="存储到文件中"></a>存储到文件中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc.to_file(<span class="string">'wc.png'</span>)</div></pre></td></tr></table></figure>
<pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x7c849b0&gt;
</code></pre><h3 id="或者直接显示出来"><a href="#或者直接显示出来" class="headerlink" title="或者直接显示出来"></a>或者直接显示出来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.imshow(wc, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(mask, cmap=plt.cm.gray, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/03/27/词云小例子/output_11_0.png" alt="png"></p>
<p><img src="/2017/03/27/词云小例子/output_11_1.png" alt="png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;4&quot;&gt;在&lt;a href=&quot;/2017/03/26/WordCloud/&quot; title=&quot;&amp;nbsp;上一篇&amp;nbsp;&quot;&gt;&amp;nbsp;上一篇&amp;nbsp;&lt;/a&gt;中介绍了 word cloud 的一些用法，下面是几个实战小例子。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用默认参数从文本中生成矩形词云&quot;&gt;&lt;a href=&quot;#使用默认参数从文本中生成矩形词云&quot; class=&quot;headerlink&quot; title=&quot;使用默认参数从文本中生成矩形词云&quot;&gt;&lt;/a&gt;使用默认参数从文本中生成矩形词云&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wordcloud &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; WordCloud&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;读取文件&quot;&gt;&lt;a href=&quot;#读取文件&quot; class=&quot;headerlink&quot; title=&quot;读取文件&quot;&gt;&lt;/a&gt;读取文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;JaneEyre.txt&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text = f.read()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成词云图&quot;&gt;&lt;a href=&quot;#生成词云图&quot; class=&quot;headerlink&quot; title=&quot;生成词云图&quot;&gt;&lt;/a&gt;生成词云图&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wordcloud = WordCloud().generate(text)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="小练习" scheme="https://yuanblq.github.io/categories/%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="词云" scheme="https://yuanblq.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="wordcloud" scheme="https://yuanblq.github.io/tags/wordcloud/"/>
    
      <category term="mask" scheme="https://yuanblq.github.io/tags/mask/"/>
    
  </entry>
  
  <entry>
    <title>WordCloud</title>
    <link href="https://yuanblq.github.io/2017/03/26/WordCloud/"/>
    <id>https://yuanblq.github.io/2017/03/26/WordCloud/</id>
    <published>2017-03-26T12:55:52.000Z</published>
    <updated>2017-04-11T11:40:07.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wordcloud-的-API-Reference-分三部分："><a href="#Wordcloud-的-API-Reference-分三部分：" class="headerlink" title="Wordcloud 的 API Reference 分三部分："></a>Wordcloud 的 API Reference 分三部分：</h1><ul>
<li>WordCloud([font_path, width, height, …])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Word cloud对象，用于生成以及绘制</li>
<li>ImageColorGenerator(image)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于一个彩色图片的颜色生成器</li>
<li>random_color_func([word, font_size, …])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随机色相生成器</li>
</ul>
<a id="more"></a>
<h2 id="wordcloud-WordCloud"><a href="#wordcloud-WordCloud" class="headerlink" title="wordcloud.WordCloud"></a>wordcloud.WordCloud</h2><p><table><tr><td bgcolor="#EEE8AA">class <font color="red"><b>wordcloud.WordCloud </b></font>(font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=’black’, max_font_size=None, font_step=1, mode=’RGB’, relative_scaling=0.5, regexp=None, collocations=True, colormap=None, normalize_plurals=True)<br></td></tr></table></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h3><h4 id="font-path-sting"><a href="#font-path-sting" class="headerlink" title="font_path : sting"></a>font_path : sting</h4><div class="note default"><p>字体的路径（OTF 或者 TTF 字体）。在Linux上默认为 DroidSansMono 路径，如果没有这个字体或者其它的 OS 操作系统，那就需要手动调整路径。</p>
</div>
<h4 id="width-int-default-400"><a href="#width-int-default-400" class="headerlink" title="width : int (default=400)"></a>width : int (default=400)</h4><div class="note default"><p>画布的宽度。</p>
</div>
<h4 id="height-int-default-200"><a href="#height-int-default-200" class="headerlink" title="height : int (default=200)"></a>height : int (default=200)</h4><div class="note default"><p>画布的高度。</p>
</div>
<h4 id="prefer-horizontal-float-default-0-9"><a href="#prefer-horizontal-float-default-0-9" class="headerlink" title="prefer_horizontal : float (default=0.9)"></a>prefer_horizontal : float (default=0.9)</h4><div class="note default"><p>水平词语占的比例，即最后词云图中以水平方式展现的词语占的比例。</p>
</div>
<h4 id="mask-nd-array-or-None-default-None"><a href="#mask-nd-array-or-None-default-None" class="headerlink" title="mask : nd-array or None (default=None)"></a>mask : nd-array or None (default=None)</h4><div class="note default"><p>如果不为None，那么就在这给定的二进制文件的mask上绘制词云，并且忽略 width 和 height 。<br>所有的白色区域（#FF 或者 #FFFFFF）都视为在mask外部，也就是不绘制词云。</p>
</div>
<h4 id="scale-float-default-1"><a href="#scale-float-default-1" class="headerlink" title="scale : float (default=1)"></a>scale : float (default=1)</h4><div class="note default"><p>当词云图片比较大时，不要使用大画布而是使用 scale 缩放。</p>
</div>
<h4 id="min-font-size-int-default-4"><a href="#min-font-size-int-default-4" class="headerlink" title="min_font_size : int (default=4)"></a>min_font_size : int (default=4)</h4><div class="note default"><p>所使用的最小尺寸的字体。当没有空间能容纳此尺寸的字体时，停止绘制词云。</p>
</div>
<h4 id="font-step-int-default-1"><a href="#font-step-int-default-1" class="headerlink" title="font_step : int (default=1)"></a>font_step : int (default=1)</h4><div class="note default"><p>字体大小渐变步长。</p>
</div>
<h4 id="max-words-number-default-200"><a href="#max-words-number-default-200" class="headerlink" title="max_words : number (default=200)"></a>max_words : number (default=200)</h4><div class="note default"><p>最大词数。</p>
</div>
<h4 id="stopwords-set-of-strings-or-None"><a href="#stopwords-set-of-strings-or-None" class="headerlink" title="stopwords : set of strings or None"></a>stopwords : set of strings or None</h4><div class="note default"><p>不计入的词语集合。</p>
</div>
<h4 id="background-color-color-value-default-”black”"><a href="#background-color-color-value-default-”black”" class="headerlink" title="background_color : color value (default=”black”)"></a>background_color : color value (default=”black”)</h4><div class="note default"><p>词云图的背景颜色。</p>
</div>
<h4 id="max-font-size-int-or-None-default-None"><a href="#max-font-size-int-or-None-default-None" class="headerlink" title="max_font_size : int or None (default=None)"></a>max_font_size : int or None (default=None)</h4><div class="note default"><p>最大词语的字体大小。如果为 None，则使用图片的 height。</p>
</div>
<h4 id="mode-string-default-”RGB”"><a href="#mode-string-default-”RGB”" class="headerlink" title="mode : string (default=”RGB”)"></a>mode : string (default=”RGB”)</h4><div class="note default"><p>当模式为 “RGBA” 时，可以生成透明背景，background_color 可以为 None。</p>
</div>
<h4 id="relative-scaling-float-default-0-5"><a href="#relative-scaling-float-default-0-5" class="headerlink" title="relative_scaling : float (default=0.5)"></a>relative_scaling : float (default=0.5)</h4><div class="note default"><p>为 0 时，字体大小只考虑词的频率排名。<br>为 1 时，某个词频率为其它词频率 2 倍时，该字体的大小也是它的 2 倍。<br>一般设为 0.5 比较合适。</p>
</div>
<h4 id="color-func-callable-default-None"><a href="#color-func-callable-default-None" class="headerlink" title="color_func : callable (default=None)"></a>color_func : callable (default=None)</h4><div class="note default"><p>带有 word, font_size, position, orientation, font_path, random_state 参数，给每个词返回 PIL 颜色的调用对象。<br>会覆盖 “colormap”。</p>
</div>
<h4 id="regexp-string-or-None-optional"><a href="#regexp-string-or-None-optional" class="headerlink" title="regexp : string or None (optional)"></a>regexp : string or None (optional)</h4><div class="note default"><p>分词规则。如果为 None ，则使用 r”\w[\w’]+”。</p>
</div>
<h4 id="collocations-bool-default-True"><a href="#collocations-bool-default-True" class="headerlink" title="collocations : bool (default=True)"></a>collocations : bool (default=True)</h4><div class="note default"><p>是否需要包括两个词组成的词语。</p>
</div>
<h4 id="colormap-string-or-matplotlib-colormap-default-”viridis”"><a href="#colormap-string-or-matplotlib-colormap-default-”viridis”" class="headerlink" title="colormap : string or matplotlib colormap (default=”viridis”)"></a>colormap : string or matplotlib colormap (default=”viridis”)</h4><div class="note default"><p>从中任意选取颜色来绘制每个词。如果 “color_func” 指定的话，则忽略此参数。</p>
</div>
<h4 id="normalize-plurals-bool-default-True"><a href="#normalize-plurals-bool-default-True" class="headerlink" title="normalize_plurals : bool (default=True)"></a>normalize_plurals : bool (default=True)</h4><div class="note default"><p>是否需要把词语的 ‘s’ 后缀移除，并将其加入没有 ‘s’ 后缀的词的统计中。</p>
</div>
<h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><div class="note default"><p>大尺寸的画布会使代码运行缓慢。如果需要一个大的词云图，那就用”小尺寸画布”和”scale参数”。</p>
</div>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="words-list-of-tuples-string-float"><a href="#words-list-of-tuples-string-float" class="headerlink" title="words_ : list of tuples (string, float)"></a>words_ : list of tuples (string, float)</h4><div class="note default"><p>带有频率的词语</p>
</div>
<h4 id="layout-list-of-tuples-string-int-int-int-int-color"><a href="#layout-list-of-tuples-string-int-int-int-int-color" class="headerlink" title="layout_ : list of tuples (string, int, (int, int), int ,color)"></a>layout_ : list of tuples (string, int, (int, int), int ,color)</h4><div class="note default"><p>编码拟合好的词云。每个词语的字符串、字号、位置、方向和颜色的编码。</p>
</div>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="init-font-path-None-width-400-…"><a href="#init-font-path-None-width-400-…" class="headerlink" title="init(font_path=None, width=400, …)"></a><strong>init</strong>(font_path=None, width=400, …)</h4><div class="note default"><p>Parameters :<br>font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=’black’, max_font_size=None, font_step=1, mode=’RGB’, relative_scaling=0.5, regexp=None, collocations=True, colormap=None, normalize_plurals=True</p>
</div>
<h4 id="fit-words-frequencies"><a href="#fit-words-frequencies" class="headerlink" title="fit_words (frequencies)"></a>fit_words (frequencies)</h4><div class="note default"><p>通过 words 和 frequencies 创建 word_cloud。<br>generate_from_frequencies 的别名。</p>
<p>Parameters : </p>
<ul>
<li>frequencies : tuples 数组 （一个包含 word 和 frequency 的 tuple）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="generate-text"><a href="#generate-text" class="headerlink" title="generate (text)"></a>generate (text)</h4><div class="note default"><p>通过 text 生成 wordcloud<br>generate_from_text 的别名。<br>调用了 process_text 和 generate_from_frequencies。</p>
<p>Returns : self</p>
</div>
<h4 id="generate-from-frequencies-frequencies-…"><a href="#generate-from-frequencies-frequencies-…" class="headerlink" title="generate_from_frequencies (frequencies[, …])"></a>generate_from_frequencies (frequencies[, …])</h4><div class="note default"><p>通过 words 和 frequencies 创建 word_cloud。</p>
<p>Parameters : </p>
<ul>
<li>frequencies : 一个 string to float 的词典 （包含 words 和相关的频率）。</li>
<li>max_font_size : int （使用 font-size 而不是 self.max_font_size）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="generate-from-text-text"><a href="#generate-from-text-text" class="headerlink" title="generate_from_text (text)"></a>generate_from_text (text)</h4><div class="note default"><p>通过 text 生成 wordcloud。<br>调用了 process_text 和 generate_from_frequencies。</p>
<p><b> 版本变化(1.2.2)： </b><br>generate_from_frequencies() 的参数不再返回 process_text()。</p>
<p>Returns : self</p>
</div>
<h4 id="process-text-text"><a href="#process-text-text" class="headerlink" title="process_text (text)"></a>process_text (text)</h4><div class="note default"><p>把长文本分割成词语，移除 stopwords。</p>
<p>Parameters : </p>
<ul>
<li>text : string （要处理的文本）。</li>
</ul>
<p>Returns : </p>
<ul>
<li>words : 相关频率标记的词</li>
<li><b>版本变化(1.2.2)：</b>返回类型从 tuples 的 list 变为 dict。</li>
</ul>
</div>
<h4 id="recolor-random-state-color-func-colormap"><a href="#recolor-random-state-color-func-colormap" class="headerlink" title="recolor ([random_state, color_func, colormap])"></a>recolor ([random_state, color_func, colormap])</h4><div class="note default"><p>给已存在的布局重新上色。</p>
<p>Parameters : </p>
<ul>
<li>random_state : RandomState, int or None, default=None（如果不为 None 即使用了确定的随机状态 ，那么给的 int 值即为 random 的 seed）。</li>
<li>color_func : function or None, default=None （从 word count, font size, position 和 orientation 生成新颜色的 function, 如果为 None 则使用 self.color_func ）。</li>
<li>colormap : string or matplotlib colormap, default=None （使用这个 colormap 生成新的 colors. 如果 color_func 指定了则忽略此参数。如果为 None 则使用 self.color_func 或者 self.color_map ）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="to-array"><a href="#to-array" class="headerlink" title="to_array ()"></a>to_array ()</h4><div class="note default"><p>转换成 numpy 数组。</p>
<p>Returns : </p>
<ul>
<li>image : nd-array size (width, height, 3) （numpy 矩阵的词云图）。</li>
</ul>
</div>
<h4 id="to-file-filename"><a href="#to-file-filename" class="headerlink" title="to_file (filename)"></a>to_file (filename)</h4><div class="note default"><p>导出为图片文件。</p>
<p>Parameters : filename : string （写入位置）。</p>
<p>Returns : self</p>
</div>
<h4 id="to-html"><a href="#to-html" class="headerlink" title="to_html ()"></a>to_html ()</h4><h4 id="to-image"><a href="#to-image" class="headerlink" title="to_image ()"></a>to_image ()</h4><h2 id="wordcloud-ImageColorGenerator"><a href="#wordcloud-ImageColorGenerator" class="headerlink" title="wordcloud.ImageColorGenerator"></a>wordcloud.ImageColorGenerator</h2><p><table><tr><td bgcolor="#EEE8AA">class <font color="red"><b>wordcloud.ImageColorGenerator </b></font>(image)<br></td></tr></table><br>颜色生成器基于一张 RGB 颜色的图片。词的颜色由它所在图片中附近的颜色的均值决定。<br>生成之后，该对象可以作为 color_func 传入 wordcloud 构造器中，或者 recolor 方法中。</p>
<p>Parameters : </p>
<ul>
<li>image : nd-array, shape (height, width, 3)<div class="note default"><p>image 是用来生成词的颜色。忽略 Alpha 通道。 image应与画布大小尺寸一致。</p>
</div>
</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="call-word-font-size-font-path-…"><a href="#call-word-font-size-font-path-…" class="headerlink" title="call (word, font_size, font_path, …)"></a><strong>call</strong> (word, font_size, font_path, …)</h4><p>使用固定的图片给指定的词生成颜色。</p>
<h4 id="init-image"><a href="#init-image" class="headerlink" title="init (image)"></a><strong>init</strong> (image)</h4><h2 id="wordcloud-random-color-func"><a href="#wordcloud-random-color-func" class="headerlink" title="wordcloud.random_color_func"></a>wordcloud.random_color_func</h2><p><table><tr><td bgcolor="#EEE8AA"><font color="red"><b>wordcloud.random_color_func </b></font>(word=None, font_size=None, position=None, orientation=None, font_path=None, random_state=None)<br></td></tr></table><br>随机色相生成器。<br>默认的上色方法。该方法采取 80% 的色相和 50% 的亮度。</p>
<p>Parameters : </p>
<ul>
<li>word</li>
<li>font_size</li>
<li>position</li>
<li>orientation : ignored</li>
<li>random_state : random.Random 对象或者 None，默认为 None（如果指定了 random 对象，则使用此生成随机数）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Wordcloud-的-API-Reference-分三部分：&quot;&gt;&lt;a href=&quot;#Wordcloud-的-API-Reference-分三部分：&quot; class=&quot;headerlink&quot; title=&quot;Wordcloud 的 API Reference 分三部分：&quot;&gt;&lt;/a&gt;Wordcloud 的 API Reference 分三部分：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;WordCloud([font_path, width, height, …])&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Word cloud对象，用于生成以及绘制&lt;/li&gt;
&lt;li&gt;ImageColorGenerator(image)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;基于一个彩色图片的颜色生成器&lt;/li&gt;
&lt;li&gt;random_color_func([word, font_size, …])&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随机色相生成器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="模块文档" scheme="https://yuanblq.github.io/categories/%E6%A8%A1%E5%9D%97%E6%96%87%E6%A1%A3/"/>
    
      <category term="document" scheme="https://yuanblq.github.io/categories/%E6%A8%A1%E5%9D%97%E6%96%87%E6%A1%A3/document/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="词云" scheme="https://yuanblq.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="wordcloud" scheme="https://yuanblq.github.io/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>三门问题</title>
    <link href="https://yuanblq.github.io/2017/03/25/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://yuanblq.github.io/2017/03/25/三门问题/</id>
    <published>2017-03-25T12:07:45.000Z</published>
    <updated>2017-03-26T02:33:11.925Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？</p>
</div>
<a id="more"></a>
<h5 id="如果假设只是从三扇门中选，没有交换，则："><a href="#如果假设只是从三扇门中选，没有交换，则：" class="headerlink" title="如果假设只是从三扇门中选，没有交换，则："></a>如果假设只是从三扇门中选，没有交换，则：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">total = <span class="number">100000</span></div><div class="line">bingo = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(total):</div><div class="line">    my_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    car = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    <span class="keyword">if</span> my_choice == car:</div><div class="line">        bingo += <span class="number">1</span></div><div class="line">print(<span class="string">"一共选中 %d 次"</span> % bingo)</div><div class="line">print(<span class="string">"选中概率为：%.2f"</span> %(bingo / total))</div></pre></td></tr></table></figure>
<pre><code>一共选中 33164 次
选中概率为：0.33
</code></pre><h5 id="加上询问交换这一流程后："><a href="#加上询问交换这一流程后：" class="headerlink" title="加上询问交换这一流程后："></a>加上询问交换这一流程后：</h5><ul>
<li>先从三扇门中选一个</li>
<li>然后主持人在剩下的两扇门中选一个打开</li>
<li>询问是否更换：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">total = <span class="number">100000</span></div><div class="line">bingo_change = <span class="number">0</span></div><div class="line">change = <span class="number">0</span></div><div class="line">bingo_not_change = <span class="number">0</span></div><div class="line">not_change = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(total):</div><div class="line">    car = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    my_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    is_switch = random.choice([<span class="keyword">True</span>, <span class="keyword">False</span>])</div><div class="line">    <span class="keyword">if</span> is_switch:</div><div class="line">        change += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> my_choice != car:</div><div class="line">            bingo_change += <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        not_change += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> my_choice == car:</div><div class="line">            bingo_not_change += <span class="number">1</span></div><div class="line">print(<span class="string">"选手更换了 %d 次，选对的次数：%d，即选中的概率为：%.2f"</span> % (change, bingo_change, bingo_change / change))</div><div class="line">print(<span class="string">"选手不更换 %d 次，选对的次数：%d，即选中的概率为：%.2f"</span> % (not_change, bingo_not_change, bingo_not_change / not_change))</div></pre></td></tr></table></figure>
<pre><code>选手更换了 49956 次，选对的次数：33180，即选中的概率为：0.66
选手不更换 50044 次，选对的次数：16677，即选中的概率为：0.33
</code></pre><h5 id="通过暴力计算，可见三门问题的结论就一个字：换。"><a href="#通过暴力计算，可见三门问题的结论就一个字：换。" class="headerlink" title="通过暴力计算，可见三门问题的结论就一个字：换。"></a>通过暴力计算，可见三门问题的结论就一个字：换。</h5><h5 id="有位知友-“邢可”-的答案把三门问题解释得很形象。"><a href="#有位知友-“邢可”-的答案把三门问题解释得很形象。" class="headerlink" title="有位知友 “邢可” 的答案把三门问题解释得很形象。"></a>有位知友<a href="https://www.zhihu.com/question/26709273/answer/65418012?utm_source=com.samsung.android.app.memo&utm_medium=social" target="_blank" rel="external"> “邢可” </a>的答案把三门问题解释得很形象。</h5>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="小练习" scheme="https://yuanblq.github.io/categories/%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="三门问题" scheme="https://yuanblq.github.io/tags/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
