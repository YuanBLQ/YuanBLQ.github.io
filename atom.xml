<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanblq.github.io/"/>
  <updated>2018-11-27T02:37:00.000Z</updated>
  <id>https://yuanblq.github.io/</id>
  
  <author>
    <name>Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构——数组</title>
    <link href="https://yuanblq.github.io/2018/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
    <id>https://yuanblq.github.io/2018/11/27/数据结构——数组/</id>
    <published>2018-11-27T02:32:21.000Z</published>
    <updated>2018-11-27T02:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在绝大多数的变成语言中都会有数组这么一种最基础的数据结构，而且基本都是从 0 开始编号的。</p>
<p><strong>为什么要从 0 开始编号而不是 1 呢？</strong></p>
<a id="more"></a>
<h3 id="如何实现随机访问"><a href="#如何实现随机访问" class="headerlink" title="如何实现随机访问"></a>如何实现随机访问</h3><p>数组，是一种<code>线性表数据结构</code>。它用一组<code>连续的内存空间</code>，来存储一组具有<code>相同类型的数据</code>。</p>
<p><code>线性表结构</code>，限制了数组只有前后两个方向。这个时候，再加上<code>连续的内存空间</code>和<code>相同的数据类型</code>这两个特点，这就使数组拥有了<code>随机访问</code>的特性。但与此同时，也给数组在删除、插入一个数据的时候带来了麻烦。</p>
<p>假设有一个长度为 10 的 int 类型的数组 <code>int[] a = new int[10]</code>，在内存中我们给分配了这样一块内存空间 1000~1039，内存块的首地址 base_address=1000。</p>
<p>计算机是通过内存地址来访问到这块内存里的数据。对于上面数组这块内存，我们很容易通过下面这个公式，使用下标访问任意一个数组元素：</p>
<p><code>a[i]_address = base_address + i * data_type_size</code></p>
<p><code>data_type_size</code> 表示数组中每个元素的大小，所举的例子中是 int 类型，所以 <code>data_type_size</code> 大小就为 4 个字节。</p>
<p>通过这个公式，我们很容易就知道了为什么数组能实现随机访问。另外，如果我们要访问第一个元素的时候，i 的值为 0，这就是为什么下标基本都是从 0 开始的原因。</p>
<p>可能有人会说，把公式变成 <code>a[i]_address = base_address + (i - 1) * data_type_size</code>，这样下标不就可以按照人类数数的习惯，直接从 1 开始了吗。但这会有一个小问题，就是多了的 <code>-1</code> 操作是有效率损耗的，毕竟多做了一步操作。</p>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>上面我们提到，由于数组的连续特性，导致插入操作会比较麻烦，有什么改进的办法吗？</p>
<p>比如我们现在要在第 k 个位置插入一个元素，需要把 k 位以后的所有数据都依次往后挪。假如一开始一共有 n 个元素，那么需要移动 n-k 个元素。最好的情况是直接在数组末尾增加一个元素，此时的时间复杂度很明显是 O(1)。最坏情况就是在数组开头插入一个元素，这时时间复杂度为 O(n)。因为每个位置插入的元素的概率是一样的，所以平均时间复杂度： (1+2+..+n)/n，为 O(n) 的时间复杂度。</p>
<p>如果我们对于数组元素的顺序没有要求，那么在 k 位置插入元素可以这么优化：先把原来第 k 位的元素移动到数组末尾，然后在 k 位插入新的数据。这样能把时间复杂度将为 O(1)。快排中就用到了这个思想。</p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作和插入操作类似，为了内存的连续性，也需要搬迁数据。</p>
<p>如果删除的是末尾数据，则是最好的情况，时间复杂度为 O(1)；如果删除的是头部数据，则是最坏情况，时间复杂度为 O(n)；平均复杂度同样也是 O(n)。</p>
<p>在某些特定的场景下，如果对数组数据的连续性没有要求，那么可以将多次的删除操作合并起来。大概流程是这样的：当我们想要删除某个元素的时候，可以先把这个元素做个标记，表示已经删除了，但实际还未删除（软删除操作），然后等攒到一定数量或者存储空间不够之后之后再统一一起删除。</p>
<p>这个听起来不就是标记清除法的核心思想吗。算法与数据结构的魅力就在于此，其背后的思想和处理技巧这些东西才是最有价值的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在绝大多数的变成语言中都会有数组这么一种最基础的数据结构，而且基本都是从 0 开始编号的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要从 0 开始编号而不是 1 呢？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Algorithms" scheme="https://yuanblq.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（四）</title>
    <link href="https://yuanblq.github.io/2018/11/25/Pandas%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/25/Pandas（四）/</id>
    <published>2018-11-25T06:36:44.000Z</published>
    <updated>2018-11-26T14:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（四）</p>
</blockquote>
<a id="more"></a>
<h2 id="数据处理兼容性"><a href="#数据处理兼容性" class="headerlink" title="数据处理兼容性"></a>数据处理兼容性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index = pd.Index(data=[<span class="string">"Tom"</span>, <span class="string">"Bob"</span>, <span class="string">"Mary"</span>, <span class="string">"James"</span>, <span class="string">"Andy"</span>, <span class="string">"Alice"</span>], name=<span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">18</span>, <span class="number">30</span>, np.nan, <span class="number">40</span>, np.nan, <span class="number">30</span>],</span><br><span class="line">    <span class="string">"city"</span>: [<span class="string">"Bei Jing "</span>, <span class="string">"Shang Hai "</span>, <span class="string">"Guang Zhou"</span>, <span class="string">"Shen Zhen"</span>, np.nan, <span class="string">" "</span>],</span><br><span class="line">    <span class="string">"sex"</span>: [<span class="keyword">None</span>, <span class="string">"male"</span>, <span class="string">"female"</span>, <span class="string">"male"</span>, np.nan, <span class="string">"unknown"</span>],</span><br><span class="line">    <span class="string">"birth"</span>: [<span class="string">"2000-02-10"</span>, <span class="string">"1988-10-17"</span>, <span class="keyword">None</span>, <span class="string">"1978-08-08"</span>, np.nan, <span class="string">"1988-10-17"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将出生日期转为时间戳</span></span><br><span class="line">user_info[<span class="string">"birth"</span>] = pd.to_datetime(user_info.birth)</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Bei Jing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shang Hai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guang Zhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shen Zhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-17</td>
</tr>
</tbody>
</table>
<p>之前说过，如果要处理 Series 中的每一个元素，我们可以使用 <code>map</code> 或 <code>apply</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有城市都转成小写</span></span><br><span class="line">user_info.city.map(<span class="keyword">lambda</span> x: x.lower())</span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-3-a124a99b1001&gt; in &lt;module&gt;
      1 # 将所有城市都转成小写
----&gt; 2 user_info.city.map(lambda x: x.lower())


~/.pyenv/versions/3.6.3/envs/Note/lib/python3.6/site-packages/pandas/core/series.py in map(self, arg, na_action)
   2996         &quot;&quot;&quot;
   2997         new_values = super(Series, self)._map_values(
-&gt; 2998             arg, na_action=na_action)
   2999         return self._constructor(new_values,
   3000                                  index=self.index).__finalize__(self)


~/.pyenv/versions/3.6.3/envs/Note/lib/python3.6/site-packages/pandas/core/base.py in _map_values(self, mapper, na_action)
   1002 
   1003         # mapper is a function
-&gt; 1004         new_values = map_f(values, mapper)
   1005 
   1006         return new_values


pandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()


&lt;ipython-input-3-a124a99b1001&gt; in &lt;lambda&gt;(x)
      1 # 将所有城市都转成小写
----&gt; 2 user_info.city.map(lambda x: x.lower())


AttributeError: &apos;float&apos; object has no attribute &apos;lower&apos;
</code></pre><p>居然报错了，那是因为 <code>np.nan</code> 属于 float 类型。</p>
<p>这时候 <code>str</code> 属性的作用就凸显出来了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是转换成小写</span></span><br><span class="line">user_info.city.str.lower()</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       bei jing 
Bob      shang hai 
Mary     guang zhou
James     shen zhen
Andy            NaN
Alice              
Name: city, dtype: object
</code></pre><p>这样，做处理的时候，如果一个数据不属于字符串就不会被处理了。</p>
<h3 id="替换和分割"><a href="#替换和分割" class="headerlink" title="替换和分割"></a>替换和分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       [Bei, Jing, ]
Bob      [Shang, Hai, ]
Mary      [Guang, Zhou]
James      [Shen, Zhen]
Andy                NaN
Alice              [, ]
Name: city, dtype: object
</code></pre><p>分割列表中的元素可以使用 <code>get</code> 和 <code>[]</code> 进行访问：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      Jing
Bob       Hai
Mary     Zhou
James    Zhen
Andy      NaN
Alice        
Name: city, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str.get(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom     NaN
Bob     NaN
Mary    NaN
James   NaN
Andy    NaN
Alice   NaN
Name: city, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      Jing
Bob       Hai
Mary     Zhou
James    Zhen
Andy      NaN
Alice        
Name: city, dtype: object
</code></pre><p><code>split()</code> 方法有个参数很有意思，<code>expand=True</code> 可以把返回的列表数据以 DataFrame 形式返回：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
<td style="text-align:center">Jing</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
<td style="text-align:center">Zhou</td>
<td style="text-align:center">None</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
<td style="text-align:center">Zhen</td>
<td style="text-align:center">None</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">None</td>
</tr>
</tbody>
</table>
<h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><p><code>extract()</code> 方法接收一个正则表达式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配空字符串前面的所有字母</span></span><br><span class="line">user_info.city.str.extract(<span class="string">r'(\w+)\s+'</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配空格前后的字符串</span></span><br><span class="line">user_info.city.str.extract(<span class="string">r'(\w+)\s+(\w+)'</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">Shang</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
<td style="text-align:center">Zhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
<td style="text-align:center">Zhen</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<p><code>extract()</code> 只能返回匹配的第一个元素，<code>extractall()</code> 则会返回所有的匹配元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.extractall(<span class="string">r'(\w+)'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">match</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Zhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shen</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Zhen</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.extractall(<span class="string">r'(\w+)\s+'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">match</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shen</td>
</tr>
</tbody>
</table>
<p>最后列举一下 <code>str</code> 所支持常用方法：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cat()</td>
<td style="text-align:center">连接字符串</td>
</tr>
<tr>
<td style="text-align:center">split()</td>
<td style="text-align:center">在分隔符上分割字符串</td>
</tr>
<tr>
<td style="text-align:center">rsplit()</td>
<td style="text-align:center">从字符串末尾开始分隔字符串</td>
</tr>
<tr>
<td style="text-align:center">get()</td>
<td style="text-align:center">索引到每个元素（检索第i个元素）</td>
</tr>
<tr>
<td style="text-align:center">join()</td>
<td style="text-align:center">使用分隔符在系列的每个元素中加入字符串</td>
</tr>
<tr>
<td style="text-align:center">get_dummies()</td>
<td style="text-align:center">在分隔符上分割字符串，返回虚拟变量的DataFrame</td>
</tr>
<tr>
<td style="text-align:center">contains()</td>
<td style="text-align:center">如果每个字符串都包含pattern / regex，则返回布尔数组</td>
</tr>
<tr>
<td style="text-align:center">replace()</td>
<td style="text-align:center">用其他字符串替换pattern / regex的出现</td>
</tr>
<tr>
<td style="text-align:center">repeat()</td>
<td style="text-align:center">重复值（s.str.repeat(3)等同于x * 3 t2 &gt;）</td>
</tr>
<tr>
<td style="text-align:center">pad()</td>
<td style="text-align:center">将空格添加到字符串的左侧，右侧或两侧</td>
</tr>
<tr>
<td style="text-align:center">center()</td>
<td style="text-align:center">相当于str.center</td>
</tr>
<tr>
<td style="text-align:center">ljust()</td>
<td style="text-align:center">相当于str.ljust</td>
</tr>
<tr>
<td style="text-align:center">rjust()</td>
<td style="text-align:center">相当于str.rjust</td>
</tr>
<tr>
<td style="text-align:center">zfill()</td>
<td style="text-align:center">等同于str.zfill</td>
</tr>
<tr>
<td style="text-align:center">wrap()</td>
<td style="text-align:center">将长长的字符串拆分为长度小于给定宽度的行</td>
</tr>
<tr>
<td style="text-align:center">slice()</td>
<td style="text-align:center">切分Series中的每个字符串</td>
</tr>
<tr>
<td style="text-align:center">slice_replace()</td>
<td style="text-align:center">用传递的值替换每个字符串中的切片</td>
</tr>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">计数模式的发生</td>
</tr>
<tr>
<td style="text-align:center">startswith()</td>
<td style="text-align:center">相当于每个元素的str.startswith(pat)</td>
</tr>
<tr>
<td style="text-align:center">endswith()</td>
<td style="text-align:center">相当于每个元素的str.endswith(pat)</td>
</tr>
<tr>
<td style="text-align:center">findall()</td>
<td style="text-align:center">计算每个字符串的所有模式/正则表达式的列表</td>
</tr>
<tr>
<td style="text-align:center">match()</td>
<td style="text-align:center">在每个元素上调用re.match，返回匹配的组作为列表</td>
</tr>
<tr>
<td style="text-align:center">extract()</td>
<td style="text-align:center">在每个元素上调用re.search，为每个元素返回一行DataFrame，为每个正则表达式捕获组返回一列</td>
</tr>
<tr>
<td style="text-align:center">extractall()</td>
<td style="text-align:center">在每个元素上调用re.findall，为每个匹配返回一行DataFrame，为每个正则表达式捕获组返回一列</td>
</tr>
<tr>
<td style="text-align:center">len()</td>
<td style="text-align:center">计算字符串长度</td>
</tr>
<tr>
<td style="text-align:center">strip()</td>
<td style="text-align:center">相当于str.strip</td>
</tr>
<tr>
<td style="text-align:center">rstrip()</td>
<td style="text-align:center">相当于str.rstrip</td>
</tr>
<tr>
<td style="text-align:center">lstrip()</td>
<td style="text-align:center">相当于str.lstrip</td>
</tr>
<tr>
<td style="text-align:center">partition()</td>
<td style="text-align:center">等同于str.partition</td>
</tr>
<tr>
<td style="text-align:center">rpartition()</td>
<td style="text-align:center">等同于str.rpartition</td>
</tr>
<tr>
<td style="text-align:center">lower()</td>
<td style="text-align:center">相当于str.lower</td>
</tr>
<tr>
<td style="text-align:center">upper()</td>
<td style="text-align:center">相当于str.upper</td>
</tr>
<tr>
<td style="text-align:center">find()</td>
<td style="text-align:center">相当于str.find</td>
</tr>
<tr>
<td style="text-align:center">rfind()</td>
<td style="text-align:center">相当于str.rfind</td>
</tr>
<tr>
<td style="text-align:center">index()</td>
<td style="text-align:center">相当于str.index</td>
</tr>
<tr>
<td style="text-align:center">rindex()</td>
<td style="text-align:center">相当于str.rindex</td>
</tr>
<tr>
<td style="text-align:center">capitalize()</td>
<td style="text-align:center">相当于str.capitalize</td>
</tr>
<tr>
<td style="text-align:center">swapcase()</td>
<td style="text-align:center">相当于str.swapcase</td>
</tr>
<tr>
<td style="text-align:center">normalize()</td>
<td style="text-align:center">返回Unicode标准格式。相当于unicodedata.normalize</td>
</tr>
<tr>
<td style="text-align:center">translate()</td>
<td style="text-align:center">等同于str.translate</td>
</tr>
<tr>
<td style="text-align:center">isalnum()</td>
<td style="text-align:center">等同于str.isalnum</td>
</tr>
<tr>
<td style="text-align:center">isalpha()</td>
<td style="text-align:center">等同于str.isalpha</td>
</tr>
<tr>
<td style="text-align:center">isdigit()</td>
<td style="text-align:center">相当于str.isdigit</td>
</tr>
<tr>
<td style="text-align:center">isspace()</td>
<td style="text-align:center">等同于str.isspace</td>
</tr>
<tr>
<td style="text-align:center">islower()</td>
<td style="text-align:center">相当于str.islower</td>
</tr>
<tr>
<td style="text-align:center">isupper()</td>
<td style="text-align:center">相当于str.isupper</td>
</tr>
<tr>
<td style="text-align:center">istitle()</td>
<td style="text-align:center">相当于str.istitle</td>
</tr>
<tr>
<td style="text-align:center">isnumeric()</td>
<td style="text-align:center">相当于str.isnumeric</td>
</tr>
<tr>
<td style="text-align:center">isdecimal()</td>
<td style="text-align:center">相当于str.isdecimal</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（四）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（三）</title>
    <link href="https://yuanblq.github.io/2018/11/20/Pandas%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/20/Pandas（三）/</id>
    <published>2018-11-20T06:36:40.000Z</published>
    <updated>2018-11-26T14:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（三）</p>
</blockquote>
<a id="more"></a>
<h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<h3 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h3><ul>
<li>丢弃</li>
<li>填充</li>
<li>替换</li>
<li>使用其他对象填充</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">index = pd.Index(data=[<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>, <span class="string">'Andy'</span>, <span class="string">'Alice'</span>], name=<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, np.nan, <span class="number">40</span>, np.nan, <span class="number">30</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Beijing'</span>, <span class="string">'Shanghai'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>, np.nan, <span class="string">' '</span>],</span><br><span class="line">    <span class="string">'sex'</span>: [<span class="keyword">None</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>, np.nan, <span class="string">'unknown'</span>],</span><br><span class="line">    <span class="string">'birth'</span>: [<span class="string">'2000-02-10'</span>, <span class="string">'1988-10-17'</span>, <span class="keyword">None</span>, <span class="string">'1978-8-8'</span>, np.nan, <span class="string">'1988-10-11'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将出生日期转化为时间戳</span></span><br><span class="line">user_info[<span class="string">'birth'</span>] = pd.to_datetime(user_info.birth)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<p>上面数据中，Tom、Mary 的数据都有缺失，可以使用 <code>isnull()</code>，<code>notnull()</code> 方法来查找：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.isnull()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p>除了简单的查找识别哪些数据是缺失的，还可以有其他的一些操作，比如过滤掉用户年龄为空的用户：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[user_info.age.notnull()]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<h3 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h3><p>使用 <code>dropna</code> 方法丢弃缺失值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean_age = user_info.age.dropna()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean_age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
James    40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>Series 的 <code>dropna()</code> 比较简单，对于 DataFrame 来说，可以设置更多的参数。</p>
<ul>
<li><code>axis</code> 参数，控制行或列，<code>axis=0</code>（默认）表示操作行，<code>axis=1</code> 表示操作列。</li>
<li><code>how</code> 参数，丢弃哪些数据，可选参数：<code>any</code>（默认）或者 <code>all</code>。<code>any</code> 表示一行/列有任意元素为空就丢弃，<code>all</code> 一行/列所有值都为空，才丢弃。</li>
<li><code>subset</code> 参数，表示删除时只考虑索引或列名。</li>
<li><code>thresh</code> 参数，阈值，表示有几个实际值以后就不删除，比如 <code>thresh=3</code> 一行/列非空值大于 3 个就将其保留。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行数据只要有一个字段存在空值就删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行数据所有字段都为空才删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'all'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># city 或 sex 存在空值即删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, subset=[<span class="string">'city'</span>, <span class="string">'sex'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要有三个即以上实际值就不删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, thresh=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<h3 id="填充缺失值"><a href="#填充缺失值" class="headerlink" title="填充缺失值"></a>填充缺失值</h3><p>最常见的就是使用 <code>fillna</code> 完成填充。</p>
<p>常见的填充方式是使用一个标量来填充。例如，将所有缺失的年龄都填充为 0：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      0.0
James    40.0
Andy      0.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>除了使用标量来填充，使用前一个或后一个的有效值来填充。</p>
<p>设置参数 <code>method=&#39;pad&#39;</code> 或者 <code>method=&#39;ffill&#39;</code> 可以使用前一个 <code>有效值</code> 来填充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     30.0
James    40.0
Andy     40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'pad'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     30.0
James    40.0
Andy     40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>设置参数 <code>method=&#39;bfill&#39;</code> 或者 <code>method=&#39;backfill&#39;</code> 可以使用后一个 <code>有效值</code> 来填充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'backfill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     40.0
James    40.0
Andy     30.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'bfill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     40.0
James    40.0
Andy     30.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>除了通过 <code>fillna</code> 方法来填充缺失值外，还可以通过 <code>interpolate</code> 方法来填充。默认情况下使用线性差值，可以设置 <code>method</code> 参数来改变方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      NaN
James    40.0
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.interpolate()</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     35.0
James    40.0
Andy     35.0
Alice    30.0
Name: age, dtype: float64
</code></pre><h3 id="替换缺失值"><a href="#替换缺失值" class="headerlink" title="替换缺失值"></a>替换缺失值</h3><p>像 <code>None</code>、<code>np.nan</code>、<code>NaT</code> 这些值，Pandas 眼中都是缺失值，但在人类眼中，某些异常值我们都会当做缺失值来处理。</p>
<p>比如：我们的表里面记录的都是青年人，但如果某个年龄数据超过了 35 岁，那肯定是个异常值。另外，如果性别记录出现 ‘unknown’，肯定也是异常值。</p>
<p>对于以上这种情况，我们可以使用 <code>replace</code> 方法来替换缺失值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄 40 岁替换成 np.nan</span></span><br><span class="line">user_info.age.replace(<span class="number">40</span>, np.nan)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      NaN
James     NaN
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><p>替换值也可以是一个字段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄 18 岁替换成 np.nan</span></span><br><span class="line">user_info.age.replace(&#123;<span class="number">18</span>: np.nan&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       NaN
Bob      30.0
Mary      NaN
James    40.0
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><p>对于 DataFrame，可以指定每列要替换的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.replace(&#123;<span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'birth'</span>: pd.Timestamp(<span class="string">'1978-8-8'</span>)&#125;, np.nan)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<p>还可以将特定字符串进行替换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 unknown 进行替换</span></span><br><span class="line">user_info.sex.replace(<span class="string">'unknown'</span>, np.nan)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        None
Bob        male
Mary     female
James      male
Andy        NaN
Alice       NaN
Name: sex, dtype: object
</code></pre><p>替换还可以使用正则来替换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        Beijing
Bob       Shanghai
Mary     Guangzhou
James     Shenzhen
Andy           NaN
Alice             
Name: city, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将空白字符串替换成空值</span></span><br><span class="line">user_info.city.replace(<span class="string">r'\s+'</span>, np.nan, regex=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        Beijing
Bob       Shanghai
Mary     Guangzhou
James     Shenzhen
Andy           NaN
Alice          NaN
Name: city, dtype: object
</code></pre><h3 id="使用其他对象填充"><a href="#使用其他对象填充" class="headerlink" title="使用其他对象填充"></a>使用其他对象填充</h3><p>我们可以把一个有值的 Series 数据填充给另一个有缺失值的 Series：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_age = user_info.age.copy()</span><br><span class="line">new_age.fillna(<span class="number">20</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">new_age[<span class="string">'Tom'</span>] = <span class="number">55</span></span><br><span class="line">new_age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      55.0
Bob      30.0
Mary     20.0
James    40.0
Andy     20.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.combine_first(new_age)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     20.0
James    40.0
Andy     20.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>可见，有缺失值的 Series 被有数据的 Series 做了填充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（三）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（二）</title>
    <link href="https://yuanblq.github.io/2018/11/15/Pandas%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/15/Pandas（二）/</id>
    <published>2018-11-15T06:36:29.000Z</published>
    <updated>2018-11-26T14:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（二）</p>
</blockquote>
<a id="more"></a>
<h2 id="常用的基本功能"><a href="#常用的基本功能" class="headerlink" title="常用的基本功能"></a>常用的基本功能</h2><p>以 DataFrame 的操作为例，大部分也适用于 Series。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">index = pd.Index(data=[<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>], name=<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Shanghai'</span>, <span class="string">'Beijing'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>],</span><br><span class="line">    <span class="string">'gender'</span>: [<span class="string">'male'</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="整体情况"><a href="#整体情况" class="headerlink" title="整体情况"></a>整体情况</h3><p>首先，我们可以通过 <code>info</code> 方法查看数据的整体情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.info()</span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
Index: 4 entries, Tom to James
Data columns (total 3 columns):
age       4 non-null int64
city      4 non-null object
gender    4 non-null object
dtypes: int64(1), object(2)
memory usage: 128.0+ bytes
</code></pre><h3 id="头尾数据"><a href="#头尾数据" class="headerlink" title="头尾数据"></a>头尾数据</h3><p>数据量巨大的时候，可以像操作大文本一样使用 <code>head</code>、<code>tail</code> 类似的操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.tail(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p><code>.shape</code> 可以获取数据的形状，<code>.T</code> 可以对数据转置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.shape</span><br></pre></td></tr></table></figure>
<pre><code>(4, 3)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.T</span><br></pre></td></tr></table></figure>
<p>|username|Tom|Bob|Mary|James|<br>|age|18|30|25|40|<br>|city|Shanghai|Beijing|Guangzhou|Shenzhen|<br>|gender|male|male|female|male|</p>
<p>像字典一样，可以使用 <code>.values</code> 获取数据内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.values</span><br></pre></td></tr></table></figure>
<pre><code>array([[18, &apos;Shanghai&apos;, &apos;male&apos;],
       [30, &apos;Beijing&apos;, &apos;male&apos;],
       [25, &apos;Guangzhou&apos;, &apos;female&apos;],
       [40, &apos;Shenzhen&apos;, &apos;male&apos;]], dtype=object)
</code></pre><p>可见是 <code>ndarray</code> 类型。</p>
<p>当然也有 <code>keys()</code>，<code>items()</code> 方法（<code>values</code> 只有属性）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.keys()</span><br></pre></td></tr></table></figure>
<pre><code>Index([&apos;age&apos;, &apos;city&apos;, &apos;gender&apos;], dtype=&apos;object&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(<span class="string">'-----'</span>)</span><br><span class="line">    print(value)</span><br><span class="line">    print(<span class="string">'-----'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age
-----
username
Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
-----
city
-----
username
Tom       Shanghai
Bob        Beijing
Mary     Guangzhou
James     Shenzhen
Name: city, dtype: object
-----
gender
-----
username
Tom        male
Bob        male
Mary     female
James      male
Name: gender, dtype: object
-----
</code></pre><h3 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h3><p>自带常用的数据统计指标（最大值、最小值、平均值、中位数等）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大年龄</span></span><br><span class="line">user_info.age.max()</span><br></pre></td></tr></table></figure>
<pre><code>40
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小年龄</span></span><br><span class="line">user_info.age.min()</span><br></pre></td></tr></table></figure>
<pre><code>18
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平均年龄</span></span><br><span class="line">user_info.age.mean()</span><br></pre></td></tr></table></figure>
<pre><code>28.25
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄总和</span></span><br><span class="line">user_info.age.sum()</span><br></pre></td></tr></table></figure>
<pre><code>113
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄中位数</span></span><br><span class="line">user_info.age.median()</span><br></pre></td></tr></table></figure>
<pre><code>27.5
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄方差</span></span><br><span class="line">user_info.age.var()</span><br></pre></td></tr></table></figure>
<pre><code>85.58333333333333
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄标准差</span></span><br><span class="line">user_info.age.std()</span><br></pre></td></tr></table></figure>
<pre><code>9.251126057585278
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.quantile()</span><br></pre></td></tr></table></figure>
<pre><code>27.5
</code></pre><p>如果只是想粗略看一下各项描述指数，可以直接使用 <code>describe()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.describe()</span><br></pre></td></tr></table></figure>
<pre><code>count     4.000000
mean     28.250000
std       9.251126
min      18.000000
25%      23.250000
50%      27.500000
75%      32.500000
max      40.000000
Name: age, dtype: float64
</code></pre><p>这些统计方法可以直接在 DataFrame 上使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.median()</span><br></pre></td></tr></table></figure>
<pre><code>age    27.5
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.max()</span><br></pre></td></tr></table></figure>
<pre><code>age             40
city      Shenzhen
gender        male
dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">4.000000</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">28.250000</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">9.251126</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">18.000000</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">23.250000</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">27.500000</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">32.500000</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">40.000000</td>
</tr>
</tbody>
</table>
<p>如果想要对<strong>非数字</strong>类型的数据也统计，可以设置 <code>include=[&#39;object&#39;]</code> 来获得：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.describe(include=[<span class="string">'object'</span>, <span class="string">'int'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">4.000000</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">unique</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">top</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">freq</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">28.250000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">9.251126</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">18.000000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">23.250000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">27.500000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">32.500000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">40.000000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>对于一堆数据，我们有时候想分成几个区间去统计，这时候可以使用 Pandas 的 <code>cut()</code> 方法完成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      (17.978, 25.333]
Bob      (25.333, 32.667]
Mary     (17.978, 25.333]
James      (32.667, 40.0]
Name: age, dtype: category
Categories (3, interval[float64]): [(17.978, 25.333] &lt; (25.333, 32.667] &lt; (32.667, 40.0]]
</code></pre><p>默认会自动化分成等距的几个区间段，我们也可以自己指定离散区间：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, [<span class="number">1</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">50</span>])</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       (1, 18]
Bob      (18, 30]
Mary     (18, 30]
James    (30, 50]
Name: age, dtype: category
Categories (3, interval[int64]): [(1, 18] &lt; (18, 30] &lt; (30, 50]]
</code></pre><p>例外还可以给每个离散区间取个名字：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, [<span class="number">1</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">50</span>], labels=[<span class="string">'childhood'</span>, <span class="string">'youth'</span>, <span class="string">'middle'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      childhood
Bob          youth
Mary         youth
James       middle
Name: age, dtype: category
Categories (3, object): [childhood &lt; youth &lt; middle]
</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>对于数据的处理怎么能少了排序呢。排序有两种，一种是按照索引（横纵两种）排序，还有就是按照实际的数据值排序.</p>
<p>一、按索引排序（默认正序）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照索引排序</span></span><br><span class="line">user_info.sort_index()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照列索引排序（反序）</span></span><br><span class="line">user_info.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">gender</th>
<th style="text-align:center">city</th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">18</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">female</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">40</td>
</tr>
</tbody>
</table>
<p>二、按实际数据值排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.sort_values(by=<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>如果排序依据不止一个参考，则传入一个列表即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.sort_values(by=[<span class="string">'age'</span>, <span class="string">'city'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在排序的基础上获取最年轻的两个</span></span><br><span class="line">user_info.sort_values(by=<span class="string">'age'</span>).head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
</tbody>
</table>
<p>上面获取最年轻的两个元素看起来没啥毛病。先排序，然后获取最前面的两个就是最小的元素了。</p>
<p>但是如果数据量大的时候，排序会造成很大的浪费，Pandas 的内置方法 <code>nlargest</code> 和 <code>nsmallest</code> 方法可以快速获取最大、最小的 n 个值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.nlargest(<span class="number">2</span>, columns=<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.nlargest(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40
Bob      30
Name: age, dtype: int64
</code></pre><h3 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h3><p>常用的函数有 <code>map</code>、<code>apply</code>、<code>applymap</code>。</p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h4><p><code>map</code> 是 Series 中特有的方法，通过它可以对 Series 中的每个元素实现变换。</p>
<p>比如判断用户是否属于中年人（年龄大于30岁）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.map(<span class="keyword">lambda</span> x: <span class="string">'yes'</span> <span class="keyword">if</span> x &gt;= <span class="number">30</span> <span class="keyword">else</span> <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       no
Bob      yes
Mary      no
James    yes
Name: age, dtype: object
</code></pre><p>另外，如果我想判断是北方还是南方，可以这么操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">city_map = &#123;</span><br><span class="line">    <span class="string">'Shanghai'</span>: <span class="string">'south'</span>,</span><br><span class="line">    <span class="string">'Beijing'</span>: <span class="string">'north'</span>,</span><br><span class="line">    <span class="string">'Guangzhou'</span>: <span class="string">'south'</span>,</span><br><span class="line">    <span class="string">'Shenzhen'</span>: <span class="string">'south'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info.city.map(city_map)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      south
Bob      north
Mary     south
James    south
Name: city, dtype: object
</code></pre><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a><code>apply</code></h4><p><code>apply</code> 既支持 Series，也支持 DataFrame。对 Series 操作没啥问题，就是作用到每个值上，在对 DataFrame 操作的时候会根据 <code>axis</code> 参数作用到所有列或者所有行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.apply(<span class="keyword">lambda</span> x: <span class="string">'yes'</span> <span class="keyword">if</span> x &gt;= <span class="number">30</span> <span class="keyword">else</span> <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       no
Bob      yes
Mary      no
James    yes
Name: age, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.apply(<span class="keyword">lambda</span> x: x.max(), axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age             40
city      Shenzhen
gender        male
dtype: object
</code></pre><h4 id="applymap"><a href="#applymap" class="headerlink" title="applymap"></a>applymap</h4><p><code>applymap</code> 适用于 DataFrame，类似 <code>apply</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.applymap(<span class="keyword">lambda</span> x: str(x).lower())</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="修改索引-列的名称"><a href="#修改索引-列的名称" class="headerlink" title="修改索引/列的名称"></a>修改索引/列的名称</h3><p>直接使用 <code>rename</code> 即可修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_info = user_info.rename(columns=&#123;<span class="string">'age'</span>: <span class="string">'Age'</span>, <span class="string">'city'</span>: <span class="string">'City'</span>&#125;)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Age</th>
<th style="text-align:center">City</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_info = user_info.rename(index=&#123;<span class="string">'Tom'</span>: <span class="string">'Jack'</span>&#125;)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Jack</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="数据类型操作"><a href="#数据类型操作" class="headerlink" title="数据类型操作"></a>数据类型操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每种类型的列数</span></span><br><span class="line">user_info.get_dtype_counts()</span><br></pre></td></tr></table></figure>
<pre><code>int64     1
object    2
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line">new_info = user_info[<span class="string">'age'</span>].astype(float)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18.0
Bob      30.0
Mary     25.0
James    40.0
Name: age, dtype: float64
</code></pre><p>数据转换有时候会涉及到将 object 转换成其他类型，常见的有转为数字、日期、时间差，Pandas 中分别对应 <code>to_numeric</code>、<code>to_datetime</code>、<code>to_timedelta</code> 方法</p>
<p>举个例子，我们先给用户添加一些身高数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'height'</span>] = [<span class="string">'178'</span>, <span class="string">'168'</span>, <span class="string">'155'</span>, <span class="string">'188cm'</span>]</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">height</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">168</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">155</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">188cm</td>
</tr>
</tbody>
</table>
<p>现在我们想把身高这一列的数据转换为数字，但是 <code>188cm</code> 并不是数字，我们在转换的时候可以通过 <code>errors</code> 参数来处理转换失败的情况。</p>
<p>默认情况下 <code>errors=&#39;raise&#39;</code>，意味着转换失败会直接抛异常，设置 <code>errors=&#39;coerce&#39;</code> 可以在转换失败的时候赋值为 <code>pd.NaT</code> 或者 <code>pd.NaN</code>，设置 <code>errors=&#39;ignore&#39;</code> 则在转换失败的时候返回原有的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_numeric(user_info.height, errors=<span class="string">'coerce'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      178.0
Bob      168.0
Mary     155.0
James      NaN
Name: height, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_numeric(user_info.height, errors=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom        178
Bob        168
Mary       155
James    188cm
Name: height, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'height'</span>] = pd.to_numeric(user_info.height, errors=<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">height</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">168</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">155</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">188cm</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（二）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（一）</title>
    <link href="https://yuanblq.github.io/2018/11/13/Pandas%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/13/Pandas（一）/</id>
    <published>2018-11-13T06:32:14.000Z</published>
    <updated>2018-11-26T14:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（一）</p>
</blockquote>
<a id="more"></a>
<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>带索引和名称的一维数组。在Series中数据类型可以是整数、浮点数、字符串、Python对象等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<p>首先，我们存储一组年龄数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ages = [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>]</span><br><span class="line">pd_ages = pd.Series(data=ages)</span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>0    18
1    30
2    25
3    40
dtype: int64
</code></pre><p>但如果只存储这一组数据的话好像也没什么用，我们可以试着把用户的名字加进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.index = [<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>]</span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
dtype: int64
</code></pre><p>现在我们已经把每个人的名字和年龄对应出来了，但是不知道的人怎么能知道“Tom”、“Bob”这些是人名呢，所以我们还可以为这个索引加上名称：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.index.name = <span class="string">'username'</span></span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
dtype: int64
</code></pre><p>对于这段数据我们还可以像起个表名一样，给Series起个名字：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.name = <span class="string">'user_age_info'</span></span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
Name: user_age_info, dtype: int64
</code></pre><p>上面把这些步骤都一步步分开了，我们还可以快速实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建索引</span></span><br><span class="line">name = pd.Index([<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>], name=<span class="string">'username'</span>)</span><br><span class="line"><span class="comment"># 构建Series</span></span><br><span class="line">pd_age = pd.Series(data=[<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>], index=name, name=<span class="string">'user_age_info'</span>)</span><br><span class="line">pd_age</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
Name: user_age_info, dtype: int64
</code></pre><p>上面构建Series的时候没有指定数据的类型，是由Pandas自动判断的，我们当然可以自己指定数据的类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定类型为浮点型</span></span><br><span class="line">pd_age = pd.Series(data=[<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>], index=name, name=<span class="string">"user_age_info"</span>, dtype=float)</span><br><span class="line">pd_age</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18.0
Bob      30.0
Mary     25.0
James    40.0
Name: user_age_info, dtype: float64
</code></pre><h3 id="探索Series"><a href="#探索Series" class="headerlink" title="探索Series"></a>探索Series</h3><p>由于有索引的存在，Series和dict很像，所以也具有dict的一些类似操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 Tom 的年龄</span></span><br><span class="line">pd_age[<span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd_age.get(<span class="string">'Tom'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><p>除了和dict很像，Series也有ndarray的类似操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个元素</span></span><br><span class="line">pd_age[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取前三个元素</span></span><br><span class="line">pd_age[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom     18.0
Bob     30.0
Mary    25.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取年龄大于 30 的元素</span></span><br><span class="line">pd_age[pd_age &gt; <span class="number">30</span>]</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第 4 个元素和第 1 个元素</span></span><br><span class="line">pd_age[[<span class="number">3</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40.0
Tom      18.0
Name: user_age_info, dtype: float64
</code></pre><h4 id="Series向量化操作"><a href="#Series向量化操作" class="headerlink" title="Series向量化操作"></a>Series向量化操作</h4><p>Series和ndarray一样，也是支持向量化操作，同时也可以传递给大多数期望ndarray的Numpy方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd_age + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      19.0
Bob      31.0
Mary     26.0
James    41.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.exp(pd_age)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      6.565997e+07
Bob      1.068647e+13
Mary     7.200490e+10
James    2.353853e+17
Name: user_age_info, dtype: float64
</code></pre><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame 可以理解为二维的 Series。每一列都可以拥有自己的名字，数据类型也可以不一样。</p>
<p>接着上面的例子，这次我们不止要存储用户的年龄，还要存储城市信息，那我们该如何构建 Dataframe 呢？</p>
<p>我们可以把每个用户的数据存在一个个列表中传过去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = [<span class="number">18</span>, <span class="string">'Shanghai'</span>]</span><br><span class="line">Bob = [<span class="number">30</span>, <span class="string">'Beijing'</span>]</span><br><span class="line">Mary = [<span class="number">25</span>, <span class="string">'Guangzhou'</span>]</span><br><span class="line">James = [<span class="number">40</span>, <span class="string">'Shenzhen'</span>]</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=[Tom, Bob, Mary, James])</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>同样，这样一张光秃秃的表格，除了数据我们一无所知。为了以后查阅方便我们得添加点额外信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">columns = [<span class="string">'age'</span>, <span class="string">'city'</span>]</span><br><span class="line">index = [<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>]</span><br><span class="line">user_info.columns = columns</span><br><span class="line">user_info.index = index</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>除此之外，我们也可直接传入 dict 数据，dict 的 key 即为该数据的 column：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Shanghai'</span>, <span class="string">'Beijing'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>]</span><br><span class="line">&#125;</span><br><span class="line">user_info = pd.DataFrame(data=user_data, index=index)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<h3 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h3><h4 id="访问行"><a href="#访问行" class="headerlink" title="访问行"></a>访问行</h4><p>从打印出来的 DataFrame 可见，每一行就表示一个用户的数据，那我们需要取某一个用户的数据时该怎么做呢？</p>
<p>直接通过索引访问：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引名称访问</span></span><br><span class="line">user_info.loc[<span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>age           18
city    Shanghai
Name: Tom, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引角标访问</span></span><br><span class="line">user_info.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>age           18
city    Shanghai
Name: Tom, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还支持切片操作</span></span><br><span class="line">user_info.iloc[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同样还支持索引名称操作！</span></span><br><span class="line">user_info.loc[<span class="string">'Tom'</span>: <span class="string">'Mary'</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
</tbody>
</table>
<p>DataFrame 的索引操作还可以直接这么做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'Tom'</span>: <span class="string">'Bob'</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="number">1</span>: <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
</tbody>
</table>
<h4 id="访问列"><a href="#访问列" class="headerlink" title="访问列"></a>访问列</h4><p>如果我想获取所有人的年龄信息，即访问数据的列数据，有两种办法：</p>
<p>一、使用 <code>.attr</code> 操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
</code></pre><p>二、使用 <code>[&#39;attr&#39;]</code> 操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'age'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
</code></pre><p>那要是相同时获取多个列的数据呢？直接传入列的列表即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[[<span class="string">'age'</span>, <span class="string">'city'</span>]]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<h3 id="增加-删除列"><a href="#增加-删除列" class="headerlink" title="增加/删除列"></a>增加/删除列</h3><p>一个 DataFrame 构建完成之后，如果我们还想增加/删除某一列该怎么办呢？</p>
<p>还记得我们可以直接传递一个 dict 到 DataFrame 吗，同样，我们可以像操作字典一样直接加 column：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'gender'</span>] = <span class="string">'male'</span></span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>想删除某一列，同样如此简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info.pop(<span class="string">'gender'</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>当然，给 DataFrame 增加列时，可以传入列表（不过要注意，如果列表元素长度不匹配会报错）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'gender'</span>] = [<span class="string">'male'</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>]</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>上面都会在原来的 DataFrame 上做出修改，如果想保留原来的 DataFrame 不变，所有的修改产生出新的 DataFrame 的话，可以使用 <code>assign</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_user_info = user_info.assign(next_year_age=user_info[<span class="string">'age'</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">next_year_age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">41</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（一）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor使用（上）</title>
    <link href="https://yuanblq.github.io/2018/11/07/Supervisor%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/07/Supervisor使用（上）/</id>
    <published>2018-11-07T09:03:25.000Z</published>
    <updated>2018-11-07T09:04:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>supervisor 由两大件组成：</p>
<ul>
<li>supervisord</li>
<li>supervisorctl</li>
</ul>
<a id="more"></a>
<p>supervisord：主服务。负责自身的一些调用以及子进程的管理、响应来自客户端的命令、重启挂掉的子进程、记录子进程的日志、生成处理子进程各个生命节点的事件等等任务。</p>
<p>supervisorctl：提供了一个 shell 交互窗口。由此，我们可以和 supervisord 中的任意一个进程/子进程通信，获取进程的状态、控制子进程的启停，以及当前 supervisord 的进程运行列表。</p>
<p>supervisord、supervisorctl 的配置文件通常存在同一份配置文件中：<code>supervisord.conf</code>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>搞简单点，直接用 <code>pip</code> 安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure></p>
<p>我是直接用 <code>pyenv</code> 安装了一个 <code>Python2</code> 的环境，然后用 <code>Python2</code> 安装（Python3 版本的 supervisor coming soon ..）。</p>
<p><a href="https://yangchy.com/2017/05/27/python-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%A5%9E%E5%99%A8/" target="_blank" rel="noopener">关于 <code>pyenv</code> 的使用可以参考这篇。</a></p>
<p>然后用 <code>pyenv</code> 设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global My_ENV 2.7.15</span><br></pre></td></tr></table></figure></p>
<p>这样默认还是使用常用的虚拟环境，辅以 Python2，完美。</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>我们尝试监控一个简单的程序。</p>
<h4 id="配置-配置文件"><a href="#配置-配置文件" class="headerlink" title="配置 配置文件"></a>配置 配置文件</h4><p>正确安装完之后，直接在 shell 中输入 <code>echo_supervisord_conf</code> 回车就会出现官方默认的一个配置信息，我们新建一个项目文件夹，并把该文件存在该项目文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my_super_pro</span><br><span class="line">$ echo_supervisord_conf &gt; ./supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p>打开这个配置文件，我们做一些个性化的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在文件末尾添加一个 [program:foo] section</span><br><span class="line"></span><br><span class="line">[program:foo]</span><br><span class="line">command=/bin/cat</span><br></pre></td></tr></table></figure></p>
<p>保存之后就可以启动 supervisord 看看效果了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisord</span><br></pre></td></tr></table></figure></p>
<p>因为我们的配置文件就在当前启动目录下，而且名字就叫 <code>supervisord.conf</code>，所以 supervisord 能找到这个配置文件。</p>
<p>如果我们的配置文件不在启动的目录下，或者名字不交 supervisord.conf，就需要通过 <code>-c</code> 参数来指定相应的配置文件路径。</p>
<p>启动之后，我们就可以通过 <code>supervisorctl</code> 这个工具来管理启动的 supervisord 和对应的子进程。</p>
<p>查询子进程状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl status</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo     RUNNING   pid 87215, uptime 0:00:03</span><br></pre></td></tr></table></figure>
<p>结束所有子进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl stop all</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo: stopped</span><br></pre></td></tr></table></figure>
<p>启动子进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl start foo</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo: started</span><br></pre></td></tr></table></figure>
<p>可见我们的 foo 程序已经启动了。supervisor 大致的使用流程就如上所示，其他的就是一些细节的配置、调整。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;supervisor 由两大件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supervisord&lt;/li&gt;
&lt;li&gt;supervisorctl&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Supervisor" scheme="https://yuanblq.github.io/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（五）</title>
    <link href="https://yuanblq.github.io/2018/11/01/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/01/Ansible系列（五）/</id>
    <published>2018-11-01T10:01:18.000Z</published>
    <updated>2018-11-01T10:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了创建逻辑清晰，内容可重用的 Playbook，Playbook 支持 <code>import</code> 和 <code>include</code> 两种方法。</p>
<p>使用的时候，可能会发现用法很相似，但是 Ansible 执行的时候还是有区别的。</p>
<a id="more"></a>
<p><code>import *</code> 进来的语句都是在 Playbook 解析的时候就预处理完了。</p>
<p><code>include *</code> 进来的语句是在 Playbook 执行的时候才会执行。</p>
<h3 id="导入-Playbook"><a href="#导入-Playbook" class="headerlink" title="导入 Playbook"></a>导入 Playbook</h3><p>可以直接在主 Playbook 中导入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- import_playbook: webservers.yml</span><br><span class="line">- import_playbook: databases.yml</span><br></pre></td></tr></table></figure>
<p>在每个 Playbook 中的 play 和 task 都是按照其编写的顺序执行的，就像在主 Playbook 中直接定义的那样。</p>
<h3 id="导入-task"><a href="#导入-task" class="headerlink" title="导入 task"></a>导入 task</h3><p>将 task 打碎，放在分类好的各自文件中，是一种有效的组织复杂 task 的方法，而且还能重用这些 task。</p>
<p>比如一个普通的 task 列表长这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># common_tasks.yml</span><br><span class="line"></span><br><span class="line">- name: placeholder foo</span><br><span class="line">  command: /bin/foo</span><br><span class="line">- name: placeholder bar</span><br><span class="line">  command: /bin/bar</span><br></pre></td></tr></table></figure>
<p>我们可以在主 task 列表中使用 <code>import_tasks</code> 和 <code>include_tasks</code> 来导入其他文件的 tasks：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- import_tasks: common_tasks.yml</span><br><span class="line"># 或者这么导入</span><br><span class="line">- include_tasks: common_tasks.yml</span><br></pre></td></tr></table></figure>
<p>另外，在 <code>handlers</code> 中，我们也能像导入 task 一样导入 handlers：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># one_handers.yml</span><br><span class="line"></span><br><span class="line">- name: restart nginx</span><br><span class="line">  service: name=nginx state=restarted</span><br></pre></td></tr></table></figure>
<p>然后在 Playbook 中用到的地方直接导入就行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">handlers:</span><br><span class="line">- include_tasks: one_handlers.yml</span><br><span class="line"># 或者</span><br><span class="line">- import_tasks: one_handlers.yml</span><br></pre></td></tr></table></figure>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了创建逻辑清晰，内容可重用的 Playbook，Playbook 支持 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;include&lt;/code&gt; 两种方法。&lt;/p&gt;
&lt;p&gt;使用的时候，可能会发现用法很相似，但是 Ansible 执行的时候还是有区别的。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（四）</title>
    <link href="https://yuanblq.github.io/2018/10/24/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/24/Ansible系列（四）/</id>
    <published>2018-10-24T04:56:35.000Z</published>
    <updated>2018-10-24T13:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果说前面讲过的模块是雕刻工具，那么 Playbook 就是一份说明书，而清单中的主机就是原材料。</p>
<p>这三者联合起来，就能像流水线一样批量把清单中的主机改造成说明书里描述的样子。</p>
<a id="more"></a>
<h3 id="单口相声"><a href="#单口相声" class="headerlink" title="单口相声"></a>单口相声</h3><p>Playbook 顾名思义就是“剧本”，而剧本就是由一幕幕的戏剧构成。在每一幕剧中，清单中的主机充当各种主角，演绎剧本中的各种桥段。</p>
<p>我们来看一段只有一出戏的剧本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 01-playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: host01</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping the remote host</span><br><span class="line">    ping:</span><br><span class="line">  - name: copy local file to remote</span><br><span class="line">    copy:</span><br><span class="line">      src: /etc/hosts</span><br><span class="line">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>
<p>这份剧本解说：</p>
<ul>
<li>hosts：出演角色，可以一个人也可以一组人（对应清单中记录的姓名）。</li>
<li>remote_user：出道的艺名（以哪个用户身份登录远程主机）。</li>
<li>tasks：有哪些戏码。<ul>
<li>name：该戏码的名称。</li>
<li><code>ping</code>/<code>copy</code> 道具（使用的模块名字）。<ul>
<li><code>src</code>/<code>dest</code> 道具使用方式（模块参数）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>然后导演这出戏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook 01-playbook.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [host01] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [ping the remote host] ****************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [copy local file to remote] ***********************************************************************************</span><br><span class="line">changed: [host01]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************</span><br><span class="line">host01                        : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
<p>执行结果如上所示：<br><code>PLAY [host01]</code> 表示这出戏的主角是 <code>host01</code> 这位。</p>
<p><code>TASK [...]</code> 这个则是这出戏中主角的一系列演出动作，<code>TASK [Gathering Facts]</code> 这个动作则是每出戏都必备的，用来搜集主角当前的各种状态，之前不是说过 Ansible 自带“幂等性”功能嘛，这个准备工作也是在这步搜集信息的。其他两个 <code>TASK</code> 则是我们在剧本中指定的。</p>
<p><code>PLAY RECAP</code> 是观众对这出戏表演完之后的“评价”。</p>
<h3 id="对口相声"><a href="#对口相声" class="headerlink" title="对口相声"></a>对口相声</h3><p>我们现在再来增加一位角色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 02-playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: host01</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping the remote host</span><br><span class="line">    ping:</span><br><span class="line"></span><br><span class="line">- hosts: host02</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy local file to remote</span><br><span class="line">    copy:</span><br><span class="line">      src: /etc/hosts</span><br><span class="line">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>
<p>开导，<code>ansible-playbook 02-playbook.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PLAY [host01] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [ping the remote host] ****************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">PLAY [host02] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host02]</span><br><span class="line"></span><br><span class="line">TASK [copy local file to remote] ***********************************************************************************</span><br><span class="line">changed: [host02]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************</span><br><span class="line">host02                    : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">host01                    : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
<p>哈哈，导演一部两个人的剧也并不是很难嘛！</p>
<p>Playbook 的基本概念也就这么简单，无非就是看你导演的水平如何，能否导出一手好戏。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说前面讲过的模块是雕刻工具，那么 Playbook 就是一份说明书，而清单中的主机就是原材料。&lt;/p&gt;
&lt;p&gt;这三者联合起来，就能像流水线一样批量把清单中的主机改造成说明书里描述的样子。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>一台机器配置多个Git账号</title>
    <link href="https://yuanblq.github.io/2018/10/18/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E5%8F%B7/"/>
    <id>https://yuanblq.github.io/2018/10/18/一台机器配置多个Git账号/</id>
    <published>2018-10-18T07:00:57.000Z</published>
    <updated>2018-10-17T07:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一条优秀的程序狗，不单单要完成公司的开发项目，自己也会有几个开发项目。</p>
<p>不同项目之间如果想使用不同的 Git 账号管理，我们就需要进行如下配置。</p>
<a id="more"></a>
<h3 id="生成各自的-SSH-key"><a href="#生成各自的-SSH-key" class="headerlink" title="生成各自的 SSH key"></a>生成各自的 SSH key</h3><p>不同的 Git 账号，区分使用不同的 SSH key。</p>
<p>生成用户名为 one_git_name 的 SSH key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;one_git_name&quot; -f ~/.ssh/one-key</span><br></pre></td></tr></table></figure></p>
<p>生成用户名为 another_git_name 的 SSH key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;another_git_name&quot; -f ~/.ssh/another-key</span><br></pre></td></tr></table></figure></p>
<h3 id="配置对应的-SSH-key"><a href="#配置对应的-SSH-key" class="headerlink" title="配置对应的 SSH key"></a>配置对应的 SSH key</h3><p>生成了不同的 SSH key 之后，来为不同的账号配置对应的 SSH key。</p>
<p>在 <code>~/.ssh</code> 目录下，新建 <code>config</code> 文件，在其中进行如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host host-alias1（以后不同 Git 账号连接远程服务器时使用的别名，详见下面示例）</span><br><span class="line">    HostName github.com（对应 Git 服务提供商的域名）</span><br><span class="line">    User 登录用户名</span><br><span class="line">    Port 默认22，可不填（open-ssh 端口）</span><br><span class="line">    IdentityFile 私钥地址（例如：~/.ssh/one-key）</span><br><span class="line"></span><br><span class="line">Host host-alias2（以后不同 Git 账号连接远程服务器时使用的别名，详见下面示例）</span><br><span class="line">    HostName github.com（对应 Git 服务提供商的域名）</span><br><span class="line">    User 登录用户名</span><br><span class="line">    Port 默认22，可不填（open-ssh 端口）</span><br><span class="line">    IdentityFile 私钥地址（例如：~/.ssh/another-key）</span><br></pre></td></tr></table></figure>
<h3 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@host-alias1（上面配置的 Git 远程服务商别名）</span><br></pre></td></tr></table></figure>
<p>如果成功会有对应的提示，也可以 <code>ssh -vT git@host-alias1</code> 打出具体的 debug 信息，方便出错以后的调试。</p>
<h3 id="配置本地-Git-账号"><a href="#配置本地-Git-账号" class="headerlink" title="配置本地 Git 账号"></a>配置本地 Git 账号</h3><p>本地操作 Git 仓库的时候需要指定一个 Git 账号，可以配置一个全局的账号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;email@xx.com&quot;</span><br><span class="line">git config --global user.name &quot;username&quot;</span><br></pre></td></tr></table></figure>
<p>也可以在不同的项目仓库配置不同的 Git 账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先进入对应的 Git 仓库文件夹中</span><br><span class="line"></span><br><span class="line">git config user.email &quot;email@xx.com&quot;</span><br><span class="line">git config user.name &quot;username&quot;</span><br></pre></td></tr></table></figure></p>
<p>当然也可以直接修改不同 Git 仓库根目录下的 <code>.git/config</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 注意 [remote &quot;origin&quot;] 中的 url 这项配置</span><br><span class="line"># [user] 就是上面在项目仓库目录下的 git config user.email/name 配置，这里我们不使用命令而是直接手动写入文件</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        ignorecase = true</span><br><span class="line">        precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = git@host-alias1（就是之前我们在 .ssh/config 中配置不同 Git远程服务的别名）:项目.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;develop&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/develop</span><br><span class="line">[user]</span><br><span class="line">        email = email@xxx.com</span><br><span class="line">        name = username</span><br></pre></td></tr></table></figure>
<p>OK，配置完毕，继续 coding …</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一条优秀的程序狗，不单单要完成公司的开发项目，自己也会有几个开发项目。&lt;/p&gt;
&lt;p&gt;不同项目之间如果想使用不同的 Git 账号管理，我们就需要进行如下配置。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Git" scheme="https://yuanblq.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（三）</title>
    <link href="https://yuanblq.github.io/2018/10/16/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/16/Ansible系列（三）/</id>
    <published>2018-10-16T15:39:45.000Z</published>
    <updated>2018-10-15T15:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们安装并大体了解了 Ansible 的使用，接下来在我们开始学习 Playbook 以及其他好玩的内容之前，先来瞧瞧 <code>ad-hoc</code> 这个命令。</p>
<a id="more"></a>
<h3 id="什么是-ad-hoc"><a href="#什么是-ad-hoc" class="headerlink" title="什么是 ad-hoc"></a>什么是 ad-hoc</h3><p><code>ad-hoc</code> 命令和 Python 的 shell 命令差不多，用来快速执行验证一些命令。后面编写的 Playbook 就好像是 Python 的 <code>.py</code> 文件，通过 <code>ad-hoc</code> 就像使用 <code>iPython</code> 一样能帮助我们更好地学习 Playbook。</p>
<p>之前我们用到的 <code>ansible all -m ping</code> 就是一个 <code>ad-hoc</code> 命令。</p>
<h3 id="分身数"><a href="#分身数" class="headerlink" title="分身数"></a>分身数</h3><p>在上一篇讲到可以在“清单”文件中定义主机组，一个组里面可能有几个主机，也可能有十几个、几十个。我们执行 <code>ad-hoc</code> 命令的时候 Ansible 能在同一时间同时操作几台主机，在 Ansible 的配置文件中默认定义为 5 个，我们也可以在执行 <code>ad-hoc</code> 命令的时候通过 <code>-f</code> 参数手动指定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping -f 10</span><br></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>就如 Python 拥有许多内置包一样，Ansible 也有许多内置模块。</p>
<p>前面我们一直使用的 <code>ping</code> 就是其中的一个模块，下面再介绍几个常用的模块。</p>
<p>使用 <code>ansible-doc -l</code> 可以查看到 Ansible 有哪些内置的模块，以及这些模块的简介。</p>
<p>我们在想要实现一个功能的时候可以通过 <code>ansible-doc -l | grep &quot;功能关键字&quot;</code> 来快速搜索。</p>
<p>找到对应的模块名字之后，我们可以使用 <code>ansible-doc -s ping</code> 来查看详细关于模块的使用方法（示例为查看 ping 模块的具体使用方法）。</p>
<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m shell -a &apos;echo $PWD&apos;</span><br></pre></td></tr></table></figure>
<p>上面调用 <code>shell</code> 模块，并通过 <code>-a</code> 参数传入执行 shell 命令时候的参数。</p>
<p>在传入参数的时候需要注意单引号和双引号的区别：上面使用的单引号里面的 <code>$PWD</code> 是远程主机的环境变量，如果换成双引号则 <code>$PWD</code> 使用的是当前执行 Ansible 命令的主机的环境变量。</p>
<p>还记得我们之前说的，Ansible 具有“幂等性”的特征吗。到目前为止，我们一直在使用简单的命令。但是大多数的 Ansible 模块并不是简单的执行命令，它们能在执行命令前计算出最终的状态，然后判断到底需不需要执行我们传进来的命令。</p>
<h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><p>我们先通过 <code>ansible-doc -s copy</code> 看看有哪些常用操作：</p>
<ul>
<li>src：本地需要复制到远程主机的文件或目录，可以是绝对路径，也可以是相对路径。<ul>
<li>指定的路径是文件：没话说，直接复制该文件</li>
<li>指定的路径是文件夹：如果不是以“/”结尾，那就是把该文件夹整个复制，如果是以“/”结尾，则是把文件夹里面的内容复制到远程主机。</li>
</ul>
</li>
<li>dest：复制到远程主机的哪个路径。<ul>
<li>如果“src”是一个文件夹，“dest”也必须是个文件夹。</li>
<li>如果指定的“src”路径不存在并且“dest”以“/”结尾或者“src”是个文件夹，“dest”会以 <code>mkdir -p</code> 的形式创建。</li>
<li>如果“src”和“dest”都是文件，那么“dest”路径不存在则会执行失败。</li>
</ul>
</li>
<li>force：默认“yes”。当文件名一样，但是内容不一样时，是否强制替换。</li>
<li>backup：当强制替换文件的时候，是否需要备份原文件。</li>
<li>mode：修改文件或文件夹的权限。对于习惯使用 <code>chmod</code> 的人来说，如果指定数字，则必须使用八进制（如 0644 或 01777 这样的），如果指定字符串，则使用引号（如 ‘644’ 或 ‘1777’ 这样的）。Ansible 1.8版本之后可以使用符号模式（如 u+rwx 或 u=rw,g=r,o=r 这样的）。</li>
</ul>
<p>直接把文件复制到远程主机：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot;</span><br></pre></td></tr></table></figure>
<h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><ul>
<li>path：需要管理的文件对象</li>
<li>state：<ul>
<li>directory：类似 <code>mkdir -p</code></li>
<li>file：创建文件</li>
<li>link：创建软链接</li>
<li>hard：创建硬链接</li>
<li>absent：删除文件或文件夹，解除软硬链接</li>
<li>touch：如果 path 不存在，则创建一个空文件。如果 path 存在，则更新该文件的权限或者修改时间</li>
</ul>
</li>
<li>src：当 state=link/hard 的时候我们需要指定链接的源文件<ul>
<li>绝对路径</li>
<li>相对路径：相对要被创建链接的文件的路径</li>
<li>空路径</li>
</ul>
</li>
<li>force：作用于创建链接的时候<ul>
<li>源文件不存在（之后会有）</li>
<li>目标链接已存在（则会先解除原来的链接，再创建当前新的链接）</li>
</ul>
</li>
<li>mode：和 <code>copy</code> 模块的 mode 一致</li>
<li>recurse：当操作的目标为文件夹的时候，recurse=yes，可以递归地修改文件夹中文件的属性</li>
</ul>
<p>修改权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/srv/foo/a.txt mode=600 owner=haha group=haha&quot;</span><br></pre></td></tr></table></figure></p>
<p>创建文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/path/to/new/dir mode=755 owner=haha group=haha state=directory&quot;</span><br></pre></td></tr></table></figure></p>
<p>删除文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/path/to/new/dir state=absent&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>当我们部署 webapp 的时候如果是从 git 拉取代码的话，可以使用 git 模块：</p>
<ul>
<li>repo：git 仓库地址（必填）</li>
<li>accept_hostkey：设为 yes，能帮我们自动把 git 服务器添加到 <code>known_hosts</code> 中。</li>
<li>clone：如果目标路径不存在，则不会 clone 远程仓库（默认 yes）</li>
<li>dest：把远程仓库 clone 到哪里（除非上面 clone=no，不然必填）</li>
<li>force：如果设为 yes，会丢掉本地仓库的任何变动</li>
<li>version：checkout 到哪个分支（也可以是 HEAD，分支名，tag 名，SHA-1 值）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m git -a &quot;repo=https://foo.example/org/repo.git dest=/srv/myapp version=develop accept_hostkey=yes force=yes&quot;</span><br></pre></td></tr></table></figure>
<p>Ansible 拥有众多模块，暂且不展开讲述了，等用到的时候查下基本就知道怎么用了，多实践才能熟练。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们安装并大体了解了 Ansible 的使用，接下来在我们开始学习 Playbook 以及其他好玩的内容之前，先来瞧瞧 &lt;code&gt;ad-hoc&lt;/code&gt; 这个命令。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（二）</title>
    <link href="https://yuanblq.github.io/2018/10/13/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/13/Ansible系列（二）/</id>
    <published>2018-10-13T09:07:07.000Z</published>
    <updated>2018-10-12T09:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>清单配置详解</p>
<p>Ansible 的“清单”文件就像是黄页电话本。有了它，我们就能和各个主机进行通话交流。</p>
<a id="more"></a>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>像这种通讯联系本都会有一个功能 —— 分组，或者说“打标签”。这样无论再多的联系人（主机）我们都能很轻松地找到。</p>
<p>Ansible 有一个自带的分组名称 —— all。</p>
<p>没错就是字面意思。该分组包含“清单”中的所有联系人。通过这个关键字 <code>all</code> 我们可以同时对“清单”中所有的主机进行操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">host01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">host02 ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">host02 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们自己定义几个分组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">test01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Prod]</span><br><span class="line">prod02 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">prod03 ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure>
<p>上面，我们先定义了两个分组 <code>Test</code>，<code>Prod</code>。接下来我们就可以直接对整个组里的主机进行操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible Test -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible Prod -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prod02 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">prod03 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们创建了两个分组 —— 测试组和生产组。我们现在可以分别操作这两个组，但是有些操作却是不区分测试组还是生产组的，怎么办呢？</p>
<p>没错，再建一个同时包含这两个组所有主机的新分组。</p>
<p>那如果每一个组包含的主机很多，这种做法效率就太低了，我们还有另一种方法 —— 嵌套。</p>
<p>就是我们在新建的组里面直接添上其他的组名，不用一个个添上其他组内的主机名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">test01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Prod]</span><br><span class="line">prod02 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">prod03 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Basic]</span><br><span class="line">Test</span><br><span class="line">Prod</span><br></pre></td></tr></table></figure>
<p>这样我们想对所有主机执行一些基础操作的时候，就可以直接操作 <code>Basic</code> 组。</p>
<h3 id="YAML-语法"><a href="#YAML-语法" class="headerlink" title="YAML 语法"></a>YAML 语法</h3><p>以上“清单”的配置都是 ini 格式的写法，ansible 的“清单”还支持 YAML 格式的语法。</p>
<p>为什么还要知道 YAML 语法格式的“清单”配置呢？</p>
<p>后面介绍的 Ansible Playbook 配置使用的就是 YAML 语法，虽然“清单”对于 ini 和 YAML 两种语法都支持，但是我们使用同一种语法格式总是会舒服一点。当然这种舒服也是因人而异的，具体使用中哪个适合自己就是用哪个。</p>
<p>下面列出几个 ini 和 YAML 两种格式的对比:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 最简单的 ini</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line"># 对应的 YAML</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br></pre></td></tr></table></figure>
<p>YAML 格式中，最上方的 <code>all</code> 就是之前我们所说的关键字，在 YAML 中必须把 <code>all</code> 写在最上方。这样才符合 <code>all</code> 这个关键字本身的地位嘛。</p>
<p>接着来看其他几个格式对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 简单分组的 ini 格式</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line">[Ga]</span><br><span class="line">y.y.y.y</span><br><span class="line"></span><br><span class="line">[Gb]</span><br><span class="line">z.z.z.z</span><br><span class="line"></span><br><span class="line"># 对应的 YAML</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br><span class="line">    children:</span><br><span class="line">        Ga:</span><br><span class="line">            hosts:</span><br><span class="line">                y.y.y.y</span><br><span class="line">        Gb:</span><br><span class="line">            hosts:</span><br><span class="line">                z.z.z.z</span><br></pre></td></tr></table></figure></p>
<p>可以看出，YAML 格式中定义“组”需要用到 <code>children</code> 关键字。</p>
<p>再来看个嵌套分组的对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># ini 格式</span><br><span class="line">[Ga]</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line">[Gb]</span><br><span class="line">y.y.y.y</span><br><span class="line"></span><br><span class="line">[Gc]</span><br><span class="line">Ga</span><br><span class="line">Gb</span><br><span class="line"></span><br><span class="line"># 对应的 YAML 格式</span><br><span class="line">all:</span><br><span class="line">    children:</span><br><span class="line">        Gc:</span><br><span class="line">            children:</span><br><span class="line">                Ga:</span><br><span class="line">                    hosts:</span><br><span class="line">                        x.x.x.x</span><br><span class="line">                Gb:</span><br><span class="line">                    hosts:</span><br><span class="line">                        y.y.y.y</span><br></pre></td></tr></table></figure></p>
<p>最后我们再来看一个指定 port、name 的两个格式对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ini 格式</span><br><span class="line">x.x.x.x</span><br><span class="line">host01 ansible_host=y.y.y.y ansible_port=22</span><br><span class="line"></span><br><span class="line"># 对应的 YAML 格式</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br><span class="line">        host01:</span><br><span class="line">            ansible_host: y.y.y.y</span><br><span class="line">            ansible_port: 22</span><br></pre></td></tr></table></figure></p>
<p>YAML 语法其实也不是很难，只是把一些逻辑上的层级关系用缩进的形式表现了出来，想要查找学习更多关于“清单”的内容，可以参见<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html" target="_blank" rel="noopener">官网文档。</a></p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;清单配置详解&lt;/p&gt;
&lt;p&gt;Ansible 的“清单”文件就像是黄页电话本。有了它，我们就能和各个主机进行通话交流。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（一）</title>
    <link href="https://yuanblq.github.io/2018/10/11/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/11/Ansible系列（一）/</id>
    <published>2018-10-11T14:22:22.000Z</published>
    <updated>2018-10-12T09:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible 是什么？</p>
<p>Ansible 是一款自动化工具。可以用它来配置系统，部署程序，甚至更高级的持续部署。</p>
<a id="more"></a>
<p>Ansible 难不难？</p>
<p>Ansible 设计的主要目的就是简单易用。但虽然简单，却拥有极强的安全性和可靠性。Ansible 采用的是 OpenSSH 无代理方式管理机器，由于 OpenSSH 是备受广大用户检验过的开源组件之一，因此安全性极高。同时，Ansible 还是分布式的 — 依赖系统凭据来控制远程主机，无需在远程主机安装客户端。</p>
<p>直接步入正题吧！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>很简单，直接通过 pip 即可安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ansible</span><br></pre></td></tr></table></figure></p>
<h3 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h3><p>我们要想控制远程主机，当然得让 Ansible 知道要控制哪台主机。这个信息就存储在一个叫做“清单”的文件中。</p>
<p>该“清单”文件默认存放在 <code>/etc/ansible/hosts</code> 文件中，我们现在把受管的主机信息添加到 <code>Inventory</code> 清单文件中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line">x.x.x.x</span><br></pre></td></tr></table></figure></p>
<p>如果你想自定义“清单”文件的存储路径，则在执行命令的时候通过 <code>-i &lt;path&gt;</code> 来指定自己的“清单”文件。</p>
<p>我现在是存在默认位置的，所以我就不使用 <code>-i</code> 参数了，现在执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible x.x.x.x -m ping</span><br></pre></td></tr></table></figure></p>
<p>这个命令很简单，一看就知道是对这台主机进行 ping 操作。</p>
<p>执行后，返回的结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;,</span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>失败了？为什么会出现这个错误？</p>
<p>哈哈，我们在“清单”文件中就填了一个 ip，就算 Ansible 再怎么厉害，怎么可能不用密码就能有权限管理这台主机呢。</p>
<p>我们添上用户名密码配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x ansible_port=22 ansible_user=root ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure></p>
<p>这个配置是基于密码认证的，但是为了提高安全性，通常会基于密钥认证，密码认证甚至都会被禁用。</p>
<p>我们将本机公钥添加到受管主机的认证列表之后就可以直接这么配置“清单”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure></p>
<p>因为添加了公钥，所以可以省略密码，而sshd端口本来就采用的默认 22，所以也可以省略。</p>
<p>最后，为了以后我们能方便地管理受管主机，我们可以像域名一样给我们的受管主机也起个别名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haha ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure></p>
<p>再次执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible haha -m ping</span><br><span class="line"></span><br><span class="line">haha | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>成功！</p>
<p>好了，Ansible 的大体执行流程就是这么简单。下一篇我们接着看看“清单”文件还有有哪些神奇功效。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ansible 是什么？&lt;/p&gt;
&lt;p&gt;Ansible 是一款自动化工具。可以用它来配置系统，部署程序，甚至更高级的持续部署。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Channel实战-聊天服务器-P02</title>
    <link href="https://yuanblq.github.io/2018/07/31/Channel%E5%AE%9E%E6%88%98-Part02/"/>
    <id>https://yuanblq.github.io/2018/07/31/Channel实战-Part02/</id>
    <published>2018-07-31T07:33:41.000Z</published>
    <updated>2018-07-31T04:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中我们已经把基本的环境配置都弄好了。</p>
<p>现在我们就正式进入正题，搭建我们的聊天服务器。</p>
<a id="more"></a>
<h4 id="实现一个聊天服务器"><a href="#实现一个聊天服务器" class="headerlink" title="实现一个聊天服务器"></a>实现一个聊天服务器</h4><h5 id="添加一个聊天室视图"><a href="#添加一个聊天室视图" class="headerlink" title="添加一个聊天室视图"></a>添加一个聊天室视图</h5><p>现在我们再创建第二个视图，我们可以在里面发送我们想要发送的消息。</p>
<p>我们现在创建这个文件 <code>chat/templates/chat/room.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chat/templates/chat/room.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat Room<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"chat-log"</span> <span class="attr">cols</span>=<span class="string">"100"</span> <span class="attr">rows</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"chat-message-input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"100"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"chat-message-submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Send"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var roomName = &#123;&#123; room_name_json &#125;&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var chatSocket = new WebSocket(</span></span><br><span class="line"><span class="undefined">        'ws://' + window.location.host +</span></span><br><span class="line"><span class="undefined">        '/ws/chat/' + roomName + '/');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    chatSocket.onmessage = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        var data = JSON.parse(e.data);</span></span><br><span class="line"><span class="undefined">        var message = data['message'];</span></span><br><span class="line"><span class="undefined">        document.querySelector('#chat-log').value += (message + '\n');</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    chatSocket.onclose = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        console.error('Chat socket closed unexpectedly');</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-input').focus();</span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-input').onkeyup = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        if (e.keyCode === 13) &#123;  // enter, return</span></span><br><span class="line"><span class="undefined">            document.querySelector('#chat-message-submit').click();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-submit').onclick = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        var messageInputDom = document.querySelector('#chat-message-input');</span></span><br><span class="line"><span class="undefined">        var message = messageInputDom.value;</span></span><br><span class="line"><span class="undefined">        chatSocket.send(JSON.stringify(&#123;</span></span><br><span class="line"><span class="undefined">            'message': message</span></span><br><span class="line"><span class="undefined">        &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        messageInputDom.value = '';</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在 <code>view.py</code> 中创建视图函数，为了安全起见，我们需要对房间名做个安全操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/index.html'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">room</span><span class="params">(request, room_name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/room.html'</span>, &#123;</span><br><span class="line">        <span class="string">'room_name_json'</span>: mark_safe(json.dumps(room_name))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>
<p>最后，我们来创建这个路由：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;room_name&gt;[^/]+)/$'</span>, views.room, name=<span class="string">'room'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>OK，启动测试服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入 <code>http://127.0.0.1:8000/chat/</code>，然后输入“lobby”按回车，就会跳转到 <code>http://127.0.0.1:8000/chat/lobby/</code> 这个聊天页面。</p>
<p>我们输入“Hello”，然后按回车。</p>
<p>咦？什么也没有发生，甚至还出现了这行 log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2018/07/31 09:25:49] WebSocket DISCONNECT /ws/chat/lobby/ [127.0.0.1:51241]</span><br></pre></td></tr></table></figure></p>
<p>到底什么情况，哪出错了？</p>
<p>当我们按下回车发送消息的时候会打开连向 <code>ws://127.0.0.1:8000/ws/chat/lobby/</code> 的一个 WebSocket，但是我们还没创建消费者来接收这个 WebSocket 连接。</p>
<h5 id="创建第一个消费者"><a href="#创建第一个消费者" class="headerlink" title="创建第一个消费者"></a>创建第一个消费者</h5><p>和 Django 接收 HTTP 请求之后根据 URLconf 找到对应的 view 视图一样，当 channel 接收到一个 WebSocket 连接之后，也需要根据 routing 配置找到对应的消费者去处理各种到来的事件。</p>
<p>现在我们来创建一个连向 <code>/ws/chat/ROOM_NAME/</code> WebSocket 的一个消费者，并把接收到的聊天信息原样返回回去。</p>
<p>创建一个新文件 <code>chat/consumers.py</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/consumers.py</span></span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure></p>
<p>然后和 Django 的 URLconf 一样，我们也在各个 APP 中创建对应的 <code>routing.py</code> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^ws/chat/(?P&lt;room_name&gt;[^/]+)/$'</span>, consumers.ChatConsumer),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>下一步，就是要在项目的 <code>routing.py</code> 文件中加入我们 <code>chat.routing</code> 配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/routing.py</span></span><br><span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> AuthMiddlewareStack</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">import</span> chat.routing</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="comment"># (http-&gt;django views is added by default)</span></span><br><span class="line">    <span class="string">'websocket'</span>: AuthMiddlewareStack(</span><br><span class="line">        URLRouter(</span><br><span class="line">            chat.routing.websocket_urlpatterns</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这个路由配置表示：如果接收到一个发至 channels 服务器的一个连接，<code>ProtocolTypeRouter</code> 会先检查这个连接的类型。如果是一个 WebSocket 连接（ws:// 或者 wss://），该连接就会给到 <code>AuthMiddlewareStack</code> 去处理。</p>
<p><code>AuthMiddlewareStack</code> 能从连接的 <code>scope</code> 中拿到当前验证的用户对象，就像 Django 的 <code>AuthenticationMiddleware</code> 从 <code>request</code> 中拿到验证的用户对象一样。</p>
<p>然后该连接继续传给 <code>URLRouter</code>。</p>
<p><code>URLRouter</code> 就会最终路由到对应的消费者。</p>
<p>现在我们再次启动测试服务器验证一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>现在我们再试着之前的操作，在聊天页面输入聊天信息，之后回车，是不是很神奇，我们的聊天内容果真发出去了。</p>
<p>不要高兴的太早！</p>
<p>试着再打开一个同名的 <code>lobby</code> 聊天室，模拟下多人在同一个聊天室能否互相聊天。</p>
<p>哈哈哈，不行吧。</p>
<p>这时，我们就需要引入 <code>channel layer</code> 这一抽象概念，来帮我们在同一个消费者的多个实例中传递数据。</p>
<h5 id="搞定-channel-layer"><a href="#搞定-channel-layer" class="headerlink" title="搞定 channel layer"></a>搞定 channel layer</h5><p>channel layer 是一种通信系统。它能让你能在多个消费者实例间互相通信。</p>
<p><code>channel layer</code> 包含两个抽象概念：</p>
<ul>
<li><code>channel</code> 类似于邮箱，我们要通信的消息会发往这里。每个 <code>channel</code> 都有一个独一无二的名字，只要我们拥有这个名字，就能往这里发消息。</li>
<li><code>group</code> 是一组相关 <code>channel</code> 的集合。同样 <code>group</code> 也有名字，拥有这个名字，我们就能往里面添加删除 <code>channel</code>，并且能往该 <code>group</code> 中所有的 <code>channel</code> 发送消息。</li>
</ul>
<p>每个消费者实例都会自动生成唯一的 channel 名字，我们就可以用它在 channel layer 中进行通信。</p>
<p>因此，我们把每个 <code>ChatConsumer</code> 的 channel 添加到以 room 名字命名的 group 中，这样在同一个房间的 <code>ChatConsumer</code> 可以互相通信了。</p>
<p>在用 channel layer 之前，我们还需要用到 Redis 作为后端存储。</p>
<p>方便起见，我们可以直接用 Docker 起一个 Redis 服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure></p>
<p>然后，我们还需要安装 <code>channels_redis</code> 来让我们的 channel 和 redis 进行通信：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install channels_redis</span><br></pre></td></tr></table></figure></p>
<p>最后，需要在项目的 <code>settings.py</code> 中添加如下配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">'WSChat.routing.application'</span></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'channels_redis.core.RedisChannelLayer'</span>,</span><br><span class="line">        <span class="string">'CONFIG'</span>: &#123;</span><br><span class="line">            <span class="string">"hosts"</span>: [(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这一切安装完之后，我们进入 Django 的 shell 环境验证下有没有安装成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py shell</span><br><span class="line">In [1]: import channels.layers</span><br><span class="line"></span><br><span class="line">In [2]: channel_layer = channels.layers.get_channel_layer()</span><br><span class="line"></span><br><span class="line">In [3]: from asgiref.sync import async_to_sync</span><br><span class="line"></span><br><span class="line">In [4]: async_to_sync(channel_layer.send)(<span class="string">'test_channel'</span>, &#123;<span class="string">'type'</span>: <span class="string">'hello'</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [5]: async_to_sync(channel_layer.receive)(<span class="string">'test_channel'</span>)</span><br><span class="line">Out[5]: &#123;<span class="string">'type'</span>: <span class="string">'hello'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在，我们就来改造一下之前的 <code>ChatConsumer</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/consumers.py</span></span><br><span class="line"><span class="keyword">from</span> asgiref.sync <span class="keyword">import</span> async_to_sync</span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.room_name = self.scope[<span class="string">'url_route'</span>][<span class="string">'kwargs'</span>][<span class="string">'room_name'</span>]</span><br><span class="line">        self.room_group_name = <span class="string">'chat_%s'</span> % self.room_name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将当前 channel 对象加入 group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_add)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="comment"># Leave room group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_discard)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 WebSocket 接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息发往 group，以便同一聊天室的大家都能收到消息</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_send)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'chat_message'</span>,</span><br><span class="line">                <span class="string">'message'</span>: message</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 group 接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chat_message</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        message = event[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息发往 WebSocket</span></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure></p>
<p>整个聊天流程是这样的：</p>
<ul>
<li>一个用户发送一条消息，JS 函数把这条消息通过 WebSocket 传递给 ChatConsumer。</li>
<li>ChatConsumer 收到消息后，将消息转到对应的聊天室 group。</li>
<li>在同一 group 的 ChatConsumer 从 group 收到消息后会通过 WebSocket 把消息转给 JS，最终呈现在前端。</li>
</ul>
<p>关于上面的代码还有几点需要解释一下：</p>
<ul>
<li><p>self.scope[‘url_route’][‘kwargs’][‘room_name’]</p>
<ul>
<li>从 <code>chat/routing.py</code> 路由中获取 <code>room_name</code> 参数</li>
<li>每个消费者都有一个 <code>scope</code> 参数，包含了连接相关的信息，还有来自 URLRouter 的位置参数和关键字参数，以及当前用户对象</li>
</ul>
</li>
<li><p>self.room_group_name=’chat_%s’ % self.room_name</p>
<ul>
<li>通过用户指定的房间名构造一个 channel 的 group 名字</li>
<li>注意：group 名字只能包含字母、数字、连字符和句点</li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_add)(…)</p>
<ul>
<li>加入一个 group</li>
<li>因为我们的 ChatConsumer 是一个同步的消费者，所有有必要调用 <code>async_to_sync(...)</code> 装饰器。（所有的 channel layer 方法都是异步的）</li>
</ul>
</li>
<li><p>self.accept()</p>
<ul>
<li>接收 WebSocket 连接</li>
<li>如果不在 <code>connect()</code> 方法中调用 <code>accept()</code>，那么该连接将会被拒绝并关闭。比如，当用户未验证身份时，你可以拒绝连接</li>
<li>推荐在 <code>connect()</code> 方法的最后再去调用 <code>accept()</code></li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_discard)(…)</p>
<ul>
<li>退出 group</li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_send)</p>
<ul>
<li>往 group 发送一个事件</li>
<li>每个事件都有一个 <code>type</code> 的特殊关键key，表示该事件将会去调用这个消费者中哪个名字的方法来处理这个事件</li>
</ul>
</li>
</ul>
<p>OK，我们来验证下是否好用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>打开两个浏览器页面进入 <code>http://127.0.0.1:8000/chat/lobby/</code> 页面，试着在两个页面分别输入消息，看看是否都能收到消息。</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/tutorial/part_2.html" target="_blank" rel="noopener">Channels</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章中我们已经把基本的环境配置都弄好了。&lt;/p&gt;
&lt;p&gt;现在我们就正式进入正题，搭建我们的聊天服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="实战" scheme="https://yuanblq.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
      <category term="Channel" scheme="https://yuanblq.github.io/tags/Channel/"/>
    
      <category term="Django" scheme="https://yuanblq.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Channel实战-聊天服务器-P01</title>
    <link href="https://yuanblq.github.io/2018/07/30/Channel%E5%AE%9E%E6%88%98-Part01/"/>
    <id>https://yuanblq.github.io/2018/07/30/Channel实战-Part01/</id>
    <published>2018-07-30T03:48:25.000Z</published>
    <updated>2018-07-31T04:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列，我们将会构建一个基于 WebSocket 的聊天服务器。</p>
<p>一共只有两个页面：</p>
<ul>
<li>输入要加入聊天室的名称</li>
<li>具体聊天室的聊天页面</li>
</ul>
<a id="more"></a>
<h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>本系列环境要求：</p>
<blockquote>
<p>Python &gt;= 3.5<br>Django &gt;= 1.11<br>channels &gt;= 2.0</p>
</blockquote>
<h5 id="创建一个-Django-项目"><a href="#创建一个-Django-项目" class="headerlink" title="创建一个 Django 项目"></a>创建一个 Django 项目</h5><p>在一个合适的目录创建我们即将使用的新项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject WSChat</span><br></pre></td></tr></table></figure></p>
<p>这时，我们的目录结构应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSChat/</span><br><span class="line">    manage.py</span><br><span class="line">    WSChat/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure></p>
<h5 id="创建-Chat-APP"><a href="#创建-Chat-APP" class="headerlink" title="创建 Chat APP"></a>创建 Chat APP</h5><p>我们会把聊天相关的服务都放在这个 APP 内：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp chat</span><br></pre></td></tr></table></figure></p>
<p>此时会多出一个这样的 <code>chat</code> 文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chat/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></p>
<p>然后我们需要让 Django 知道我们刚创建的 <code>chat</code> APP。</p>
<p>在 <code>WSChat/settings.py</code> 文件的 <code>INSTALLED_APPS</code> 配置中添加 <code>chat</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'chat'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h5 id="添加主页面"><a href="#添加主页面" class="headerlink" title="添加主页面"></a>添加主页面</h5><p>现在我们需要创建一个主页面，能让我们输入要加入的聊天室名字。</p>
<p>在 <code>chat</code> 文件夹内创建 <code>templates</code> 文件夹，在 <code>templates</code> 文件夹内创建 <code>chat</code> 文件夹，最后，在刚建的 <code>chat</code> 文件夹创建 <code>index.html</code> 文件。</p>
<p>最终， <code>chat</code> 文件夹可能长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chat/</span><br><span class="line">    __init__.py</span><br><span class="line">    templates/</span><br><span class="line">        chat/</span><br><span class="line">            index.html</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></p>
<p>然后我们把下面代码放进刚创建的 <code>index.html</code> 文件内：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chat/templates/chat/index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat Rooms<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    What chat room would you like to enter?<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"room-name-input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"100"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"room-name-submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Enter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-input').focus();</span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-input').onkeyup = function(e) &#123;</span></span><br><span class="line"><span class="undefined">            if (e.keyCode === 13) &#123;  // enter, return</span></span><br><span class="line"><span class="undefined">                document.querySelector('#room-name-submit').click();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-submit').onclick = function(e) &#123;</span></span><br><span class="line"><span class="undefined">            var roomName = document.querySelector('#room-name-input').value;</span></span><br><span class="line"><span class="undefined">            window.location.pathname = '/chat/' + roomName + '/';</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接着，我们在 <code>chat/view.py</code> 文件内创建我们的视图函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/index.html'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>最后，配置我们的路由地址。</p>
<p>先在 <code>chat</code> APP 内创建 <code>urls.py</code> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>然后，在项目的 <code>urls.py</code> 文件中创建以下路由代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^chat/'</span>, include(<span class="string">'chat.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>好了，我们现在启动测试服务器验证一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>你可能会在终端看到如下的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &apos;python manage.py migrate&apos; to apply them.</span><br><span class="line"></span><br><span class="line">July 30, 2018 - 03:37:32</span><br><span class="line">Django version 2.0.7, using settings &apos;JTChannel.settings&apos;</span><br><span class="line">Starting development server at http://0.0.0.0:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入 <code>http://127.0.0.1:8000/chat/</code> 就可以看见带“What chat room would you like to enter?”这句话的输入框。</p>
<p>我们输入“lobby”并回车，我们发现我们的页面地址跳转到了 <code>http://127.0.0.1:8000/chat/lobby/</code>，但我们现在还没写这个页面，所有会出现“Page not found”的错误页面。</p>
<h5 id="集成-channel-库"><a href="#集成-channel-库" class="headerlink" title="集成 channel 库"></a>集成 channel 库</h5><p>首先，像配置 Django 的 URLconf 一样，配置 channels 的 routing 配置。</p>
<p>这样，当 Channels 服务器收到 HTTP 请求之后，就能知道需要执行哪段代码。</p>
<p>现在，我们现在 <code>WSChat/routing.py</code> 文件中创建一下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="comment">#  (http-&gt;django views is added by default)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>然后，我们要在 <code>settings.py</code> 配置的 <code>INSTALLED_APPS</code> 中加上我们的 <code>channels</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'channels'</span>,</span><br><span class="line">    <span class="string">'chat'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>最后需要像 WSGI 一样，告诉 Django 我们 channels 的根路由配置文件在哪：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">'WSChat.routing.application'</span></span><br></pre></td></tr></table></figure></p>
<p>最后我们再来启动测试服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &apos;python manage.py migrate&apos; to apply them.</span><br><span class="line"></span><br><span class="line">July 30, 2018 - 03:37:32</span><br><span class="line">Django version 2.0.7, using settings &apos;JTChannel.settings&apos;</span><br><span class="line">Starting ASGI/Channels version 2.1.2 development server at http://0.0.0.0:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br><span class="line">2018-07-30 03:37:32,233 - INFO - server - HTTP/2 support not enabled (install the http2 and tls Twisted extras)</span><br><span class="line">2018-07-30 03:37:32,233 - INFO - server - Configuring endpoint tcp:port=8000:interface=0.0.0.0</span><br><span class="line">2018-07-30 03:37:32,236 - INFO - server - Listening on TCP address 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<p>这时，如果你看见这段话 <code>Starting ASGI/Channels version 2.1.2 development server at http://0.0.0.0:8000/</code> 说明 channel 已经接管了 Django 的测试服务器。</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/tutorial/part_1.html" target="_blank" rel="noopener">Channels</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列，我们将会构建一个基于 WebSocket 的聊天服务器。&lt;/p&gt;
&lt;p&gt;一共只有两个页面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入要加入聊天室的名称&lt;/li&gt;
&lt;li&gt;具体聊天室的聊天页面&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="实战" scheme="https://yuanblq.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
      <category term="Channel" scheme="https://yuanblq.github.io/tags/Channel/"/>
    
      <category term="Django" scheme="https://yuanblq.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow-01-预测房价</title>
    <link href="https://yuanblq.github.io/2018/07/27/TensorFlow-01-%E9%A2%84%E6%B5%8B%E6%88%BF%E4%BB%B7/"/>
    <id>https://yuanblq.github.io/2018/07/27/TensorFlow-01-预测房价/</id>
    <published>2018-07-27T09:44:16.000Z</published>
    <updated>2018-07-27T09:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习目标：</p>
<ul>
<li>学习基本的 TensorFlow 概念</li>
<li>在 TensorFlow 中使用 LinearRegressor 类并基于单个输入特征预测各城市街区的房屋价值中位数</li>
<li>使用均方根误差 (RMSE) 评估模型预测的准确率</li>
<li>通过调整模型的超参数提高模型准确率</li>
</ul>
<a id="more"></a>
<h4 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">house_data = pd.read_csv(<span class="string">"https://dl.google.com/mlcc/mledu-datasets/california_housing_train.csv"</span>, sep=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">print(house_data)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">       longitude         ...          median_house_value</span><br><span class="line">0         -114.3         ...                     66900.0</span><br><span class="line">1         -114.5         ...                     80100.0</span><br><span class="line">2         -114.6         ...                     85700.0</span><br><span class="line">3         -114.6         ...                     73400.0</span><br><span class="line">4         -114.6         ...                     65500.0</span><br><span class="line">...          ...         ...                         ...</span><br><span class="line">16995     -124.3         ...                    111400.0</span><br><span class="line">16996     -124.3         ...                     79000.0</span><br><span class="line">16997     -124.3         ...                    103600.0</span><br><span class="line">16998     -124.3         ...                     85800.0</span><br><span class="line">16999     -124.3         ...                     94600.0</span><br><span class="line"></span><br><span class="line">[17000 rows x 9 columns]</span><br></pre></td></tr></table></figure>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><ul>
<li>随机化处理。以保证不会出现病态的排序结果（防止损害梯度下降算法的效果）</li>
<li>将 <code>median_house_value</code> 调整为以千为单位</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">house_data = house_data.reindex(</span><br><span class="line">    np.random.permutation(california_housing_dataframe.index)</span><br><span class="line">)</span><br><span class="line">house_data[<span class="string">"median_house_value"</span>] /= <span class="number">1000.0</span></span><br><span class="line"></span><br><span class="line">print(house_data)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">longitude</th>
<th style="text-align:center">latitude</th>
<th style="text-align:center">housing_median_age</th>
<th style="text-align:center">total_rooms</th>
<th style="text-align:center">total_bedrooms</th>
<th style="text-align:center">population</th>
<th style="text-align:center">households</th>
<th style="text-align:center">median_income</th>
<th style="text-align:center">median_house_value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:center">-117.0</td>
<td style="text-align:center">32.8</td>
<td style="text-align:center">12.0</td>
<td style="text-align:center">5535.0</td>
<td style="text-align:center">1434.0</td>
<td style="text-align:center">3112.0</td>
<td style="text-align:center">1262.0</td>
<td style="text-align:center">2.6</td>
<td style="text-align:center">108.3</td>
</tr>
<tr>
<td style="text-align:center">14423</td>
<td style="text-align:center">-122.1</td>
<td style="text-align:center">37.4</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">1617.0</td>
<td style="text-align:center">231.0</td>
<td style="text-align:center">555.0</td>
<td style="text-align:center">222.0</td>
<td style="text-align:center">8.9</td>
<td style="text-align:center">500.0</td>
</tr>
<tr>
<td style="text-align:center">2320</td>
<td style="text-align:center">-117.5</td>
<td style="text-align:center">34.0</td>
<td style="text-align:center">3.0</td>
<td style="text-align:center">12870.0</td>
<td style="text-align:center">2315.0</td>
<td style="text-align:center">5820.0</td>
<td style="text-align:center">1759.0</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">147.3</td>
</tr>
<tr>
<td style="text-align:center">1420</td>
<td style="text-align:center">-117.2</td>
<td style="text-align:center">32.8</td>
<td style="text-align:center">23.0</td>
<td style="text-align:center">1215.0</td>
<td style="text-align:center">225.0</td>
<td style="text-align:center">592.0</td>
<td style="text-align:center">224.0</td>
<td style="text-align:center">3.4</td>
<td style="text-align:center">200.6</td>
</tr>
<tr>
<td style="text-align:center">14724</td>
<td style="text-align:center">-122.2</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">52.0</td>
<td style="text-align:center">2198.0</td>
<td style="text-align:center">397.0</td>
<td style="text-align:center">984.0</td>
<td style="text-align:center">369.0</td>
<td style="text-align:center">3.2</td>
<td style="text-align:center">156.5</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">3201</td>
<td style="text-align:center">-117.8</td>
<td style="text-align:center">33.9</td>
<td style="text-align:center">25.0</td>
<td style="text-align:center">1548.0</td>
<td style="text-align:center">256.0</td>
<td style="text-align:center">811.0</td>
<td style="text-align:center">263.0</td>
<td style="text-align:center">5.2</td>
<td style="text-align:center">242.2</td>
</tr>
<tr>
<td style="text-align:center">9159</td>
<td style="text-align:center">-119.0</td>
<td style="text-align:center">35.4</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">1705.0</td>
<td style="text-align:center">418.0</td>
<td style="text-align:center">905.0</td>
<td style="text-align:center">393.0</td>
<td style="text-align:center">1.6</td>
<td style="text-align:center">54.6</td>
</tr>
<tr>
<td style="text-align:center">12103</td>
<td style="text-align:center">-121.4</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">1912.0</td>
<td style="text-align:center">451.0</td>
<td style="text-align:center">1065.0</td>
<td style="text-align:center">388.0</td>
<td style="text-align:center">2.1</td>
<td style="text-align:center">125.0</td>
</tr>
<tr>
<td style="text-align:center">14972</td>
<td style="text-align:center">-122.2</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">41.0</td>
<td style="text-align:center">2576.0</td>
<td style="text-align:center">406.0</td>
<td style="text-align:center">794.0</td>
<td style="text-align:center">376.0</td>
<td style="text-align:center">6.0</td>
<td style="text-align:center">366.1</td>
</tr>
<tr>
<td style="text-align:center">15500</td>
<td style="text-align:center">-122.3</td>
<td style="text-align:center">37.9</td>
<td style="text-align:center">29.0</td>
<td style="text-align:center">2304.0</td>
<td style="text-align:center">399.0</td>
<td style="text-align:center">1377.0</td>
<td style="text-align:center">454.0</td>
<td style="text-align:center">5.0</td>
<td style="text-align:center">140.6</td>
</tr>
</tbody>
</table>
<p>17000 rows × 9 columns</p>
<h4 id="检查数据"><a href="#检查数据" class="headerlink" title="检查数据"></a>检查数据</h4><p>dataframe 数据的 <code>describe()</code> 方法能方便地显示出数据的快速摘要：样本数、均值、标准偏差、最大值、最小值和各种分位数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">house_data.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">longitude</th>
<th style="text-align:center">latitude</th>
<th style="text-align:center">housing_median_age</th>
<th style="text-align:center">total_rooms</th>
<th style="text-align:center">total_bedrooms</th>
<th style="text-align:center">population</th>
<th style="text-align:center">households</th>
<th style="text-align:center">median_income</th>
<th style="text-align:center">median_house_value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">-119.6</td>
<td style="text-align:center">35.6</td>
<td style="text-align:center">28.6</td>
<td style="text-align:center">2643.7</td>
<td style="text-align:center">539.4</td>
<td style="text-align:center">1429.6</td>
<td style="text-align:center">501.2</td>
<td style="text-align:center">3.9</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">2.0</td>
<td style="text-align:center">2.1</td>
<td style="text-align:center">12.6</td>
<td style="text-align:center">2179.9</td>
<td style="text-align:center">421.5</td>
<td style="text-align:center">1147.9</td>
<td style="text-align:center">384.5</td>
<td style="text-align:center">1.9</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">-124.3</td>
<td style="text-align:center">32.5</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">2.0</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">3.0</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">0.5</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">-121.8</td>
<td style="text-align:center">33.9</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">1462.0</td>
<td style="text-align:center">297.0</td>
<td style="text-align:center">790.0</td>
<td style="text-align:center">282.0</td>
<td style="text-align:center">2.6</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">-118.5</td>
<td style="text-align:center">34.2</td>
<td style="text-align:center">29.0</td>
<td style="text-align:center">2127.0</td>
<td style="text-align:center">434.0</td>
<td style="text-align:center">1167.0</td>
<td style="text-align:center">409.0</td>
<td style="text-align:center">3.5</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">-118.0</td>
<td style="text-align:center">37.7</td>
<td style="text-align:center">37.0</td>
<td style="text-align:center">3151.2</td>
<td style="text-align:center">648.2</td>
<td style="text-align:center">1721.0</td>
<td style="text-align:center">605.2</td>
<td style="text-align:center">4.8</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">-114.3</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">52.0</td>
<td style="text-align:center">37937.0</td>
<td style="text-align:center">6445.0</td>
<td style="text-align:center">35682.0</td>
<td style="text-align:center">6082.0</td>
<td style="text-align:center">15.0</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<h4 id="构建第一个模型"><a href="#构建第一个模型" class="headerlink" title="构建第一个模型"></a>构建第一个模型</h4><p>在这个基础练习中，我们以 <code>median_house_value</code> 为标签（也称为目标），使用 <code>total_rooms</code> 作为输入特征。</p>
<p><strong>注意：</strong> 因为我们使用的城市街区的数据，所以 <code>total_rooms</code> 表示的是该街区的所有房间数，而不是单间房屋的房间数（想想这数据也不是 :)）。</p>
<p>为了训练模型，我们将使用 TensorFlow <a href="https://www.tensorflow.org/get_started/estimator" target="_blank" rel="noopener">Estimator</a> API 提供的 <a href="https://www.tensorflow.org/get_started/estimator" target="_blank" rel="noopener">LinearRegressor</a> 接口。此 API 负责处理大量低级别的模型搭建工作，并会提供执行模型训练、评估和推理的便捷方法。</p>
<h5 id="第一步：定义特征并配置特征列"><a href="#第一步：定义特征并配置特征列" class="headerlink" title="第一步：定义特征并配置特征列"></a>第一步：定义特征并配置特征列</h5><p>特征字段主要有两种数据类型：</p>
<ul>
<li>分类数据：一种文字数据，本基础练习不含这种数据，但可能会在看到类似包括家居风格以及房地产广告词这类数据。</li>
<li>数值数据：一种数字数据（整数或浮点数）以及你希望视为数字的数据，但有时可能也会把例如邮编这种数据也是为分类数据来做处理（在稍后的进行详细说明）。</li>
</ul>
<p>现在我们的数据还是 pandas 的 <code>DataFrame</code> 数据格式，我们得让 TensorFlow 读懂这些数据。</p>
<p>首先，我们需要指定每个特征包含的数据类型（以上两种类型），然后我们使用一种称为“特征列”的结构来表示特征的数据类型。</p>
<p><strong>注意：</strong> 特征列仅仅存储对特征数据的描述，和特征数据本身没关系。</p>
<p>现在，我们使用上面所说的 <code>total_rooms</code> 作为数值输入特征。以下代码会从 <code>house_data</code> 中提取 <code>total_rooms</code> 数据，并使用 <code>numeric_column</code> 定义特征列，这样会将其数据指定为数值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到输入特征：total_rooms</span></span><br><span class="line">my_feature = house_data[[<span class="string">'total_rooms'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 total_rooms 配置为数值特征列</span></span><br><span class="line">feature_colums = [tf.feature_column.numeric_column(<span class="string">'total_rooms'</span>)]</span><br><span class="line"></span><br><span class="line">print(my_feature)</span><br><span class="line">print(feature_columns)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">total_rooms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8899</td>
<td style="text-align:center">8803.0</td>
</tr>
<tr>
<td style="text-align:center">682</td>
<td style="text-align:center">3967.0</td>
</tr>
<tr>
<td style="text-align:center">13332</td>
<td style="text-align:center">3735.0</td>
</tr>
<tr>
<td style="text-align:center">9720</td>
<td style="text-align:center">2242.0</td>
</tr>
<tr>
<td style="text-align:center">14046</td>
<td style="text-align:center">4125.0</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">6328</td>
<td style="text-align:center">1476.0</td>
</tr>
<tr>
<td style="text-align:center">2329</td>
<td style="text-align:center">1379.0</td>
</tr>
<tr>
<td style="text-align:center">14272</td>
<td style="text-align:center">1382.0</td>
</tr>
<tr>
<td style="text-align:center">4124</td>
<td style="text-align:center">3443.0</td>
</tr>
<tr>
<td style="text-align:center">5124</td>
<td style="text-align:center">718.0</td>
</tr>
</tbody>
</table>
<p>[17000 rows x 1 columns]</p>
<p>[_NumericColumn(key=’total_rooms’, shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]</p>
<h5 id="第二部：定义标签-目标"><a href="#第二部：定义标签-目标" class="headerlink" title="第二部：定义标签 / 目标"></a>第二部：定义标签 / 目标</h5><p>接下来，我们把 <code>median_house_value</code> 定义为我们的目标。同样，先从 <code>house_data</code> 中提取它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targets = housse_data[<span class="string">"median_house_value"</span>]</span><br></pre></td></tr></table></figure>
<h5 id="第三部：配置-LinearRegressor"><a href="#第三部：配置-LinearRegressor" class="headerlink" title="第三部：配置 LinearRegressor"></a>第三部：配置 LinearRegressor</h5><p>接下来我们使用 LinearRegressor 配置线性回归模型，并使用 GradientDescentOptimizer（它会实现小批量随机梯度下降法（SGD）） 训练该模型。</p>
<p><code>learning_rate</code> 参数可控制梯度步长的大小。</p>
<p><strong>注意：</strong> 为了安全起见，我们会通过 <code>clip_gradients_by_norm</code> 将<a href="https://developers.google.com/machine-learning/glossary/#gradient_clipping" target="_blank" rel="noopener">梯度裁剪</a>应用到我们的优化器。梯度裁剪能确保梯度大小在训练期间不会变得过大，梯度过大会导致梯度下降法失败。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用梯度下降法作为模型训练的优化器，并应用梯度裁剪</span></span><br><span class="line"><span class="comment"># 将梯度下降的学习速率设置为 0.0000001</span></span><br><span class="line">my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.0000001</span>)</span><br><span class="line">my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特征列和优化器应用到我们的线性回归模型上</span></span><br><span class="line">linear_regressor = tf.estimator.LinearRegressor(</span><br><span class="line">    feature_column=feature_colums, optimizer=my_optimizer</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h5 id="第四步：定义输入函数"><a href="#第四步：定义输入函数" class="headerlink" title="第四步：定义输入函数"></a>第四步：定义输入函数</h5><p>要把数据导入 LinearRegressor，我们需要定义一个输入函数，得让 TensorFlow 知道怎么对数据进行预处理，以及在模型训练期间如何进行批处理、随机处理、重复数据。</p>
<p>首先，我们需要把 pandas 数据转换成 Numpy 数组字典。然后，我们就能使用 TensorFlow 的 <a href="https://www.tensorflow.org/programmers_guide/datasets" target="_blank" rel="noopener">Dataset API</a> 根据我们的数据构建 Dataset 对象，并将数据拆分成大小为 batch_size 的多批数据，以按照指定周期数（num_epochs）进行重复。</p>
<p><strong>注意：</strong> 如果 num_epochs=None，那么输入的数据会无限期重复。</p>
<p>然后，如果 <code>shuffle</code> 设置为 True，那么我们就会对数据进行随机处理，以便在训练期间以随机方式传递到模型。<code>buffer_size</code> 参数会指定 shuffle 将从随机抽样的数据集的大小。</p>
<p>最后，输入函数会为该数据集构建一个迭代器，并向 LinearRegressor 返回下一批数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input_fn</span><span class="params">(features, targets, batch_size=<span class="number">1</span>, shuffle=True, num_epochs=None)</span>:</span></span><br><span class="line">    <span class="comment"># 将 pandas 特征数据转换成 Numpy 数组字段</span></span><br><span class="line">    <span class="comment"># features: DataFrame -&gt; Dict(&#123;column_name: column_data(Series)&#125;) -&gt; np.array</span></span><br><span class="line">    <span class="comment"># 这里数据类型的转化：输入之前拿到的那列 DataFrame，最后获取那列数据的一个 np.array 类数组对象</span></span><br><span class="line">    features = &#123; key: np.array(value) <span class="keyword">for</span> key, value <span class="keyword">in</span> dict(features).items() &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建 Dataset 对象，并将数据拆分成大小为 batch_size 的多批数据，以 num_epochs 周期重复</span></span><br><span class="line">    <span class="comment"># 每个步长都会跑 batch_size 批的数据</span></span><br><span class="line">    ds = Dataset.from_tensor_slices((features, targets))  <span class="comment"># 上限 2 GB</span></span><br><span class="line">    ds = ds.batch(batch_size).repeat(num_epochs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机化数据（一共 17k 条数据，每次随机取 10k 条）</span></span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        ds = ds.shuffle(buffer_size=<span class="number">10000</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回下一个 batch 的数据</span></span><br><span class="line">    features, labels = ds.make_one_shot_iterator().get_next()</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br></pre></td></tr></table></figure>
<p>输入函数的初步解释已经写在函数定义中了，更详细的文档参阅 <a href="https://www.tensorflow.org/programmers_guide/datasets" target="_blank" rel="noopener">TensorFlow 编程人员指南</a>。</p>
<h5 id="第五步：训练模型"><a href="#第五步：训练模型" class="headerlink" title="第五步：训练模型"></a>第五步：训练模型</h5><p>现在，我们可以使用 <code>train()</code> 来训练我们的模型。我们将 <code>my_input_fn</code> 封装在 lambda 中，这样我们就可以把 <code>my_features</code> 和 <code>targets</code> 最为参数传入（更过详阅 <a href="https://www.tensorflow.org/get_started/input_fn#passing_input_fn_data_to_your_model" target="_blank" rel="noopener">TensorFlow 输入函数教程</a>）。</p>
<p>首先，我们先训练 100 个步长。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ = linear_regressor.train(</span><br><span class="line">    input_fn=<span class="keyword">lambda</span>: my_input_fn(my_feature, targets),</span><br><span class="line">    steps=<span class="number">100</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h5 id="第六步：评估模型"><a href="#第六步：评估模型" class="headerlink" title="第六步：评估模型"></a>第六步：评估模型</h5><p>经过上面的训练之后，我们现在来做一次预测，看看模型与这些数据的拟合情况。</p>
<p><strong>注意：</strong> 训练误差衡量的是你的模型与训练数据的拟合情况，不能衡量模型<strong>泛化到新数据</strong>上的效果。如果评估模型的泛化能力在后面探索。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为预测创建一个输入函数</span></span><br><span class="line"><span class="comment"># 因为我们就做一次预测，就没必要重复打乱数据了</span></span><br><span class="line">prediction_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature, target, num_epochs=<span class="number">1</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用模型的 predict() 函数进行预测</span></span><br><span class="line">predictions = linear_regressor.predict(input_fn=prediction_input_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将预测数据格式化成 Numpy 的数组类型，方便检查</span></span><br><span class="line">predictions = np.arrary([item[<span class="string">'predictions'</span>][<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> predictions])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出均方误差和均方根误差</span></span><br><span class="line">mean_squared_error = metrics.mean_squared_error(predictions, targets)</span><br><span class="line">root_mean_squared_error = math.sqrt(mean_squared_error)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Mean Squared Error (on training data): %0.3f"</span> % mean_squared_error)</span><br><span class="line">print(<span class="string">"Root Mean Squared Error (on training data): %0.3f"</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mean Squared Error (on training data): 56367.025</span><br><span class="line">Root Mean Squared Error (on training data): 237.417</span><br></pre></td></tr></table></figure>
<p>均方差和均方根误差都已经算出来了，但是我们该怎么去评估这个误差是否能被接受呢？</p>
<p>均方根误差（RMSE）是一个很好的特征，它可以在与原目标相同的规模下解读。</p>
<p>我们来比较下 RMSE 与目标最大值和最小值的差值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">min_house_value = house_data[<span class="string">'median_house_value'</span>].min()</span><br><span class="line">max_house_value = house_data[<span class="string">'median_house_value'</span>].max()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Min. median house value: %0.3f'</span> % min_house_value)</span><br><span class="line">print(<span class="string">'Max. median house value: %0.3f'</span> % max_house_value)</span><br><span class="line">print(<span class="string">'Difference between Min. and Max.: %0.3f'</span> % (max_house_value - min_house_value))</span><br><span class="line">print(<span class="string">'Root Mean Squared Error: %0.3f'</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Min. Median House value: 14.999</span><br><span class="line">Max. Median House value: 500.001</span><br><span class="line">Difference between Min. and Max.: 485.002</span><br><span class="line">Root Mean Squared Error: 237.417</span><br></pre></td></tr></table></figure>
<p>通过上面的计算，我们的误差跨越了目标值的一半。这意味着我们的误差很大吗？</p>
<p>那我们有什么办法来缩小这个误差吗？</p>
<p>首先，我们可以了解下根据总体摘要统计信息，预测和目标的符合情况。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calibration_data = pd.DataFrame()</span><br><span class="line">calibration_data[<span class="string">'predictions'</span>] = pd.Series(predictions)</span><br><span class="line">calibration_data[<span class="string">'targets'</span>] = pd.Series(targets)</span><br><span class="line">calibration_data.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.0</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">0.2</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">1.9</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p>以上的这些参数指标，对我们评价模型的预测值有什么意义吗？</p>
<p>也许可以比较下平均值和模型的 RMSE？各种分位数和 RMSE？</p>
<p>我相信不管和哪个指标比较，我们现在的预测值都是一坨屎！</p>
<p>为了更直观的显示我们的预测有多狗屎，我们先从这个数据集拿一部分均匀分布的随机数据样本（全部绘制出来太乱了，看不清），绘制散点图。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample = house_data.sample(n=<span class="number">300</span>)</span><br></pre></td></tr></table></figure>
<p>然后，我们根据模型的偏差项和特征权重绘制学到的线，并绘制散点图。改线以红色显示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 total_rooms 数据的最大最小值</span></span><br><span class="line">x_0 = sample[<span class="string">'total_rooms'</span>].min()</span><br><span class="line">x_1 = sample[<span class="string">'total_rooms'</span>].max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取在模型最终训练后的权重与偏差</span></span><br><span class="line">weight = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/total_rooms/weights'</span>)[<span class="number">0</span>]</span><br><span class="line">bias = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/bias_weights'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过获取的预测权重与偏差计算出 median_house_value 预测的最大最小值</span></span><br><span class="line">y_0 = weight * x_0 + bias</span><br><span class="line">y_1 = weight * x_1 + bias</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出我们的预测线性回归线 (x_0, y_0) (x_1, y_1) | c='r' 是 color='red' 的意思 :)</span></span><br><span class="line">plt.plot([x_0, x_1], [y_0, y_1], c=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上坐标描述</span></span><br><span class="line">plt.xlabel(<span class="string">'total_rooms'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'median_house_value'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把我们的样本点一个个“点上去”</span></span><br><span class="line">plt.sactter(sample[<span class="string">'total_rooms'</span>], sample[<span class="string">'median_house_value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把图画出来</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/14_25_47__07_27_2018.jpg" alt="散点图"></p>
<p>哈哈哈，是不是很直观地就发现我们的预测就是一坨屎。</p>
<h4 id="调整模型超参数"><a href="#调整模型超参数" class="headerlink" title="调整模型超参数"></a>调整模型超参数</h4><p>为了方便起见，我们把上面几个步骤合并在一个函数里面，然后把要调整的参数暴露出来，这样就能很容易的测试各种不同参数所模拟的效果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(learning_rate, steps, batch_size, input_feature=<span class="string">'total_rooms'</span>)</span>:</span></span><br><span class="line">    periods = <span class="number">10</span></span><br><span class="line">    steps_per_period = steps / periods</span><br><span class="line">    </span><br><span class="line">    my_feature = input_feature</span><br><span class="line">    my_feature_data = house_data[[my_feature]]</span><br><span class="line">    </span><br><span class="line">    my_target = <span class="string">'median_house_value'</span></span><br><span class="line">    targets = house_data[my_target]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建特征列</span></span><br><span class="line">    feature_columns = [tf.feature_column.numeric_column(my_feature)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建输入函数</span></span><br><span class="line">    training_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature_data, targets, batch_size=batch_size)</span><br><span class="line">    prediction_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature_data, targets, num_epochs=<span class="number">1</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建线性回归模型</span></span><br><span class="line">    my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)</span><br><span class="line">    my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="number">5.0</span>)</span><br><span class="line">    linear_regressor = tf.estimator.LinearRegressor(</span><br><span class="line">        feature_columns=feature_columns,</span><br><span class="line">        optimizer=my_optimizer</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot 基本配置</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))  <span class="comment"># 每个网格 15 X 6 大小</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 当前操作一行两列的第一个图表</span></span><br><span class="line">    plt.title(<span class="string">'Learned Line by Period'</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    plt.xlabel(my_feature)  <span class="comment"># 设置横坐标名</span></span><br><span class="line">    plt.ylabel(my_label)  <span class="comment"># 设置纵坐标名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取绘制样本</span></span><br><span class="line">    sample = house_data.sample(n=<span class="number">300</span>)</span><br><span class="line">    plt.scatter(sample[my_feature], sample[my_lable])</span><br><span class="line">    colors = [cm.coolwarm(x) <span class="keyword">for</span> x <span class="keyword">in</span> np.linspace(<span class="number">-1</span>, <span class="number">1</span>, periods)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型，每个周期评估下误差损失</span></span><br><span class="line">    print(<span class="string">'Training model...'</span>)</span><br><span class="line">    print(<span class="string">'RMSE (on training data): '</span>)</span><br><span class="line">    root_mean_squared_errors = []</span><br><span class="line">    <span class="keyword">for</span> period <span class="keyword">in</span> range(<span class="number">0</span>, periods):</span><br><span class="line">        linear_regressor.train(</span><br><span class="line">            input_fn=training_input_fn,</span><br><span class="line">            steps=steps_per_period</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每个周期训练完之后计算一下损失</span></span><br><span class="line">        predictions = linear_regressor.predict(input_fn=prediction_input_fn)</span><br><span class="line">        perdictions = np.array([item[<span class="string">'predictions'</span>][<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> predictions])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        root_mean_squared_error = math.sqrt(</span><br><span class="line">            metrics.mean_squared_error(predictions, targets)</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出当前损失</span></span><br><span class="line">        print(<span class="string">'period %02d : %0.2f'</span> % (period, root_mean_squared_error))</span><br><span class="line">        <span class="comment"># 将当前损失加到记录损失的列表中</span></span><br><span class="line">        root_mean_squared_errors.append(root_mean_squared_error)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 为了画出来的效果，适当调整下横纵坐标的大小</span></span><br><span class="line">        y_extents = np.array([<span class="number">0</span>, sample[my_label].max()])</span><br><span class="line">        </span><br><span class="line">        weight = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/%s/weights'</span> % input_feature)[<span class="number">0</span>]</span><br><span class="line">        bias = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/bias_weights'</span>)</span><br><span class="line">        </span><br><span class="line">        x_extents = (y_extents - bias) / weight</span><br><span class="line">        x_extents = np.maximum(</span><br><span class="line">            np.minimum(x_extents, sample[my_feature].max()),</span><br><span class="line">            sample[my_feature].min()</span><br><span class="line">        )</span><br><span class="line">        y_extents = weight * x_extents + bias</span><br><span class="line">        plt.plot(x_extents, y_extents, color=colors[period])</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'Model training finished.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 现在把每个周期的损失画出来</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Periods'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'RMSE'</span>)</span><br><span class="line">    plt.title(<span class="string">'Root Mean Squared Error vs. Periods'</span>)</span><br><span class="line">    plt.tight_layout()  <span class="comment"># 自动调整子图的布局和坐标刻度的大小</span></span><br><span class="line">    plt.plot(root_mean_squared_errors)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将最终的预测值和目标值放在一张表里展示</span></span><br><span class="line">    calibration_data = pd.DataFrame()</span><br><span class="line">    calibration_data[<span class="string">"predictions"</span>] = pd.Series(predictions)</span><br><span class="line">    calibration_data[<span class="string">"targets"</span>] = pd.Series(targets)</span><br><span class="line">    display.display(calibration_data.describe())</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Final RMSE (on training data): %0.2f"</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<p>最后我们直接调用这个函数就可以方便地测试各种参数搭配的 RMSE 的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_model(</span><br><span class="line">    learning_rate=<span class="number">0.00002</span>,</span><br><span class="line">    steps=<span class="number">500</span>,</span><br><span class="line">    batch_size=<span class="number">5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Training model...</span><br><span class="line">RMSE (on training data):</span><br><span class="line">  period 00 : 225.63</span><br><span class="line">  period 01 : 214.42</span><br><span class="line">  period 02 : 204.44</span><br><span class="line">  period 03 : 194.97</span><br><span class="line">  period 04 : 187.23</span><br><span class="line">  period 05 : 180.53</span><br><span class="line">  period 06 : 175.00</span><br><span class="line">  period 07 : 171.07</span><br><span class="line">  period 08 : 169.21</span><br><span class="line">  period 09 : 167.37</span><br><span class="line">Model training finished.</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">116.3</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">95.9</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">64.3</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">93.6</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">138.7</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">1669.2</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/17_18_02__07_27_2018.jpg" alt="模拟结果"></p>
<p>当然，我们还可以试试其他参数作为我们的特征值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_model(</span><br><span class="line">    learning_rate=<span class="number">0.00002</span>,</span><br><span class="line">    steps=<span class="number">1000</span>,</span><br><span class="line">    batch_size=<span class="number">5</span>,</span><br><span class="line">    input_feature=<span class="string">"population"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Training model...</span><br><span class="line">RMSE (on training data):</span><br><span class="line">  period 00 : 225.63</span><br><span class="line">  period 01 : 214.62</span><br><span class="line">  period 02 : 204.67</span><br><span class="line">  period 03 : 196.42</span><br><span class="line">  period 04 : 189.12</span><br><span class="line">  period 05 : 183.91</span><br><span class="line">  period 06 : 180.03</span><br><span class="line">  period 07 : 177.64</span><br><span class="line">  period 08 : 176.45</span><br><span class="line">  period 09 : 175.95</span><br><span class="line">Model training finished.</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">121.8</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">97.8</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.3</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">67.3</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">99.4</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">146.6</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">3040.1</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/17_41_30__07_27_2018.jpg" alt="模拟结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习基本的 TensorFlow 概念&lt;/li&gt;
&lt;li&gt;在 TensorFlow 中使用 LinearRegressor 类并基于单个输入特征预测各城市街区的房屋价值中位数&lt;/li&gt;
&lt;li&gt;使用均方根误差 (RMSE) 评估模型预测的准确率&lt;/li&gt;
&lt;li&gt;通过调整模型的超参数提高模型准确率&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解Python元类</title>
    <link href="https://yuanblq.github.io/2018/05/31/%E7%90%86%E8%A7%A3Python%E5%85%83%E7%B1%BB/"/>
    <id>https://yuanblq.github.io/2018/05/31/理解Python元类/</id>
    <published>2018-05-31T08:11:12.000Z</published>
    <updated>2018-05-31T08:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>想要理解 Python 中的元类只要记住：一切皆对象。记住这 5 个字，理解元类就会轻松很多。</p>
<a id="more"></a>
<h3 id="先创建一个自定义对象瞧瞧"><a href="#先创建一个自定义对象瞧瞧" class="headerlink" title="先创建一个自定义对象瞧瞧"></a>先创建一个自定义对象瞧瞧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_obj = MyClass()</span><br><span class="line"></span><br><span class="line">my_obj</span><br></pre></td></tr></table></figure>
<pre><code>&lt;__main__.MyClass at 0x10907aa20&gt;
</code></pre><p>我们，很容易就获得了一个自定义的对象。那在这期间都发生了些什么呢？</p>
<p><code>my_obj = MyClass()</code> 这段代码运行的时候，我们都知道这是在实例化一个类来获取这个类的对象，实例化期间会去走 <code>MyClass</code> 类中的 <code>__init__()</code> 方法。</p>
<p>当然，我们都知道在走 <code>__init__()</code> 方法之前还会先去走 <code>MyClass</code> 类的 <code>__new__()</code> 方法，通过 <code>__new__()</code> 方法来创建类的实例。Python 最常见的单例就是通过 <code>__new__()</code> 方法实现的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">"in MyClass __new__ method"</span>)</span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"create a new instance"</span>)</span><br><span class="line">            cls.__instance = super(MyClass, cls).__new__(cls, *args)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">c1 = MyClass()</span><br><span class="line">c2 = MyClass()</span><br><span class="line">c1, c2</span><br></pre></td></tr></table></figure>
<pre><code>in MyClass __new__ method
create a new instance
in MyClass __new__ method





(&lt;__main__.MyClass at 0x1090a1f60&gt;, &lt;__main__.MyClass at 0x1090a1f60&gt;)
</code></pre><p>实际上通过这个单例模式可以了解到，其实真正创建对象的方法是 <code>__new__()</code>，而 <code>__init__()</code> 方法只是给已经创建出来的对象赋予属性等操作。</p>
<h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>在 Python 中，函数可以是个对象，类也可以是个对象。既然类是个对象，那就应该拥有对象所拥有的特性：</p>
<ul>
<li>可以传递给其他变量</li>
<li>可以拷贝它</li>
<li>可以动态地给它增加属性</li>
<li>可以作为参数传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mc = MyClass</span><br><span class="line">mc.new_attr = <span class="string">'Hello'</span></span><br><span class="line">mc, mc.new_attr</span><br></pre></td></tr></table></figure>
<pre><code>(__main__.MyClass, &apos;Hello&apos;)
</code></pre><h3 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h3><p>既然类也是对象，那我们就可以动态的创建一个类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dynamic_class</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'Class_1'</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Class_1</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Class_1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> OtherClass</span><br><span class="line"></span><br><span class="line">d1 = create_dynamic_class(<span class="string">'Class_1'</span>)</span><br><span class="line">d2 = create_dynamic_class(<span class="string">'Class_2'</span>)</span><br><span class="line"></span><br><span class="line">d1, d2</span><br></pre></td></tr></table></figure>
<pre><code>(__main__.create_dynamic_class.&lt;locals&gt;.Class_1,
 __main__.create_dynamic_class.&lt;locals&gt;.OtherClass)
</code></pre><p>但是上面的类创建地还不够“动态”，熟悉 Python 应该知道，这时候就要上 <code>type</code> 了。</p>
<p>使用 <code>type</code> 可以这样创建类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TClass = type(<span class="string">'TClass'</span>, (), &#123;&#125;)</span><br><span class="line">tc = TClass()</span><br><span class="line">tc, type(tc)</span><br></pre></td></tr></table></figure>
<pre><code>(&lt;__main__.TClass at 0x10907a470&gt;, __main__.TClass)
</code></pre><p><code>type()</code> 传递三个参数：类名、父类们、属性。</p>
<p><code>TClass = type(&#39;TClass&#39;, (), {})</code> 这个形式有没有觉得很熟悉，像不像通过类来创建对象这个形式 <code>obj = SomeClass()</code>。实际上 <code>type</code> 算是一个类，只不过小写的形式有点迷惑性，不过想想 <code>str</code>、<code>int</code>、<code>dict</code>、<code>list</code>、<code>set</code> 不都是小写的吗。</p>
<p>这样一来，其实所有对象都是 <code>type</code> 的子类？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(int, type), isinstance(str, type), isinstance(dict, type), isinstance(MyClass, type)</span><br></pre></td></tr></table></figure>
<pre><code>(True, True, True, True)
</code></pre><p>果然就是这个样子！</p>
<h3 id="定义类的创建过程"><a href="#定义类的创建过程" class="headerlink" title="定义类的创建过程"></a>定义类的创建过程</h3><p>通过上面单例的示例代码可知，通过 <code>__new__()</code> 方法可以控制对象的创建过程。</p>
<p>而元类就是利用这一特性！控制类的创建过程。</p>
<p>所有的类，默认情况下都是由 <code>type</code> 控制创建的，我们想自定义类的创建过程当然是修改父类 <code>type</code> 的属性。正常情况就是继承 <code>type</code> 创建自已的 “<code>type</code> 类”然后让我们的类继承我们的 “<code>type</code> 类”：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">'got MyMetaClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'DeniedClass'</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError</span><br><span class="line">        <span class="keyword">return</span> super(MyMetaClass, cls).__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OKClass</span><span class="params">(metaclass=MyMetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">'got OKClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(OKClass, cls).__new__(cls, *args)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'got OKClass __init__()'</span>)</span><br><span class="line"></span><br><span class="line">ok_class = OKClass()</span><br><span class="line">ok_class</span><br></pre></td></tr></table></figure>
<pre><code>got MyMetaClass __new__()
got OKClass __new__()
got OKClass __init__()





&lt;__main__.OKClass at 0x1090cc5f8&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeniedClass</span><span class="params">(metaclass=MyMetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">'got DeniedClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(DeniedClass, cls).__new__(cls, *args)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'got DeniedClass __init__()'</span>)</span><br><span class="line"></span><br><span class="line">denied_class = DeniedClass()</span><br><span class="line">denied_class</span><br></pre></td></tr></table></figure>
<pre><code>got MyMetaClass __new__()



---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-9-913341894ab1&gt; in &lt;module&gt;()
----&gt; 1 class DeniedClass(metaclass=MyMetaClass):
      2     def __new__(cls, *args):
      3         print(&apos;got DeniedClass __new__()&apos;)
      4         return super(DeniedClass, cls).__new__(cls, *args)
      5 


&lt;ipython-input-7-266bb1820d0c&gt; in __new__(cls, name, bases, attrs)
      3         print(&apos;got MyMetaClass __new__()&apos;)
      4         if name == &apos;DeniedClass&apos;:
----&gt; 5             raise RuntimeError
      6         return super(MyMetaClass, cls).__new__(cls, name, bases, attrs)


RuntimeError: 
</code></pre><p>从上面两个类实例的创建例子可见，<strong>实例化一个类对象的时候会先通过该类继承的元类创建出该类的类对象，然后通过该类的类对象创建出该类的对象。</strong></p>
<p>这句话很绕，其实很简单，就是从上往下不断地创建对象（元类 –&gt; 类 –&gt; 实例对象）。</p>
<h3 id="元类应用"><a href="#元类应用" class="headerlink" title="元类应用"></a>元类应用</h3><p>大家最熟悉的一个元类应用就是 <code>Django</code> 的 <code>ORM</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line">p  = Person(name=<span class="string">'bob'</span>, age=<span class="number">35</span>)</span><br><span class="line">print(p.age)</span><br></pre></td></tr></table></figure>
<p>最终输出 <code>p.age</code> 为 <code>35</code> 而不是 <code>models.IntegerField()</code>，这是因为 <code>models.Model</code> 实现的自定义元类对数据库做了一系列 hook，最后暴露给我们这些简单的 API。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000#0" target="_blank" rel="noopener">使用元类</a></li>
<li><a href="http://www.dongwm.com/archives/%E8%AF%A6%E8%A7%A3Python/" target="_blank" rel="noopener">详解Python元类</a></li>
<li><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="noopener">What are metaclasses in Python?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要理解 Python 中的元类只要记住：一切皆对象。记住这 5 个字，理解元类就会轻松很多。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django+uWSGI+Nginx部署</title>
    <link href="https://yuanblq.github.io/2018/04/04/Django-uWSGI-Nginx%E9%83%A8%E7%BD%B2/"/>
    <id>https://yuanblq.github.io/2018/04/04/Django-uWSGI-Nginx部署/</id>
    <published>2018-04-04T08:16:00.000Z</published>
    <updated>2018-04-04T08:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在玩微信小程序，但是测试的时候想和 Django 后端通信时出现了问题。</p>
<p>微信小程序的服务器域名配置文档中写到：</p>
<blockquote>
<p>服务器域名请在 小程序后台-设置-开发设置-服务器域名 中进行配置，配置时需要注意：  </p>
<ul>
<li>域名只支持 https (request、uploadFile、downloadFile) 和 wss (connectSocket) 协议；  </li>
<li>域名不能使用 IP 地址或 localhost，且不能带端口号；</li>
</ul>
</blockquote>
<p>这就尴尬了，所以可以采用 Nginx “隐藏”端口号，并搭建本地 https。</p>
<a id="more"></a>
<h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>如果 <code>pip install uwsgi</code> 失败，很可能是没有安装 Python 的开发环境包，如果是 Debian 类型的系统直接 <code>apt-get install pythonX.Y-dev</code> 即可。</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>随便在哪里创建一个 <code>test.py</code> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b"Hello World"</span>] <span class="comment"># python3</span></span><br><span class="line">    <span class="comment">#return ["Hello World"] # python2</span></span><br></pre></td></tr></table></figure></p>
<p>然后再该文件所在位置执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure></p>
<p>这样，在浏览器输入 <code>yourdomain.com:8000</code> 即可看见写有 <code>Hello World</code> 的页面了。</p>
<ul>
<li><code>--http :8000</code> 表示使用 <code>http</code> 协议，端口号 <code>8000</code></li>
<li><code>wsgi-file test.py</code> 表示载入指定的 <code>test.py</code> 文件</li>
</ul>
<p>如果顺利完成这一步，那么 <code>浏览器 &lt;-&gt; uWSGI &lt;-&gt; Python</code> 这条路就走通了！</p>
<h3 id="接入-Django"><a href="#接入-Django" class="headerlink" title="接入 Django"></a>接入 Django</h3><p><code>cd your-Django-project-dir</code> 进入你的 Django 项目文件夹。</p>
<p>上面是直接指定某个 Python 文件，现在，我们只需指定某个项目模块即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module your-Django-project.wsgi</span><br></pre></td></tr></table></figure></p>
<p>同样，打开浏览器输入 <code>yourdomain.com:8000</code> 即可看见我们的 Django 项目页面了。</p>
<p>如果顺利完成这一步，那么 <code>浏览器 &lt;-&gt; uWSGI &lt;-&gt; Django</code> 这条路就走通了！</p>
<h2 id="加入-nginx"><a href="#加入-nginx" class="headerlink" title="加入 nginx"></a>加入 nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装完 <code>nginx</code> 后，确保 <code>nginx</code> 监听的是 80 端口，然后在浏览器输入 <code>yourdomain.com</code> 就能看到 <code>nginx</code> 默认的 <code>Welcome to nginx</code> 页面了。<br><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/Django/deploy/20180403152217.png" alt="Welcome to nginx"></p>
<p>如果顺利完成这一步，那么 <code>浏览器 &lt;-&gt; nginx</code> 这条路就走通了！</p>
<h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><h4 id="处理静态文件"><a href="#处理静态文件" class="headerlink" title="处理静态文件"></a>处理静态文件</h4><p>安装完 <code>nginx</code> 之后应该在类似 <code>/etc/nginx/</code> 目录下有一个叫做 <code>uwsgi_params</code> 的文件，把它拷贝至 Django 项目的目录下。如果没有 <code>uwsgi_params</code> 文件，可以从<a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params" target="_blank" rel="noopener">这里</a>复制一份。</p>
<p>现在我们在 <code>/etc/nginx/sites-available/</code> 文件夹下创建一个 <code>yourdomain_nginx.conf</code> 的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># yourdomain_nginx.conf</span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line">    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">    server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># configuration of the server</span><br><span class="line">server &#123;</span><br><span class="line">    # the port your site will be served on</span><br><span class="line">    listen      8000;</span><br><span class="line">    # the domain name it will serve for</span><br><span class="line">    server_name yourdomain.com; # substitute your machine&apos;s IP address or FQDN</span><br><span class="line">    charset     utf-8;</span><br><span class="line"></span><br><span class="line">    # max upload size</span><br><span class="line">    client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line">    # Django media</span><br><span class="line">    location /media  &#123;</span><br><span class="line">        alias /path/to/your/mysite/media;  # your Django project&apos;s media files - amend as required</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /path/to/your/mysite/static; # your Django project&apos;s static files - amend as required</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Finally, send all non-media requests to the Django server.</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个文件告诉 <code>nginx</code> 去处理我们 Django 项目的一些静态文件（media, static）。</p>
<p>然后我们创建一个软连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/yourdomain_nginx.conf  /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></p>
<p>如果之前没有添加过 Django 静态文件夹配置的话，在 <code>settings.py</code> 文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 文件夹的位置需要和 yourdomain_nginx.conf 中配置的一样</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</span><br></pre></td></tr></table></figure></p>
<p>然后执行：<code>python manage.py collectstatic</code> 将静态文件搜集进这个文件夹</p>
<p>现在重启 <code>nginx</code>: <code>/etc/init.d/nginx restart</code></p>
<p>在浏览器中输入 <code>http://www.yourdomain.com:8000/static/admin/js/autocomplete.js</code>，应该能看见这个 js 文件的内容。（你可能没有这个文件，视不同版本 Django 而定，你可以访问你自己的某个静态文件）<br><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/Django/deploy/20180403154812.png" alt="静态文件"></p>
<p>如果顺利完成这一步，那么 <code>浏览器 &lt;-&gt; nginx &lt;-&gt; 静态文件</code> 这条路就走通了！</p>
<h4 id="处理-uwsgi-链接（TCP-socket）"><a href="#处理-uwsgi-链接（TCP-socket）" class="headerlink" title="处理 uwsgi 链接（TCP socket）"></a>处理 uwsgi 链接（TCP socket）</h4><p>在 <code>yourdomain_nginx.conf</code> 文件中的这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">    server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include     /your-Django-project-dir/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>告诉了 <code>nginx</code> 去处理 <code>uwsgi</code> 过来的 <code>request</code>。</p>
<p>现在你在之前的 <code>test.py</code> 目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket :8001 --wsgi-file test.py</span><br></pre></td></tr></table></figure></p>
<p>然后打开浏览器访问 <code>yourdomain.com:8000</code> 就能看见 <code>test.py</code> 中的 <code>Hello World</code> 了。</p>
<p>这时，<code>浏览器 &lt;-&gt; nginx &lt;-&gt; socket &lt;-&gt; uwsgi &lt;-&gt; Python</code> 这条路就走通了！</p>
<h4 id="处理-uwsgi-链接（unix-socket）"><a href="#处理-uwsgi-链接（unix-socket）" class="headerlink" title="处理 uwsgi 链接（unix socket）"></a>处理 uwsgi 链接（unix socket）</h4><p>在上面的 <code>yourdomain_nginx.conf</code> 文件中，配置 sock 文件位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    server unix:///path/to/your/mysite/mysite.sock;</span><br><span class="line">    # server 127.0.0.1:8001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重启 <code>nginx</code></p>
<p>启动 <code>uWSGI</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --wsgi-file test.py</span><br></pre></td></tr></table></figure></p>
<p>打开浏览器，访问 <code>yourdomain.com:8000</code> 就能看见 <code>test.py</code> 中的 <code>Hello World</code> 了。</p>
<blockquote>
<p><strong>注意：</strong><br>这里由于存在多个“用户”读写同一个文件（mysite.sock），所以可能会在 <code>uwsgi</code> 或者 <code>nginx</code> 中报权限不足的错误。<br>如果在 <code>nginx</code> 的错误日志中（/var/log/nginx/error.log）出现 <code>connect() to unix:///path/to/your/mysite/mysite.sock failed (13: Permission denied)</code>，你可以这么启动 <code>uwsgi</code>：<br><code>uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666</code>  </p>
<p>由于我是在 Docker 中跑的，启动 <code>uwsgi</code> 的时候一直报 <code>uwsgi bind(): Operation not permitted [core/socket.c line 230]</code> 这个权限的错误。<br>这是因为 <code>sock</code> 文件存放的位置在 Docker 的挂载路径中，从而导致了权限的问题，只需把 <code>sock</code> 文件存在其他位置即可。</p>
</blockquote>
<h2 id="Django-uWSGI-NGINX"><a href="#Django-uWSGI-NGINX" class="headerlink" title="Django + uWSGI + NGINX"></a>Django + uWSGI + NGINX</h2><p>现在我们把这三个连接到一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --module mysite.wsgi</span><br></pre></td></tr></table></figure></p>
<p>打开浏览器，访问 <code>yourdomain.com</code> 就能看见 Django 的 Hello World 页面了。<br><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/Django/deploy/20180404154538.png" alt="Django 首页"></p>
<h2 id="uWSGI-配置"><a href="#uWSGI-配置" class="headerlink" title="uWSGI 配置"></a>uWSGI 配置</h2><p>uWSGI 启动的时候可以添加一些个性化配置，可以在项目文件夹下新建 <code>yourdomain_uwsgi.ini</code> 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># yourdomain_uwsgi.ini file</span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># Django 项目根目录（绝对路径）</span><br><span class="line">chdir           = /path/to/your/project</span><br><span class="line"># Django 项目的 wsgi 文件</span><br><span class="line">module          = project.wsgi</span><br><span class="line"># Python 虚拟环境路径（绝对路径）</span><br><span class="line"># home            = /path/to/virtualenv</span><br><span class="line"></span><br><span class="line"># 是否为主进程</span><br><span class="line">master          = true</span><br><span class="line"># 最多工作进程数</span><br><span class="line">processes       = 4</span><br><span class="line"># sock 文件路径（绝对路径）</span><br><span class="line">socket          = /path/to/your/project/mysite.sock</span><br><span class="line"># 之前讲的权限问题，在这边设置合适的权限</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># 退出时，清除环境</span><br><span class="line">vacuum          = true</span><br><span class="line"># uwsgi pid 文件存放路径</span><br><span class="line">pidfile         = /uwsgi_conf/uwsgi.pid</span><br><span class="line"># uwsgi log 文件存放路径（不添加则前台进程，加上后会转为后台进程）</span><br><span class="line">daemonize       = /uwsgi_conf/uwsgi.log</span><br></pre></td></tr></table></figure></p>
<p><code>uwsgi</code> 配置文件写完后，启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini yourdomain_uwsgi.ini</span><br></pre></td></tr></table></figure></p>
<h2 id="利用-NGINX-配置本地-HTTPS"><a href="#利用-NGINX-配置本地-HTTPS" class="headerlink" title="利用 NGINX 配置本地 HTTPS"></a>利用 NGINX 配置本地 HTTPS</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>首先需要确认已经安装 <code>OpenSSL</code></p>
<p>装完后，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout server.key -out server.crt</span><br></pre></td></tr></table></figure></p>
<ul>
<li>req：处理证书签署请求。</li>
<li>x509：生成自签名证书。</li>
<li>nodes：跳过为证书设置密码的阶段，这样 Nginx 才可以直接打开证书。</li>
<li>days 365：证书有效期为一年。</li>
<li>newkey rsa:2048：生成一个新的私钥，采用的算法是2048位的 RSA。</li>
<li>keyout：新生成的私钥文件为当前目录下的 server.key。</li>
<li>out：新生成的证书文件为当前目录下的 server.crt。</li>
</ul>
<p>然后会让你填写一些信息，其中最重要的就是 <code>Common Name (e.g. server FQDN or YOUR name) []:</code></p>
<p>你可以填上你的域名（本地 hosts 中随意的”假”域名）或者 ip。</p>
<p>最后得到这两个文件：<code>example.crt</code>， <code>example.key</code>。</p>
<h3 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h3><p>将下面的代码加到之前 <code>yourdomain_nginx.conf</code> 的最后面（别忘了修改你对应的文件位置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name  yourdomain;</span><br><span class="line"></span><br><span class="line">    ssl                      on;</span><br><span class="line">    ssl_certificate          /path/to/your/server.crt;</span><br><span class="line">    ssl_certificate_key      /path/to/your/server.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include     /path/to/your/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重启 <code>nginx</code>，在浏览器中输入 <code>https://yourdomain.com</code>，即可看见之前的页面，不过这个 https 认证浏览器会认为是不安全的，对于本地测试完全不用在意。<br><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/Django/deploy/20180404160902.png" alt="https 页面"></p>
<p>好了，我要去玩微信小程序了。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="noopener">uWSGI 文档</a><br><a href="https://github.com/docker/compose/issues/3211#issuecomment-201503053" target="_blank" rel="noopener">Docker 跨容器挂载</a><br><a href="http://www.ruanyifeng.com/blog/2018/02/nginx-docker.html" target="_blank" rel="noopener">阮一峰 https 配置</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在玩微信小程序，但是测试的时候想和 Django 后端通信时出现了问题。&lt;/p&gt;
&lt;p&gt;微信小程序的服务器域名配置文档中写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务器域名请在 小程序后台-设置-开发设置-服务器域名 中进行配置，配置时需要注意：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域名只支持 https (request、uploadFile、downloadFile) 和 wss (connectSocket) 协议；  &lt;/li&gt;
&lt;li&gt;域名不能使用 IP 地址或 localhost，且不能带端口号；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就尴尬了，所以可以采用 Nginx “隐藏”端口号，并搭建本地 https。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yuanblq.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>集中式日志系统ELK协议栈简介与入门</title>
    <link href="https://yuanblq.github.io/2018/03/13/%E9%9B%86%E4%B8%AD%E5%BC%8F%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9FELK%E5%8D%8F%E8%AE%AE%E6%A0%88%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%85%A5%E9%97%A8/"/>
    <id>https://yuanblq.github.io/2018/03/13/集中式日志系统ELK协议栈简介与入门/</id>
    <published>2018-03-13T08:14:25.000Z</published>
    <updated>2018-03-23T01:34:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是“ELK”？</p>
<p>“ELK”是三大开源软件的缩写：Elasticsearch、Logstash、Kibana。</p>
<p>Elasticsearch 负责搜索和分析，Logstash 负责从各个来源搜集、转换数据，kibana 以图表的形式在 Elasticsearch 中展示数据。</p>
<a id="more"></a>
<h2 id="安装Logstash"><a href="#安装Logstash" class="headerlink" title="安装Logstash"></a>安装Logstash</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>Logstash 需要 Java8 的支持，可以通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官方发布版本</a>或者其他<a href="http://openjdk.java.net/" target="_blank" rel="noopener">开源版本</a>进行安装</p>
<p>安装完之后通过以下命令检查是否安装成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure></p>
<p>安装正常的话会出现下面类似的响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_65&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_65-b17)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)</span><br></pre></td></tr></table></figure></p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>从<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">官网</a>下载符合你操作系统的安装文件。然后解压，记住不要安装在带有冒号（:）的路径中。</p>
<h3 id="仓库安装"><a href="#仓库安装" class="headerlink" title="仓库安装"></a>仓库安装</h3><p>对于一些 Linux 发布版，可以直接从其软件仓库直接安装。</p>
<h4 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h4><p>下载公钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>
<p>确保 <code>apt-transport-https</code> 包已经安装，没有的话先安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure></p>
<p>加入仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb https://artifacts.elastic.co/packages/6.x/apt stable main"</span> | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list</span><br></pre></td></tr></table></figure></p>
<p>最后安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install logstash</span><br></pre></td></tr></table></figure></p>
<h4 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h4><p>下载安装公钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></p>
<p>将下面的内容写入新文件 <code>/etc/yum.repos.d/logstash.repo</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[logstash-6.x]</span><br><span class="line">name=Elastic repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install logstash</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考文档：<br><a href="https://www.elastic.co/guide/en/logstash/current/installing-logstash.html#package-repositories" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/installing-logstash.html#package-repositories</a></p>
</blockquote>
<h2 id="测试Logstash"><a href="#测试Logstash" class="headerlink" title="测试Logstash"></a>测试Logstash</h2><p>每个 Logstash 的 Pipeline 都必须这两个元素：<code>input</code> 和 <code>output</code>，以及一个可选元素：<code>filter</code>。</p>
<p>先来测试 Logstash 有没有安装成功。在命令行运行以下最基本的 Pipeline：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  logstash-6.2.2 bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>启动 Logstash 之后，看见 <code>The stdin plugin is now waiting for input:</code> 说明已经启动成功，然后在命令行输入 <code>hello world</code>，你会得到如下相似的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input:</span><br><span class="line">hello world</span><br><span class="line">2018-03-12T08:37:16.976Z xxxdeiMac.local hello world</span><br></pre></td></tr></table></figure></p>
<p>Logstash 会把时间戳和 IP 地址信息传递给 message。通过 CTRL-D 退出 Logstash。</p>
<h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p>不同的操作系统发布版本安装过程有些许不同，具体见<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html" target="_blank" rel="noopener">官网</a>。下面以 Ubuntu 为例。</p>
<h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><p>同样需要 Java8 的环境</p>
<h3 id="仓库安装-1"><a href="#仓库安装-1" class="headerlink" title="仓库安装"></a>仓库安装</h3><p>导入公钥</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>从APT仓库安装</p>
<p>如果没有安装过 <code>apt-transport-https</code> 包，同样要先安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure></p>
<p>加入仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb https://artifacts.elastic.co/packages/6.x/apt stable main"</span> | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch</span><br></pre></td></tr></table></figure>
<h3 id="启动Elasticsearch"><a href="#启动Elasticsearch" class="headerlink" title="启动Elasticsearch"></a>启动Elasticsearch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="built_in">cd</span> elasticsearch-6.2.2</span><br><span class="line">➜  elasticsearch-6.2.2 bin/elasticsearch</span><br></pre></td></tr></table></figure>
<p>当看到如下类似的log，说明基本启动完成了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2018-03-12T17:30:02,153][INFO ][o.e.n.Node] [0TDYPSN] started</span><br></pre></td></tr></table></figure></p>
<p>打开浏览器，进入 <code>localhost:9200</code>，看见如下内容说明已经启动了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;0TDYPSN&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;uQ0qekKORmKT5XgH6rzWmA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.2.2&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;10b1edd&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-02-16T19:01:30.685723Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="利用-Logstash-解析-log-并输出到-Elasticsearch"><a href="#利用-Logstash-解析-log-并输出到-Elasticsearch" class="headerlink" title="利用 Logstash 解析 log 并输出到 Elasticsearch"></a>利用 Logstash 解析 log 并输出到 Elasticsearch</h2><p>上面我们创建了一个最最基本的 Logstash Pipeline 用于测试安装是否成功。在实际工作中，一个 Pipeline 都会比这复杂点：经常会有多个 <code>input</code>，<code>filter</code> 和 <code>output</code> 插件。</p>
<p>现在我们通过 Filebeat 来把实际工作中产生的日志文件发送给 Logstash。</p>
<h3 id="安装-Filebeat"><a href="#安装-Filebeat" class="headerlink" title="安装 Filebeat"></a>安装 Filebeat</h3><p>根据自己的操作系统从<a href="https://www.elastic.co/guide/en/beats/filebeat/6.2/filebeat-installation.html" target="_blank" rel="noopener">官网</a>匹配合适的安装方式</p>
<h3 id="配置-Filebeat"><a href="#配置-Filebeat" class="headerlink" title="配置 Filebeat"></a>配置 Filebeat</h3><p>将下面的内容覆盖到 Filebeat 文件夹下的 <code>filebeat.yml</code> 文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /absolute/path/to/file/test_logs.log </span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br></pre></td></tr></table></figure></p>
<h3 id="配置-Logstash-来接收-Filebeat-的输入"><a href="#配置-Logstash-来接收-Filebeat-的输入" class="headerlink" title="配置 Logstash 来接收 Filebeat 的输入"></a>配置 Logstash 来接收 Filebeat 的输入</h3><p>前面我们验证 Logstash 有没有安装成功的时候，在命令行创建了一个最简单的 Pipeline（命令行接收 Events，并在命令行输出），现在我们要创建一个比较复杂的 Pipeline 来从 Beats 接收 Events。</p>
<p>当然比较复杂的 Pipeline 就不能再在命令行直接创建了，我们得先配置在文件中。</p>
<p>在 Logstash 目录下，创建 <code>first-pipeline.conf</code> 文件。</p>
<p>先把下面这个 Pipeline 的骨架搭好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 井号可以用作注释</span><br><span class="line">input &#123;</span><br><span class="line">&#125;</span><br><span class="line"># 还记得吗 filter 这部件适可选的</span><br><span class="line"># filter &#123;</span><br><span class="line">#</span><br><span class="line"># &#125;</span><br><span class="line">output &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>骨架就这样，当然现在还不能用，我们还得定义输入输出部分的配置。</p>
<ul>
<li><p>在 <code>input</code> 部分配置 Beat 插件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>output</code> 部分<br>  我们先把输出配置到 stdout，之后再搞到 Elasticsearch（一步步来 ~。~）。<br>  在 <code>output</code> 块中添加如下配置：  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stdout &#123; codec =&gt; rubydebug &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面配完之后，你的 <code>first-pipeline.conf</code> 文件基本长成这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># filter &#123;</span><br><span class="line">#</span><br><span class="line"># &#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用这个 Pipeline 之前，可以用下面的命令检查配置是否正确：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  logstash-6.2.2 bin/logstash -f first-pipeline.conf --config.test_and_exit</span><br></pre></td></tr></table></figure></p>
<p>如果测试通过，则会在命令行出现以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2018-03-13T10:02:29,275][INFO ][logstash.runner] Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash</span><br></pre></td></tr></table></figure></p>
<p>通过测试后，通过下面的命令启动 Logstash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  logstash-6.2.2 bin/logstash -f first-pipeline.conf --config.reload.automatic</span><br></pre></td></tr></table></figure></p>
<p><code>--config.reload.automatic</code> 能够自动重载配置，这样每次修改完配置后不用重启 Logstash 了。</p>
<h3 id="生产假数据-）"><a href="#生产假数据-）" class="headerlink" title="生产假数据 ;）"></a>生产假数据 ;）</h3><p>现在还没有可以采集的 log 日志，但是，毛主席说过：没有 log 我们就自己创造 log！</p>
<p>将以下内容复制到 <code>generate_logs.py</code> 文件中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">METHODS = [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'DELETE'</span>]</span><br><span class="line">INTERFACES = [</span><br><span class="line">    <span class="string">'/interface/1'</span>, <span class="string">'/interface/2'</span>, <span class="string">'/interface/3'</span>,</span><br><span class="line">    <span class="string">'/interface/4'</span>, <span class="string">'/interface/5'</span>, <span class="string">'/interface/6'</span>,</span><br><span class="line">]</span><br><span class="line">STATUS_CODES = [<span class="number">200</span>, <span class="number">201</span>, <span class="number">301</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">500</span>]</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">'[&#123;&#125;] "&#123;&#125; &#123;&#125; HTTP/1.1" &#123;&#125;\r\n'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_fade_logs</span><span class="params">(log_path)</span>:</span></span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">'%d/%m/%y %H:%M:%S'</span>)</span><br><span class="line">    method = random.choice(METHODS)</span><br><span class="line">    interface = random.choice(INTERFACES)</span><br><span class="line">    status_code = random.choice(STATUS_CODES)</span><br><span class="line"></span><br><span class="line">    log = LOG_FORMAT.format(current_time, method, interface, status_code)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(log_path, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(log)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span>  <span class="keyword">True</span>:</span><br><span class="line">        generate_fade_logs(<span class="string">'/Users/a/Desktop/test_logs.log'</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure></p>
<p>启动我们的“log生成器”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python generate_logs.py</span><br></pre></td></tr></table></figure></p>
<h3 id="启动-Filebeat"><a href="#启动-Filebeat" class="headerlink" title="启动 Filebeat"></a>启动 Filebeat</h3><p>在另一个命令行窗口输入以下命令启动 Filebeat：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./filebeat -e -c filebeat.yml -d <span class="string">"publish"</span></span><br></pre></td></tr></table></figure></p>
<p>启动之后，伴随着“log生成器”的辛勤工作，你会在前面 Logstash 启动的命令行窗口和 Filebeat 启动的命令窗口中不断看到如下类似的信息的出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;prospector&quot; =&gt; &#123;</span><br><span class="line">        &quot;type&quot; =&gt; &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">        &quot;source&quot; =&gt; &quot;/Users/a/Desktop/test_logs.log&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;[13/03/18 10:20:29] \&quot;DELETE /interface/5 HTTP/1.1\&quot; 404&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2018-03-13T02:20:30.713Z,</span><br><span class="line">        &quot;offset&quot; =&gt; 4004,</span><br><span class="line">          &quot;beat&quot; =&gt; &#123;</span><br><span class="line">            &quot;name&quot; =&gt; &quot;xxxdeiMac.local&quot;,</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;xxxdeiMac.local&quot;,</span><br><span class="line">         &quot;version&quot; =&gt; &quot;6.2.2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;xxxdeiMac.local&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用-Grok-过滤插件解析-log"><a href="#使用-Grok-过滤插件解析-log" class="headerlink" title="使用 Grok 过滤插件解析 log"></a>使用 Grok 过滤插件解析 log</h3><p>我们的 Pipeline 已经能从 Filebeat 中读取 log 信息了，但是你也看到了，输出的 log 信息全存在了 <code>message</code> 字段，我们得目的是获取这串 log 信息中的各个部分数据，为了解决这个问题，我们需要使用 <code>Grok</code> 过滤插件。</p>
<p>我们“log 生成器”生成的日志格式是长这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[13/03/18 10:22:29] &quot;POST /interface/2 HTTP/1.1&quot; 201</span><br></pre></td></tr></table></figure></p>
<p>中括号里面是时间，接着引号里面是请求方法、请求内容、HTTP协议，最后是响应的状态码。</p>
<p><code>Grok</code> 的解析语法一般长这样：<code>%{语法:语义}</code>。比如 <code>3.44</code> 这个数据，我们可以用 <code>NUMBER</code> 这个内置语法来捕获到，而 <code>POST</code> 这个单词可以用 <code>WORD</code> 这个内置语法捕获。</p>
<p>对于我们的日志格式，我们得 <code>Grok</code> 过滤语法可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[%&#123;DATESTAMP:date&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;NUMBER:status_code&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们把这个过滤语法加到 <code>filter</code> 块中试试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;\[%&#123;DATESTAMP:date&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;NUMBER:status_code&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终，我们的 <code>first-pipeline.conf</code> 长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;\[%&#123;DATESTAMP:date&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;NUMBER:status_code&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意:</strong><br>由于 Filebeat 读取日志文件的时候会记住当前读到哪个位置，下次会接在这个位置之后读取，我们先 <code>CTRL-C</code> 停止 FileBeat 的读取，然后我们需要把记录这个信息的文件删除：<code>rm data.registry</code></p>
</blockquote>
<p>现在重启 <code>Filebeat</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  filebeat-6.2.2-darwin-x86_64 ./filebeat -e -c filebeat.yml -d <span class="string">"publish"</span></span><br></pre></td></tr></table></figure></p>
<p>现在我们的 Logstash 命令行应该会输出以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           &quot;beat&quot; =&gt; &#123;</span><br><span class="line">         &quot;version&quot; =&gt; &quot;6.2.2&quot;,</span><br><span class="line">            &quot;name&quot; =&gt; &quot;xxxdeiMac.local&quot;,</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;xxxdeiMac.local&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;httpversion&quot; =&gt; &quot;1.1&quot;,</span><br><span class="line">           &quot;host&quot; =&gt; &quot;xxxdeiMac.local&quot;,</span><br><span class="line">     &quot;prospector&quot; =&gt; &#123;</span><br><span class="line">        &quot;type&quot; =&gt; &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">           &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">           &quot;date&quot; =&gt; &quot;13/03/18 15:07:38&quot;,</span><br><span class="line">           &quot;verb&quot; =&gt; &quot;PUT&quot;,</span><br><span class="line">        &quot;request&quot; =&gt; &quot;/interface/5&quot;,</span><br><span class="line">     &quot;@timestamp&quot; =&gt; 2018-03-13T07:07:44.509Z,</span><br><span class="line">         &quot;source&quot; =&gt; &quot;/Users/a/Desktop/test_logs.log&quot;,</span><br><span class="line">    &quot;status_code&quot; =&gt; &quot;201&quot;,</span><br><span class="line">         &quot;offset&quot; =&gt; 5183,</span><br><span class="line">        &quot;message&quot; =&gt; &quot;[13/03/18 15:07:38] \&quot;PUT /interface/5 HTTP/1.1\&quot; 201&quot;,</span><br><span class="line">       &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>date</code>，<code>verb</code>，<code>request</code>，<code>httpversion</code>，<code>status_code</code> 字段就是我们通过 <code>Grok</code> 解析出来的字段。当然，原本的 <code>message</code> 依然存在。</p>
<h3 id="索引化数据并发给-Elasticsearch"><a href="#索引化数据并发给-Elasticsearch" class="headerlink" title="索引化数据并发给 Elasticsearch"></a>索引化数据并发给 Elasticsearch</h3><p>首先，我们先把数据输出给 Elasticsearch，在 <code>first-pipeline.conf</code> 文件的 <code>output</code> 块中增加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</span><br><span class="line">        index =&gt; &quot;testlog&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>hosts</code> 包含运行有 Elasticsearch 的实例地址，<code>index</code> 是索引名字，等会会在 Kibana 中用到。</p>
<blockquote>
<p><strong>注意：</strong><br>上述的配置，假定 Logstash 和 Elasticsearch 都是跑在同一台实例上。</p>
</blockquote>
<p>像上面一样，重启 Filebeat，让 Filebeat 重新读取整个日志文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  filebeat-6.2.2-darwin-x86_64 rm data/registry</span><br><span class="line">➜  filebeat-6.2.2-darwin-x86_64 ./filebeat -e -c filebeat.yml -d <span class="string">"publish"</span></span><br></pre></td></tr></table></figure></p>
<p>上面我们安装 Elasticsearch 的时候已经启动了，如果没有启动的话现在可以启动 Elasticsearch 了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  elasticsearch-6.2.2 bin/elasticsearch</span><br></pre></td></tr></table></figure></p>
<p>由于 <code>Grok</code> 过滤插件已经帮我们把数据建好索引并发给了 Elasticsearch，我们可以通过在浏览器输入 <code>localhost:9200/_cat/indices?v</code> 来查看已经建好的索引名字，一般为 <code>logstash-$DATE</code>，<code>$DATE</code> 为 <code>Grok</code> 插件建立索引时候的日期：<code>YYYY.MM.DD</code>。</p>
<p>拿到索引名称后在浏览器输入 <code>localhost:9200/logstash-$DATE/_search?pretty&amp;q=status_code=404</code> 即可看到我们上面解析到的 <code>status_code</code> 这个字段全部为 <code>404</code> 的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 30,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 30,</span><br><span class="line">    &quot;max_score&quot; : 2.384823,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;logstash-2018.03.13&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;iNpDHmIBdTFR9RiADh6e&quot;,</span><br><span class="line">        &quot;_score&quot; : 2.384823,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;date&quot; : &quot;13/03/18 15:05:21&quot;,</span><br><span class="line">          &quot;@timestamp&quot; : &quot;2018-03-13T07:28:46.413Z&quot;,</span><br><span class="line">          &quot;request&quot; : &quot;/interface/6&quot;,</span><br><span class="line">          &quot;verb&quot; : &quot;POST&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;@version&quot; : &quot;1&quot;,</span><br><span class="line">          &quot;prospector&quot; : &#123;</span><br><span class="line">            &quot;type&quot; : &quot;log&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;status_code&quot; : &quot;404&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;[13/03/18 15:05:21] \&quot;POST /interface/6 HTTP/1.1\&quot; 404&quot;,</span><br><span class="line">          &quot;source&quot; : &quot;/Users/a/Desktop/test_logs.log&quot;,</span><br><span class="line">          &quot;beat&quot; : &#123;</span><br><span class="line">            &quot;version&quot; : &quot;6.2.2&quot;,</span><br><span class="line">            &quot;hostname&quot; : &quot;1deiMac.local&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;1deiMac.local&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;host&quot; : &quot;1deiMac.local&quot;,</span><br><span class="line">          &quot;offset&quot; : 4702,</span><br><span class="line">          &quot;httpversion&quot; : &quot;1.1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们基本就已经把 <code>Filebeat --&gt; Logstash --&gt; Elasticsearch</code> 这条路打通了！</p>
<p>接下来要想更直观的查看分析数据，就需要引入 <code>ELK</code> 三大组件之 <code>Kibana</code>。</p>
<h2 id="更直观的数据展示-——-Kibana"><a href="#更直观的数据展示-——-Kibana" class="headerlink" title="更直观的数据展示 —— Kibana"></a>更直观的数据展示 —— Kibana</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>根据自己对应的操作系统，从[官网]下载安装相应的版本。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>修改 <code>config/kibana.yml</code> 文件，将 <code>elasticsearch.url</code> 这个字段指向你的 Elasticsearch 实例。</p>
<p>命令行输入 <code>bin/kibana</code> 启动，然后就可以在 <code>localhost:5601</code> 访问了。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入 <code>Kibana</code> 后，首先需要配置一个索引文件，不然 <code>Kibana</code> 也不知道该展示什么数据。</p>
<p>选择索引<br><img src="https://pages-ncdn-1253600859.picsh.myqcloud.com/kibana-install/14_02_14__03_19_2018.jpg!pages" alt="选择索引"></p>
<p>选择时间过滤字段<br><img src="https://pages-ncdn-1253600859.picsh.myqcloud.com/kibana-install/17_45_36__03_13_2018.jpg!pages" alt="选择时间过滤字段"></p>
<p>最后就可以在 <code>discover</code> 中看到我们的数据了<br><img src="https://pages-ncdn-1253600859.picsh.myqcloud.com/kibana-install/17_47_21__03_13_2018.jpg!pages" alt="数据展示"></p>
<h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html" target="_blank" rel="noopener">Logstash 官方文档</a><br><a href="https://www.elastic.co/guide/en/logstash/6.2/plugins-filters-grok.html" target="_blank" rel="noopener">Grok 官方文档</a><br><a href="http://grokconstructor.appspot.com/" target="_blank" rel="noopener">Grok Constructor</a><br><a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">Grok Debugger</a><br><a href="https://www.elastic.co/guide/en/kibana/current/index.html" target="_blank" rel="noopener">Kibana 官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是“ELK”？&lt;/p&gt;
&lt;p&gt;“ELK”是三大开源软件的缩写：Elasticsearch、Logstash、Kibana。&lt;/p&gt;
&lt;p&gt;Elasticsearch 负责搜索和分析，Logstash 负责从各个来源搜集、转换数据，kibana 以图表的形式在 Elasticsearch 中展示数据。&lt;/p&gt;
    
    </summary>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Data" scheme="https://yuanblq.github.io/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Celery 后台运行</title>
    <link href="https://yuanblq.github.io/2018/01/17/Celery-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>https://yuanblq.github.io/2018/01/17/Celery-后台运行/</id>
    <published>2018-01-17T07:20:15.000Z</published>
    <updated>2018-01-17T07:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Celery-后台运行"><a href="#Celery-后台运行" class="headerlink" title="Celery 后台运行"></a>Celery 后台运行</h2><p>测试的时候我们可以直接在不同的终端直接运行 Celery 进程，但是如果要在服务器上运行，那我们岂不是得开好几个终端，而且退出终端之后 Celery 进程也就停止了，能不能让 Celery 在后台以守护进程的方式运行？</p>
<p>不用说，当然是可以的，而且还不止一种方式。这里先介绍 <code>init-script</code> 方法。</p>
<a id="more"></a>
<h3 id="使用通用的-init-script"><a href="#使用通用的-init-script" class="headerlink" title="使用通用的 init-script"></a>使用通用的 init-script</h3><p>首先获取 Celery 的 GitHub 仓库 <a href="https://github.com/celery/celery/tree/3.1/extra/generic-init.d/" target="_blank" rel="noopener"><code>extra/generic-init.d/</code></a> 文件夹下的文件。</p>
<h4 id="启动-worker"><a href="#启动-worker" class="headerlink" title="启动 worker"></a>启动 worker</h4><p>将上面 GitHub 仓库文件夹下的 <code>celeryd</code> 文件复制到本地的 <code>/etc/init.d/celeryd</code> 文件中并赋予可执行的权限: <code>sudo chmod +x /etc/init.d/celeryd</code>，然后在 <code>/etc/default/</code> 文件夹下创建 <code>celeryd</code> 配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Names of nodes to start</span></span><br><span class="line"><span class="comment">#   most people will only start one node:</span></span><br><span class="line">CELERYD_NODES=<span class="string">"worker1"</span></span><br><span class="line"><span class="comment">#   but you can also start multiple and configure settings</span></span><br><span class="line"><span class="comment">#   for each in CELERYD_OPTS</span></span><br><span class="line"><span class="comment">#CELERYD_NODES="worker1 worker2 worker3"</span></span><br><span class="line"><span class="comment">#   alternatively, you can specify the number of nodes to start:</span></span><br><span class="line"><span class="comment">#CELERYD_NODES=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Absolute or relative path to the 'celery' command:</span></span><br><span class="line">CELERY_BIN=<span class="string">"/usr/local/bin/celery"</span></span><br><span class="line"><span class="comment">#CELERY_BIN="/virtualenvs/def/bin/celery"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># App instance to use</span></span><br><span class="line"><span class="comment"># comment out this line if you don't use an app</span></span><br><span class="line">CELERY_APP=<span class="string">"proj"</span></span><br><span class="line"><span class="comment"># or fully qualified:</span></span><br><span class="line"><span class="comment">#CELERY_APP="proj.tasks:app"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where to chdir at start.</span></span><br><span class="line">CELERYD_CHDIR=<span class="string">"/opt/Myproject/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra command-line arguments to the worker</span></span><br><span class="line">CELERYD_OPTS=<span class="string">"--time-limit=300 --concurrency=8"</span></span><br><span class="line"><span class="comment"># Configure node-specific settings by appending node name to arguments:</span></span><br><span class="line"><span class="comment">#CELERYD_OPTS="--time-limit=300 -c 8 -c:worker2 4 -c:worker3 2 -Ofair:worker1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set logging level to DEBUG</span></span><br><span class="line"><span class="comment">#CELERYD_LOG_LEVEL="DEBUG"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %n will be replaced with the first part of the nodename.</span></span><br><span class="line">CELERYD_LOG_FILE=<span class="string">"/var/log/celery/%n%I.log"</span></span><br><span class="line">CELERYD_PID_FILE=<span class="string">"/var/run/celery/%n.pid"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Workers should run as an unprivileged user.</span></span><br><span class="line"><span class="comment">#   You need to create this user manually (or you can choose</span></span><br><span class="line"><span class="comment">#   a user/group combination that already exists (e.g., nobody).</span></span><br><span class="line">CELERYD_USER=<span class="string">"celery"</span></span><br><span class="line">CELERYD_GROUP=<span class="string">"celery"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If enabled pid and log directories will be created if missing,</span></span><br><span class="line"><span class="comment"># and owned by the userid/group configured.</span></span><br><span class="line">CELERY_CREATE_DIRS=1</span><br></pre></td></tr></table></figure>
<p>这个配置文件中，你可能需要更改 <code>CELERY_BIN</code>, <code>CELERY_APP</code>, <code>CELERYD_CHDIR</code>, <code>CELERYD_USER</code>, <code>CELERYD_GROUP</code>。</p>
<p>根据你自身项目配置好上述配置后就可以通过 <code>/etc/init.d/celeryd {start|stop|restart|graceful|kill|dryrun|create-paths}</code> 这些命令来控制 Celery worker 进程。</p>
<h4 id="启动-beat"><a href="#启动-beat" class="headerlink" title="启动 beat"></a>启动 beat</h4><p>如果你的项目中还有周期任务，那么还得把 Celery beat 启动起来。</p>
<p>把 GitHub 仓库中的 <code>celerybeat</code> 文件复制到 <code>/etc/init.d/celerybeat</code> 文件中，然后赋予可执行权限: <code>sudo chmod +x /etc/init.d/celerybeat</code>。</p>
<p>然后同样得有一个 <code>/etc/default/celerybeat</code> 配置文件。不过，如果没有什么特殊配置，可以直接使用 <code>/etc/default/celeryd</code> 配置文件，不必创建 <code>/etc/default/celerybeat</code> 配置文件。</p>
<p>如果你依然要创建的，那么这个文件可能是长这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Absolute or relative path to the 'celery' command:</span></span><br><span class="line">CELERY_BIN=<span class="string">"/usr/local/bin/celery"</span></span><br><span class="line"><span class="comment">#CELERY_BIN="/virtualenvs/def/bin/celery"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># App instance to use</span></span><br><span class="line"><span class="comment"># comment out this line if you don't use an app</span></span><br><span class="line">CELERY_APP=<span class="string">"proj"</span></span><br><span class="line"><span class="comment"># or fully qualified:</span></span><br><span class="line"><span class="comment">#CELERY_APP="proj.tasks:app"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where to chdir at start.</span></span><br><span class="line">CELERYBEAT_CHDIR=<span class="string">"/opt/Myproject/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra arguments to celerybeat</span></span><br><span class="line">CELERYBEAT_OPTS=<span class="string">"--schedule=/var/run/celery/celerybeat-schedule"</span></span><br></pre></td></tr></table></figure>
<p>完成配置后，同样通过 <code>/etc/init.d/celerybeat {start|stop|restart|create-paths|status}</code> 这些命令控制 Celery beat 进程。</p>
<blockquote>
<p>参考文档：<br><a href="http://docs.celeryproject.org/en/latest/userguide/daemonizing.html" target="_blank" rel="noopener">Celery daemon</a><br><a href="https://pythad.github.io/articles/2016-12/how-to-run-celery-as-a-daemon-in-production" target="_blank" rel="noopener">How to run celery as a daemon?</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Celery-后台运行&quot;&gt;&lt;a href=&quot;#Celery-后台运行&quot; class=&quot;headerlink&quot; title=&quot;Celery 后台运行&quot;&gt;&lt;/a&gt;Celery 后台运行&lt;/h2&gt;&lt;p&gt;测试的时候我们可以直接在不同的终端直接运行 Celery 进程，但是如果要在服务器上运行，那我们岂不是得开好几个终端，而且退出终端之后 Celery 进程也就停止了，能不能让 Celery 在后台以守护进程的方式运行？&lt;/p&gt;
&lt;p&gt;不用说，当然是可以的，而且还不止一种方式。这里先介绍 &lt;code&gt;init-script&lt;/code&gt; 方法。&lt;/p&gt;
    
    </summary>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Celery" scheme="https://yuanblq.github.io/tags/Celery/"/>
    
  </entry>
  
  <entry>
    <title>celery入门到使用</title>
    <link href="https://yuanblq.github.io/2018/01/16/celery%E5%85%A5%E9%97%A8%E5%88%B0%E4%BD%BF%E7%94%A8/"/>
    <id>https://yuanblq.github.io/2018/01/16/celery入门到使用/</id>
    <published>2018-01-16T09:10:46.000Z</published>
    <updated>2018-01-16T09:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery入门到使用"><a href="#celery入门到使用" class="headerlink" title="celery入门到使用"></a>celery入门到使用</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install celery</span><br><span class="line">$ pip install redis</span><br></pre></td></tr></table></figure>
<h3 id="celery应用"><a href="#celery应用" class="headerlink" title="celery应用"></a>celery应用</h3><p>使用 celery 的前提是你得有一个 Celery 的实例。我们可以称之为 Celery 应用或者简单地说 app。该实例是用来创建 task 任务、管理 worker 等等，所以必须保证在我们得其他模块中能将它导入过来。</p>
<a id="more"></a>
<h3 id="单个模块"><a href="#单个模块" class="headerlink" title="单个模块"></a>单个模块</h3><p>创建一个 tasks.py 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app = Celery(&apos;tasks&apos;, broker=&apos;redis://localhost:6379/1&apos;)</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure></p>
<p>[分析]：<code>Celery()</code> 的第一个参数是当前模块的名字，第二个参数是 <code>broker</code> 关键字参数，填写你用的 broker 的 URL 地址。然后定义了一个叫做 add 的任务。</p>
<h3 id="启动-celery-worker-服务"><a href="#启动-celery-worker-服务" class="headerlink" title="启动 celery worker 服务"></a>启动 celery worker 服务</h3><p>通过 <code>worker</code> 参数启动我们的 worker：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure></p>
<h3 id="调用-task"><a href="#调用-task" class="headerlink" title="调用 task"></a>调用 task</h3><p>调用 task 可以使用 <code>delay()</code> 方法，这是 <code>apply_async()</code> 方法的缩写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(4, 4)</span><br></pre></td></tr></table></figure></p>
<h3 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h3><p>如果我们要想跟踪 task 的结果或者状态，那么就必须有个地方存储这些信息。redis 提供 <code>backend</code> 配置来设置 task 结果的存储位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery_app = Celery(&apos;tasks&apos;, broker=&apos;redis://localhost:6379/1&apos;, backend=&apos;redis://localhost:6379/2&apos;)</span><br></pre></td></tr></table></figure></p>
<p>现在我们重新启动 Celery 后，再次发送一个 task 任务：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.ready()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
<p><code>ready()</code> 用来判断某个 task 任务是否完成。这个方法是立刻返回结果的，当然也可以等待 task 任务的完成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.get(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p>
<p>不过这种方法一般不常用，因为我们都已经做异步任务了，而这种方法是同步的。</p>
<p><code>get()</code> 方法有个参数 <code>propagate</code>，这个参数的意思是：如果这个 task 任务发生了 Exception，那么在 <code>get()</code> 方法中会再一次抛出这个异常，通过设置 <code>propagate=False</code>，可以阻止异常的传递。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一般情况下，Celery 的默认配置能够满足绝大多数情况，不过 Celery 提供了大量的配置能满足你的其他需求。熟悉这些配置将会让你对之后的工作游刃有余。你可以在<a href="http://docs.celeryproject.org/en/latest/userguide/configuration.html#configuration" target="_blank" rel="noopener">Celery 配置手册</a>中查看其他配置。</p>
<p>这些配置可以直接设置在 <code>celery_app</code> 实例中，也可以设置在一个独立的配置模块中。</p>
<p>举个例子，如果我们要配置 Celery 的默认序列化方式，可以修改 <code>task_serializer</code> 配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery_app.conf.task_serializer = <span class="string">'json'</span></span><br></pre></td></tr></table></figure></p>
<p>你也可以通过 <code>update</code> 来一次同时更新多个配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">celery_app.conf.update(</span><br><span class="line">    task_serializer=<span class="string">'json'</span>,</span><br><span class="line">    accept_content=[<span class="string">'json'</span>],  <span class="comment"># Ignore other content</span></span><br><span class="line">    result_serializer=<span class="string">'json'</span>,</span><br><span class="line">    timezone=<span class="string">'Asia/Shanghai'</span>,</span><br><span class="line">    enable_utc=<span class="keyword">True</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>对于大点的项目，推荐使用独立的配置模块管理 Celery 配置。然后调用 <code>celery_app.config_from_object()</code> 方法告诉 Celery 实例:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery_app.config_from_object(<span class="string">'celeryconfig'</span>)</span><br></pre></td></tr></table></figure>
<p>上面的代码表示：从一个叫做 <code>celeryconfig.py</code> 的文件中读取配置，该文件可以存放在当前目录也可以是其他 Python 路径。</p>
<p>一个正经的 <code>celeryconfig.py</code> 文件也许长的是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celeryconfig.py</span></span><br><span class="line">broker_url = <span class="string">'pyamqp://'</span></span><br><span class="line">result_backend = <span class="string">'rpc://'</span></span><br><span class="line"></span><br><span class="line">task_serializer = <span class="string">'json'</span></span><br><span class="line">result_serializer = <span class="string">'json'</span></span><br><span class="line">accept_content = [<span class="string">'json'</span>]</span><br><span class="line">timezone = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">enable_utc = <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<p>为了验证我们写的这个配置文件有没有语法错误可执行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m celeryconfig</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;celery入门到使用&quot;&gt;&lt;a href=&quot;#celery入门到使用&quot; class=&quot;headerlink&quot; title=&quot;celery入门到使用&quot;&gt;&lt;/a&gt;celery入门到使用&lt;/h2&gt;&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pip install celery&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pip install redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;celery应用&quot;&gt;&lt;a href=&quot;#celery应用&quot; class=&quot;headerlink&quot; title=&quot;celery应用&quot;&gt;&lt;/a&gt;celery应用&lt;/h3&gt;&lt;p&gt;使用 celery 的前提是你得有一个 Celery 的实例。我们可以称之为 Celery 应用或者简单地说 app。该实例是用来创建 task 任务、管理 worker 等等，所以必须保证在我们得其他模块中能将它导入过来。&lt;/p&gt;
    
    </summary>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Celery" scheme="https://yuanblq.github.io/tags/Celery/"/>
    
  </entry>
  
</feed>
