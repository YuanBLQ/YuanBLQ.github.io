<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanblq.github.io/"/>
  <updated>2019-01-24T03:17:56.000Z</updated>
  <id>https://yuanblq.github.io/</id>
  
  <author>
    <name>Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQLAlchemy（二）</title>
    <link href="https://yuanblq.github.io/2019/12/20/SQLAlchemy%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2019/12/20/SQLAlchemy（二）/</id>
    <published>2019-12-20T06:40:48.000Z</published>
    <updated>2019-01-24T03:17:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote>
<p>使用 SQLAlchemy 连接数据库，创建数据表<br>使用 SQLAlchemy 实现插入数据、查询数据的操作</p>
</blockquote>
<a id="more"></a>
<p>环境：</p>
<ul>
<li>Python==3.6.8</li>
<li>SQLAlchemy==1.2.16</li>
<li>Psycopg2==2.7.6.1</li>
<li>faker==1.0.1</li>
</ul>
<h2 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h2><p>现在，我们可以直接使用 ORM 来操作数据了，先来插入一条数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user = User(name=&apos;ed&apos;, password=&apos;123456&apos;)</span><br><span class="line">&gt;&gt;&gt; ed_user.name</span><br><span class="line">&apos;ed&apos;</span><br><span class="line">&gt;&gt;&gt; ed_user.password</span><br><span class="line">&apos;123456&apos;</span><br><span class="line">&gt;&gt;&gt; str(ed_user.id)</span><br><span class="line">&apos;None&apos;</span><br></pre></td></tr></table></figure></p>
<p>虽然我们没有指定 <code>id</code> 的值，但是 <code>id</code> 仍然有个默认值，SQLAlchemy 的 <code>instrumentation</code> 会在初次访问某个属性的时候赋上默认值。如果已经赋上的值，则会直接使用之前赋予旳值。</p>
<p>这时，我们查一下数据库，看看数据有没有存进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mydb=# SELECT * FROM users;</span><br><span class="line"> id | name | password</span><br><span class="line">----+------+----------</span><br><span class="line">(0 rows)</span><br></pre></td></tr></table></figure></p>
<p>？？？</p>
<p>怎么回事？肯定是漏了哪一步。</p>
<p>SQLAlchemy 是通过 <code>Session</code> 来和数据库交流通信的。</p>
<p>有两种时机来定义 <code>Session</code>：</p>
<p>一、<code>create_engine()</code> 之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.orm import sessionmaker</span><br><span class="line">&gt;&gt;&gt; Session = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure></p>
<p>二、<code>create_engine()</code> 之前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Session = sessionmaker()</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Session.configure(bind=engine)</span><br></pre></td></tr></table></figure></p>
<p>然后在需要和数据库交流的时候，可以直接实例化 <code>Session</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session = Session()</span><br></pre></td></tr></table></figure></p>
<p>在把数据存入数据库之前，需要先将对象数据加入 <code>Session</code> 之中，可以调用 <code>Session</code> 的 <code>add()</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user = User(name=&apos;ed&apos;, password=&apos;123456&apos;)</span><br><span class="line">&gt;&gt;&gt; session.add(ed_user)</span><br></pre></td></tr></table></figure></p>
<p>这时候我们再去查数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mydb=# SELECT * FROM users;</span><br><span class="line"> id | name | password</span><br><span class="line">----+------+----------</span><br><span class="line">(0 rows)</span><br></pre></td></tr></table></figure></p>
<p>没错，数据库其实还不知道有这数据，这个时候，该对象存在于 <code>Session</code> 中，处于 pending 状态，还没有 SQL 语句发送给数据库，<code>Session</code> 只有在一定的时候才会去发送 SQL 持久化数据（这个过程称为 flush）。</p>
<p>我们现在通过 ORM 来查询下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>our_user = session.query(User).filter_by(name=<span class="string">'ed'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>our_user</span><br><span class="line">&lt;User (ed)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ed_user <span class="keyword">is</span> our_user</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
<p>Query 查询返回的结果对象居然和之前的对象一样。实际上 <code>Session</code> 发现返回的对象其实和之前对象引用的是内部映射对象中的同一行数据，所以返回的对象其实是同一个内存上的数据。</p>
<p>这个概念称为 ORM 的 <code>identity map</code>，这能确保一个 <code>Session</code> 上的所有特定行的操作都是操作的同样数据。<code>Session</code> 中指定 <code>primary key</code> 的对象，所有 SQL 查询都会只返回同样的 Python 对象，如果想新建一个已存在的 <code>primary key</code> 对象也是会直接报错的。</p>
<p>上述用户的密码太简单了，我们可以直接这样更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user.password = &apos;f8s7ccs&apos;</span><br></pre></td></tr></table></figure></p>
<p><code>Session</code> 对象还能检测到 <code>ed_user</code> 被修改了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.dirty</span><br><span class="line">IdentitySet([&lt;User (ed)&gt;])</span><br></pre></td></tr></table></figure></p>
<p>我们再往 <code>Session</code> 添加一条数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.add(User(name=&apos;n&apos;, password=&apos;123&apos;))</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过 <code>Session</code> 的 <code>new</code> 属性获知还有哪些处于 pending 状态的对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.new</span><br><span class="line">IdentitySet([&lt;User (n)&gt;])</span><br></pre></td></tr></table></figure></p>
<p>以上，所有操作的都是存在 <code>Session</code> 中的数据，现在，终于到了我们梦寐以求的时刻 —— 插入数据库。</p>
<p>通过 <code>Session</code> 的 <code>commit()</code> 方法，将所有的数据持久化进数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.commit()</span><br></pre></td></tr></table></figure></p>
<p>现在我们去数据库瞅瞅：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mydb=# SELECT * FROM users;</span><br><span class="line"> id | name | password</span><br><span class="line">----+------+----------</span><br><span class="line">  1 | ed   | f8s7ccs</span><br><span class="line">  2 | n    | 123</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure></p>
<p>完美。</p>
<p>当 <code>Session</code> 将数据插入数据库之后，这些对象属性的值都能立马获取。</p>
<p>在 <code>commit()</code> 之后，会开启一个新的事务，所以所有的内部映射对象都会重新加载。SQLAlchemy 默认会在访问本次事务的时候，从上一次事务中刷新数据。</p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>当 <code>Session</code> 对象使用 <code>query()</code> 方法时，会创建一个 <code>Query</code> 对象。</p>
<p>一、<code>query()</code> 可以接受模型类作为参数，将返回该模型类的实例对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</span><br><span class="line"><span class="meta">... </span>    print(instance.id, instance.name)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> ed</span><br><span class="line"><span class="number">2</span> n</span><br><span class="line"><span class="number">3</span> tom</span><br></pre></td></tr></table></figure></p>
<p>二、<code>query()</code> 也可以接受模型类的字段属性作为参数，返回这些属性值的 tuple：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> id, name <span class="keyword">in</span> session.query(User.id, User.name):</span><br><span class="line"><span class="meta">... </span>    print(id, name)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> ed</span><br><span class="line"><span class="number">2</span> n</span><br><span class="line"><span class="number">3</span> tom</span><br></pre></td></tr></table></figure></p>
<p>上面返回的 tuple 可以是命名 tule，也可以是 <code>KeydTuple</code>，长得和字典差不多。属性的话 key 就是属性名字，类的话就是类名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User, User.name).all():</span><br><span class="line"><span class="meta">... </span>    print(row.User, row.name)</span><br><span class="line"></span><br><span class="line">&lt;User (ed)&gt; ed</span><br><span class="line">&lt;User (n)&gt; n</span><br><span class="line">&lt;User (tom)&gt; tom</span><br></pre></td></tr></table></figure></p>
<p>当然，如果不想使用上面这些默认的名称，也可以通过 <code>label()</code> 来自定义名字：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User.name.label(<span class="string">'user_name'</span>)).all():</span><br><span class="line"><span class="meta">... </span>    print(row.user_name)</span><br><span class="line"></span><br><span class="line">ed</span><br><span class="line">n</span><br><span class="line">tom</span><br></pre></td></tr></table></figure></p>
<p>而，对于整个类名的自定义命名则需要使用 <code>aliased()</code> 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> aliased</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_alias = aliased(User, name=<span class="string">'user_alias'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(user_alias, user_alias.name).all():</span><br><span class="line"><span class="meta">... </span>    print(row.user_alias, row.name)</span><br><span class="line"></span><br><span class="line">&lt;User (ed)&gt; ed</span><br><span class="line">&lt;User (n)&gt; n</span><br><span class="line">&lt;User (tom)&gt; tom</span><br></pre></td></tr></table></figure></p>
<p><code>Query</code> 的 <code>LIMIT</code> 和 <code>OFFSET</code> 操作，都可以直接使用 Python 的切片实现，同时还可以搭配 <code>ORDER_BY</code> 使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u <span class="keyword">in</span> session.query(User).order_by(-User.id)[<span class="number">1</span>:<span class="number">3</span>]:</span><br><span class="line"><span class="meta">... </span>    print(u.id)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>过滤操作有两种：</p>
<p>一、可以通过 <code>filter_by()</code> 传入关键字参数来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for u in session.query(User).filter_by(name=&apos;tom&apos;):</span><br><span class="line">...     print(u.id)</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure></p>
<p>二、通过 <code>filter()</code> 传入类的映射属性实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for u in session.query(User).filter(User.name==&apos;tom&apos;):</span><br><span class="line">...     print(u.id)</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure></p>
<p>可以看见，第二种过滤方法更灵活。其传入的是 Python 的操作符。</p>
<p>常用的操作符有以下几种：</p>
<ul>
<li>equals：<code>query.filter(User.name==&#39;tom&#39;)</code></li>
<li>not equals：<code>query.filter(User.name!=&#39;tom&#39;)</code></li>
<li>like：<code>query.filter(User.name.like(&#39;%to%&#39;))</code></li>
<li>ilike：<code>query.filter(User.name.ilike(&#39;%to%&#39;))</code></li>
<li>in：<ul>
<li><code>query.filter(User.name.in_([&#39;tom&#39;, &#39;ed&#39;]))</code></li>
<li><code>query.filter(User.name.in_(session.query(User.name).filter(User.name.like(&#39;%to%&#39;)))</code></li>
</ul>
</li>
<li>not in：<code>query.filter(~User.name.in_([&#39;tom&#39;, &#39;ed&#39;]))</code></li>
<li>is null：<ul>
<li><code>query.filter(User.name==None)</code></li>
<li><code>query.filter(User.name.is_(None))</code></li>
</ul>
</li>
<li>is not null：<ul>
<li><code>query.filter(User.name!=None)</code></li>
<li><code>query.filter(User.name.isnot(None))</code></li>
</ul>
</li>
<li>and：<code>from sqlalchemy import and_</code><ul>
<li><code>query.filter(and_(User.name==&#39;tom&#39;, User.id==2))</code></li>
<li><code>query.filter(User.name==&#39;tom&#39;, User.id==2)</code></li>
<li><code>query.filter(User.name==&#39;tom&#39;).filter(User.id==2)</code></li>
</ul>
</li>
<li>or：<code>from sqlalchemy import or_</code><ul>
<li><code>query.filter(or_(User.name==&#39;tom&#39;, User.id==2))</code></li>
</ul>
</li>
<li>match：<code>query.filter(User.name.match(&#39;tom&#39;))</code></li>
</ul>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>一般就分两种：对象列表、对象：</p>
<ul>
<li><code>all()</code>：返回对象列表</li>
<li><code>first()</code>：返回第一个对象</li>
<li><code>one()</code>：返回一个对象，如果该 query 为空或者 不止一个对象都会报错</li>
<li><code>one_or_none()</code>：返回一个对象，query 为空返回 None，多个对象还是会报错</li>
<li><code>scalar()</code>：返回一个对象，会先调用 <code>one()</code>，获取对象，然后返回第一列的数据，query 为空返回 None，多个对象报错</li>
</ul>
<h2 id="使用字符SQL"><a href="#使用字符SQL" class="headerlink" title="使用字符SQL"></a>使用字符SQL</h2><p><code>Query</code> 通过 <code>text()</code> 方法，可以接受文字字符串，大部分的 <code>Query</code> 方法都支持：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> session.query(User).\</span><br><span class="line"><span class="meta">... </span>            filter(text(<span class="string">'id&lt;224'</span>)).\</span><br><span class="line"><span class="meta">... </span>            order_by(text(<span class="string">'id'</span>)).all():</span><br><span class="line"><span class="meta">... </span>    print(user.name)</span><br><span class="line"></span><br><span class="line">ed</span><br><span class="line">n</span><br><span class="line">tom</span><br></pre></td></tr></table></figure></p>
<p><code>text()</code> 里面还可以传递变量。变量名前面只需加上 <code>:</code>，然后在配合 <code>params()</code> 方法即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(text(<span class="string">'id&lt;:value and name=:name'</span>)).\</span><br><span class="line"><span class="meta">... </span>        params(value=<span class="number">224</span>, name=<span class="string">'tom'</span>).order_by(User.id).one()</span><br><span class="line"></span><br><span class="line">&lt;User (tom)&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果想直接使用完整的 SQL 语句可以在 <code>from_statement()</code> 中使用 <code>text()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).from_statement(</span><br><span class="line"><span class="meta">... </span>            text(<span class="string">"SELECT * FROM users where name=:name"</span>)).\</span><br><span class="line"><span class="meta">... </span>            params(name=<span class="string">'tom'</span>).all()</span><br><span class="line"></span><br><span class="line">[&lt;User (tom)&gt;]</span><br></pre></td></tr></table></figure></p>
<p>另外，可能会有这么一种情况：当我们处理复杂案例时，可能会碰到多个映射类有重复的列名，或者还会有些匿名的 ORM 结构。我们可以使用 <code>TextClause.columns()</code> 方法指定具体列所对应的 ORM 映射：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = text(<span class="string">'SELECT name, id, password FROM user where name=:name'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = stmt.columns(User.name, User.id, User.password)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).from_statement(stmt).params(name=<span class="string">'ed'</span>).all()</span><br><span class="line"></span><br><span class="line">[&lt;User (ed)&gt;]</span><br></pre></td></tr></table></figure></p>
<h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p>简单的 <code>Query</code> 计数可以直接使用 <code>count()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.like(<span class="string">'%ed'</span>)).count()</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>但是这段语句会翻译成如下的 SQL 命令去执行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">AS</span> count_1</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> users.id <span class="keyword">AS</span> users_id,</span><br><span class="line">                users.name <span class="keyword">AS</span> users_name,</span><br><span class="line">                users.fullname <span class="keyword">AS</span> users_fullname,</span><br><span class="line">                users.password <span class="keyword">AS</span> users_password</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">WHERE</span> users.name <span class="keyword">LIKE</span> ?) <span class="keyword">AS</span> anon_1</span><br><span class="line">(<span class="string">'%ed'</span>,)</span><br></pre></td></tr></table></figure></p>
<p>SQLAlchemy 总是会把我们的查询作为子集，然后再从这里面计算行数。</p>
<p>有时候我们可能需要更明确的指定需要计数的内容，<code>func.count()</code> 表达式就可以完成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(User.name), User.name).group_by(User.name).all()</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="string">'n'</span>), (<span class="number">1</span>, <span class="string">'tom'</span>), (<span class="number">1</span>, <span class="string">'ed'</span>)]</span><br></pre></td></tr></table></figure></p>
<p>如果我们想实现简单的 <code>SELECT count(*) FROM table</code>，可以这么做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(<span class="string">'*'</span>)).select_from(User).scalar()</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>还可以再简化，当我们直接以 <code>User</code> 主键来计数，<code>select_from()</code> 都可以省略不写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(User.id)).scalar()</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 SQLAlchemy 连接数据库，创建数据表&lt;br&gt;使用 SQLAlchemy 实现插入数据、查询数据的操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SQLAlchemy" scheme="https://yuanblq.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>Pandas合并操作（merge）</title>
    <link href="https://yuanblq.github.io/2019/03/07/Pandas%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%EF%BC%88merge%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2019/03/07/Pandas合并操作（merge）/</id>
    <published>2019-03-07T15:36:20.000Z</published>
    <updated>2019-03-07T15:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas 常用的合并方法有 <code>join</code>，<code>merge</code>，<code>concat</code> 三种，本文我们来看看 <code>merge</code> 的用法。</p>
<a id="more"></a>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>函数签名：</p>
<p><code>left_data.merge(right_data, how=&#39;inner&#39;, on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=(&#39;_x&#39;, &#39;_y&#39;), copy=True, indicator=False, validate=None)</code></p>
<p><code>merge</code> 操作和数据库中的 <code>join</code> 操作类似。</p>
<p><code>merge</code> 操作的可以是索引也可以是列。如果操作的是列，那么会忽略掉 DataFrame 的索引，否则无论操作的是索引对索引还是索引对列，索引都会传递过去的。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>看过之前那篇 <code>Pandas合并操作 — join</code> 的话，相信 <code>merge</code> 里面的大部分参数大家都已经很熟悉了。</p>
<h4 id="right-data"><a href="#right-data" class="headerlink" title="right_data"></a>right_data</h4><p>和 <code>left_data</code> 进行合并操作的 DataFrame 或者命名的 Series。</p>
<h4 id="how"><a href="#how" class="headerlink" title="how"></a>how</h4><p>合并的方式：left、right、outer、inner。</p>
<ul>
<li>left：使用 <code>left_data</code> 的键执行合并操作，类似于 SQL 的 <code>left outer join</code>，按键的顺序排序。</li>
<li>right：使用 <code>right_data</code> 的键执行合并操作，类似于 SQL 的 <code>right outer join</code>，按键的顺序排序。</li>
<li>outer：使用左右两侧数据所有的键进行合并操作，类似于 SQL 的 <code>full outer join</code>，按字典顺序排序。</li>
<li>inner：使用两侧数据键的交集进行合并操作，类似 SQL 的 <code>inner join</code>，按左侧数据的键顺序排序。</li>
</ul>
<h4 id="on"><a href="#on" class="headerlink" title="on"></a>on</h4><p>可接收单个字符串（也即是只按这列/索引合并）也可以接收一个列表（按这几个列/索引合并）。</p>
<p>不使用默认索引，而是按照 <code>on</code> 参数指定的列名或者索引进行合并操作。<code>on</code> 指定的名字必须在左右两侧的数据中都能找到，不然潘大叔会傻掉的，直接把错误扔给你去处理。</p>
<h4 id="left-on"><a href="#left-on" class="headerlink" title="left_on"></a>left_on</h4><p><code>left_data</code> 的哪个或哪些列/索引用来作为合并操作的基准。</p>
<h4 id="right-on"><a href="#right-on" class="headerlink" title="right_on"></a>right_on</h4><p><code>right_data</code> 的哪个或哪些列/索引用来作为合并操作的基准。</p>
<p><strong><code>left_on</code> 和 <code>right_on</code> 需要搭配使用，上面的 <code>on</code> 参数是左右同名的列名或索引，如果想操作的左右两个数据的列名或者索引不一样，就需要使用 <code>left_on</code> 和 <code>right_on</code> 参数。</strong></p>
<h4 id="left-index"><a href="#left-index" class="headerlink" title="left_index"></a>left_index</h4><p>默认 <code>False</code>，是否使用 <code>left_data</code> 的索引来执行合并操作。如果是多层索引 <code>right_data</code> 也需要有同样层数的多级索引</p>
<h4 id="right-index"><a href="#right-index" class="headerlink" title="right_index"></a>right_index</h4><p>默认 <code>False</code>，是否使用 <code>right_data</code> 的索引来执行合并操作。如果是多层索引 <code>left_data</code> 也需要有同样层数的多级索引</p>
<p><strong>如果 <code>left_index=True</code> 或者 <code>right_index=True</code>，那么另一边的数据要么也使用索引，要么也可以使用上面的 <code>left_on</code> 或者 <code>right_on</code> 来指定对应的列或索引。</strong></p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>是否按照 key 在字典中的字母顺序对结果排序（默认 <code>False</code>）。</p>
<h4 id="suffixes"><a href="#suffixes" class="headerlink" title="suffixes"></a>suffixes</h4><p>合并的时候如果有相同的列名，是否通过增加后缀区分（默认 <code>(&#39;_x&#39;, &#39;_y&#39;)</code>）。</p>
<p><code>(False, False)</code> 表示如果有重复的列名就报错。</p>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>默认 <code>True</code>，如果设置为 <code>False</code>，会在操作的过程中尽可能的减少复制操作。</p>
<h4 id="indicator"><a href="#indicator" class="headerlink" title="indicator"></a>indicator</h4><p>默认 <code>False</code>，如果为 <code>True</code>，会增加一列叫做 <code>_merge</code> 的数据，表示每一行进行合并操作的类型。</p>
<p>如果设置为字符串，则用这个作为新增的列名。</p>
<p>一共有这几个合并类型：</p>
<ul>
<li><code>left_only</code>，最终 key 只存在于 <code>left_data</code></li>
<li><code>right_only</code>，最终 key 只存在于 <code>right_data</code></li>
<li><code>both</code>，最终 key 在 <code>left_data</code> 和 <code>right_data</code> 中都有</li>
</ul>
<h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><p>检测合并的类型：</p>
<ul>
<li><code>one_to_one</code> 或者 <code>1:1</code>，验证 key 在左右两侧数据中都是唯一的</li>
<li><code>one_to_many</code> 或者 <code>1:m</code>，验证 key 在左侧数据中是唯一的</li>
<li><code>many_to_one</code> 或者 <code>m:1</code>，验证 key 在右侧数据中是唯一的</li>
<li><code>many_to_many</code> 或者 <code>m:m</code>，不做验证</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回合并后的数据。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = pd.DataFrame(&#123;&apos;ID&apos;: [1, 2, 3, 4, 5], &apos;name&apos;: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&#125;)</span><br><span class="line">&gt;&gt;&gt; b = pd.DataFrame(&#123;&apos;ID&apos;: [2, 3, 4, 5], &apos;name&apos;: [&apos;p2&apos;, &apos;p3&apos;, &apos;p4&apos;, &apos;e&apos;]&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">   ID name</span><br><span class="line">0   1    a</span><br><span class="line">1   2    b</span><br><span class="line">2   3    c</span><br><span class="line">3   4    d</span><br><span class="line">4   5    e</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b</span><br><span class="line">   ID name</span><br><span class="line">0   2   p2</span><br><span class="line">1   3   p3</span><br><span class="line">2   4   p4</span><br><span class="line">3   5    e</span><br></pre></td></tr></table></figure>
<h4 id="on-1"><a href="#on-1" class="headerlink" title="on"></a>on</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.merge(b)</span><br><span class="line">   ID name</span><br><span class="line">0   5    e</span><br></pre></td></tr></table></figure>
<p>如果不指定 <code>on</code>、<code>left_on</code>、<code>right_on</code>、<code>left_index</code>、<code>right_index</code>，那么默认会把左右两侧数据所有相同的列名作为 merge key，必须所有相同的列对应的值都一样才可以。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = pd.DataFrame(&#123;&apos;ID&apos;: [2, 3, 4, 5], &apos;city&apos;: [&apos;p2&apos;, &apos;p3&apos;, &apos;p4&apos;, &apos;e&apos;]&#125;)</span><br><span class="line">&gt;&gt;&gt; a.merge(b)</span><br><span class="line">   ID name city</span><br><span class="line">0   2    b   p2</span><br><span class="line">1   3    c   p3</span><br><span class="line">2   4    d   p4</span><br><span class="line">3   5    e    e</span><br></pre></td></tr></table></figure>
<p>如上，如果只有一列 <code>ID</code> 名字相同，则只合并 <code>ID</code> 对应值相同的行。</p>
<h4 id="left-on-right-on"><a href="#left-on-right-on" class="headerlink" title="left_on / right_on"></a>left_on / right_on</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.merge(b, left_on=&apos;name&apos;, right_on=&apos;city&apos;)</span><br><span class="line">   ID_x name  ID_y city</span><br><span class="line">0     5    e     5    e</span><br></pre></td></tr></table></figure>
<p>以 <code>a</code> 的 <code>name</code> 列和 <code>b</code> 的 <code>city</code> 列作合并操作，因为只有值为 <code>e</code> 的数据是相同的，所以最后就剩下了这么一行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas 常用的合并方法有 &lt;code&gt;join&lt;/code&gt;，&lt;code&gt;merge&lt;/code&gt;，&lt;code&gt;concat&lt;/code&gt; 三种，本文我们来看看 &lt;code&gt;merge&lt;/code&gt; 的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas合并操作（join）</title>
    <link href="https://yuanblq.github.io/2019/02/14/Pandas%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%EF%BC%88join%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2019/02/14/Pandas合并操作（join）/</id>
    <published>2019-02-14T13:34:17.000Z</published>
    <updated>2019-02-14T13:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas 常用的合并方法有 <code>join</code>，<code>merge</code>，<code>concat</code> 三种，本文我们来看看 <code>join</code> 的用法。</p>
<a id="more"></a>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>函数签名：<br><code>One_DataFrame.join(other, on=None, how=&#39;left&#39;, lsuffix=&#39;&#39;, rsuffix=&#39;&#39;, sort=False)</code></p>
<p><code>join</code> 按照索引来合并多个 <code>DataFrame</code>， 因此十分地非常高效。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>我们来一个个看看这些参数都是有啥用的。</p>
<h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><p>该参数位，可以传递 <code>DataFrame</code>、<code>Series</code>、<code>DataFrame</code>列表。</p>
<p>如果传递的是 <code>Series</code>，则必须指定它的 <code>name</code> 属性，用作 join 时候的列名。</p>
<h5 id="on"><a href="#on" class="headerlink" title="on"></a>on</h5><p>可选参数，<code>str</code> 或者 <code>str</code> 组成的 <code>list</code></p>
<p>比如说我 <code>on=name</code>，那么 <code>One_DataFrame</code> 的 <code>name</code> 列当作索引和 <code>other</code> 的索引（这个索引就不一定是 <code>name</code> 了，本来是什么就是什么）来进行 join 操作。如果指定的是列表，那必须 <code>other</code> 也支持相应的多层索引。</p>
<h5 id="how"><a href="#how" class="headerlink" title="how"></a>how</h5><p>指定具体的 join 操作方式。</p>
<ul>
<li>left：默认值。使用 <code>One_DataFrame</code> 的索引，或者 <code>One_DataFrame</code> 的 <code>on</code> 作索引</li>
<li>right：使用 <code>other</code> 的索引，或者 <code>other</code> 的 <code>on</code> 作索引</li>
<li>outer：使用两者所有指定的索引，并按字典的顺序排序</li>
<li>inner：使用两者索引交集作为索引，并按照 <code>One_DataFrame</code> 的索引顺序</li>
</ul>
<h5 id="lsuffix"><a href="#lsuffix" class="headerlink" title="lsuffix"></a>lsuffix</h5><p>如果列名重复，则 <code>One_DataFrame</code> 的重复列名加上这个后缀。</p>
<h5 id="rsuffix"><a href="#rsuffix" class="headerlink" title="rsuffix"></a>rsuffix</h5><p>如果列名重复，则 <code>other</code> 的重复列名加上这个后缀。</p>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>如果为 <code>True</code>，对结果按照字典顺序排序，如果为 <code>False</code>，则按照 <code>how</code> 关键字所指定的排序。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = pd.DataFrame(&#123;&apos;ID&apos;: [1, 2, 3, 4, 5], &apos;name&apos;: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]&#125;)</span><br><span class="line">&gt;&gt;&gt; b = pd.DataFrame(&#123;&apos;ID&apos;: [2, 3, 4, 6], &apos;city&apos;: [&apos;p2&apos;, &apos;p3&apos;, &apos;p4&apos;, &apos;p6&apos;]&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">   ID name</span><br><span class="line">0   1    a</span><br><span class="line">1   2    b</span><br><span class="line">2   3    c</span><br><span class="line">3   4    d</span><br><span class="line">4   5    e</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b</span><br><span class="line">   ID city</span><br><span class="line">0   2   p2</span><br><span class="line">1   3   p3</span><br><span class="line">2   4   p4</span><br><span class="line">3   6   p6</span><br></pre></td></tr></table></figure>
<h5 id="最基本的按照默认索引将两个-DataFrame-合并："><a href="#最基本的按照默认索引将两个-DataFrame-合并：" class="headerlink" title="最基本的按照默认索引将两个 DataFrame 合并："></a>最基本的按照默认索引将两个 DataFrame 合并：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.join(b, rsuffix=&apos;_r&apos;)</span><br><span class="line">   ID name  ID_r city</span><br><span class="line">0   1    a   2.0   p2</span><br><span class="line">1   2    b   3.0   p3</span><br><span class="line">2   3    c   4.0   p4</span><br><span class="line">3   4    d   6.0   p6</span><br><span class="line">4   5    e   NaN  NaN</span><br></pre></td></tr></table></figure>
<p>合并之后，原来列名不一样的数据直接拼进来了，而列名一样的则通过 <code>lsuffix</code> 或者 <code>rsuffix</code> 在原列名后加上了后缀。</p>
<h5 id="通过指定索引合并"><a href="#通过指定索引合并" class="headerlink" title="通过指定索引合并"></a>通过指定索引合并</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.set_index(&apos;ID&apos;).join(b.set_index(&apos;ID&apos;))</span><br><span class="line">   name city</span><br><span class="line">ID</span><br><span class="line">1     a  NaN</span><br><span class="line">2     b   p2</span><br><span class="line">3     c   p3</span><br><span class="line">4     d   p4</span><br><span class="line">5     e  NaN</span><br></pre></td></tr></table></figure>
<p>这是 DataFrame a 在左边，我们再看看 DataFrame b 在左边的情形：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b.set_index(&apos;ID&apos;).join(a.set_index(&apos;ID&apos;))</span><br><span class="line">   city name</span><br><span class="line">ID</span><br><span class="line">2    p2    b</span><br><span class="line">3    p3    c</span><br><span class="line">4    p4    d</span><br><span class="line">6    p6  NaN</span><br></pre></td></tr></table></figure></p>
<p>发现了没有，<code>join</code> 是以左边（其实是 how 指定的，这里 how 默认为 left）索引作为标准，剔除不存在基准索引的数据，别的 DataFrame 如果没有对应数据就以对应空值替代。</p>
<p>我们让 <code>how=right</code> &amp; a 依然在左边来试验一下对不对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.set_index(&apos;ID&apos;).join(b.set_index(&apos;ID&apos;), how=&apos;right&apos;)</span><br><span class="line">   name city</span><br><span class="line">ID</span><br><span class="line">2     b   p2</span><br><span class="line">3     c   p3</span><br><span class="line">4     d   p4</span><br><span class="line">6   NaN   p6</span><br></pre></td></tr></table></figure></p>
<p>怎么样，没错吧。</p>
<h5 id="通过指定列来合并"><a href="#通过指定列来合并" class="headerlink" title="通过指定列来合并"></a>通过指定列来合并</h5><p>上面我们通过 <code>set_index()</code> 先设置了索引，再按照索引来合并的，还可以直接按指定列来合并：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.join(b, on=&apos;ID&apos;, rsuffix=&apos;_r&apos;)</span><br><span class="line">   ID name  ID_r city</span><br><span class="line">0   1    a   3.0   p3</span><br><span class="line">1   2    b   4.0   p4</span><br><span class="line">2   3    c   6.0   p6</span><br><span class="line">3   4    d   NaN  NaN</span><br><span class="line">4   5    e   NaN  NaN</span><br></pre></td></tr></table></figure></p>
<p>因为默认 how=left，所以 on 指定的是以 a 的 ID 列作为 a 的索引，然后和 b 的默认索引（序号）进行合并。</p>
<p>也就是说 <code>on</code> 参数还是和 <code>how</code> 参数关联的，<code>how</code> 指定哪边，<code>on</code> 参数就是指那边的列作为索引，另外一边不动。</p>
<p><strong>注意：</strong><code>on</code> 指定的列数据类型需要和另一个索引的数据类型相同。</p>
<h5 id="how-inner"><a href="#how-inner" class="headerlink" title="how=inner"></a>how=inner</h5><p>how=left/right 都会把两侧的数据都拼接在一起，取的是并集，当 <code>how=inner</code> 时，取的就是交集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.set_index(&apos;ID&apos;).join(b.set_index(&apos;ID&apos;), how=&apos;inner&apos;)</span><br><span class="line">   name city</span><br><span class="line">ID</span><br><span class="line">2     b   p2</span><br><span class="line">3     c   p3</span><br><span class="line">4     d   p4</span><br></pre></td></tr></table></figure></p>
<p>a, b 都有 ID=2,3,4 的，所以最后只剩下了这几个数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas 常用的合并方法有 &lt;code&gt;join&lt;/code&gt;，&lt;code&gt;merge&lt;/code&gt;，&lt;code&gt;concat&lt;/code&gt; 三种，本文我们来看看 &lt;code&gt;join&lt;/code&gt; 的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy（一）</title>
    <link href="https://yuanblq.github.io/2018/12/13/SQLAlchemy%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/12/13/SQLAlchemy（一）/</id>
    <published>2018-12-13T06:27:52.000Z</published>
    <updated>2019-01-24T03:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote>
<p>使用 SQLAlchemy 连接数据库，创建数据表</p>
</blockquote>
<a id="more"></a>
<p>环境：</p>
<ul>
<li>Python==3.6.8</li>
<li>SQLAlchemy==1.2.16</li>
<li>Psycopg2==2.7.6.1</li>
</ul>
<h2 id="连接与创建"><a href="#连接与创建" class="headerlink" title="连接与创建"></a>连接与创建</h2><p>使用 docker 启动一个 postgres 容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run --rm --name one-postgres -p 5432:5432 -e POSTGRES_PASSWORD=123456 -d postgres</span><br></pre></td></tr></table></figure></p>
<p>进入容器，使用命令创建一个名叫 mydb 的数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker exec -it one-postgres bash</span><br><span class="line"># createdb -U postgres mydb</span><br></pre></td></tr></table></figure></p>
<p>现在可以访问下刚创建的数据库，验证有没有创建成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># psql -U postgres mydb</span><br></pre></td></tr></table></figure></p>
<p>如果一切顺利，会返回该信息，并成功进入 mydb 数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psql (11.1 (Debian 11.1-1.pgdg90+1))</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line"></span><br><span class="line">mydb=#</span><br></pre></td></tr></table></figure></p>
<p>最后一行也可能是（意味着当前操作数据库用户非超级用户）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydb=&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="ORM-连接"><a href="#ORM-连接" class="headerlink" title="ORM 连接"></a>ORM 连接</h2><p>要想使用 ORM，必须先实现类与表的映射。</p>
<p>在 SQLAlchemy 中，使用 Declarative 系统来处理这种映射关系。一般情况，我们只需创建一个基于此的一个基类，然后描述我们自己类与表的关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Base = declarative_base()</span><br></pre></td></tr></table></figure></p>
<p>这个 <code>Base</code> 就是我们要继承的基类，现在我们创建一个 User 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class User(Base):</span><br><span class="line">    __tablename__ = &apos;users&apos;</span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=True)</span><br><span class="line">    name = Column(String(64), nullable=False, index=True)</span><br><span class="line">    password = Column(String(64))</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User (%s)&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>__tablename__</code> 是必须的，另外还需要一个为 <code>primary key</code> 的 <code>Column</code>。</p>
<blockquote>
<p><strong>Note</strong></p>
<p>QLAlchemy 的 <code>Base</code> 基类不会对映射表做任何约束，反而鼓励使用者根据实际情况自定义最小基类，比如可以这么做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; from sqlalchemy.ext.declarative import declared_attr</span><br><span class="line">&gt; </span><br><span class="line">&gt; class MyMixin(object):</span><br><span class="line">&gt; </span><br><span class="line">&gt;     @declared_attr</span><br><span class="line">&gt;     def __tablename__(cls):</span><br><span class="line">&gt;         return cls.__name__.lower()</span><br><span class="line">&gt; </span><br><span class="line">&gt;     __table_args__ = &#123;&apos;mysql_engine&apos;: &apos;InnoDB&apos;&#125;</span><br><span class="line">&gt;     __mapper_args__= &#123;&apos;always_refresh&apos;: True&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     id =  Column(Integer, primary_key=True)</span><br><span class="line">&gt; </span><br><span class="line">&gt; class MyModel(MyMixin, Base):</span><br><span class="line">&gt;     name = Column(String(1000))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>因为在 SQLAlchemy 的 <code>Base</code> 中没有定义任何 <code>__tablename__</code>、<code>__table_args__</code> 等等这些约束，所以在继承的时候顺讯没有关系，也可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; class MyModel(Base, MyMixin):</span><br><span class="line">&gt;     name = Column(String(1000))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>但是如果继承的两个类含有同样的属性，那么根据 Python 该属性由写在前面的那个类决定。</p>
</blockquote>
<p>当我们的类构建完之后，Declarative 系统会把所有的 <code>Column</code> 对象替换成叫 <code>desciptors</code> 的特殊 Python 访问器。这个过程就叫做 <code>instrumentation</code>。</p>
<p>之后，该映射类就能给我们提供从数据库中持久化和载入 <code>column</code> 的 SQL 上下文。</p>
<p>除此之外，该映射类还是一个普通的 Python 类，我们依旧可以在里面定义属性，方法等等。</p>
<p>在 SQLAlchemy 的 <code>Declarative</code> 系统对定义的映射类描述阶段，会创建一个 <code>Table</code> 对象并和这个 <code>Table</code> 对象一起构建一个 <code>Mapper</code> 对象。这个 <code>Mapper</code> 对象一般不会用到，但当我们需要的时候，能从中获取大量的映射信息。</p>
<p><code>Table</code> 对象是 <code>MetaData</code> 集合的一员。使用 <code>Declarative</code> 系统的时候，<code>MetaData</code> 对象属性能直接通过 <code>.metadata</code> 属性访问。</p>
<p>现在，我们使用 SQLALchemy 连接数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy import create_engine</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; engine = create_engine(&apos;postgresql+psycopg2://postgres:123456@localhost:5432/mydb&apos;)</span><br></pre></td></tr></table></figure></p>
<p>然后调用 <code>MetaData.create_all()</code> 方法，传入 <code>Engine</code> 对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure></p>
<p>我们去数据库看看有没有创建对应的表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mydb=# \dt</span><br><span class="line">         List of relations</span><br><span class="line"> Schema | Name  | Type  |  Owner</span><br><span class="line">--------+-------+-------+----------</span><br><span class="line"> public | users | table | postgres</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure></p>
<p>查看对应的表结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mydb=# \d users</span><br><span class="line">                                    Table &quot;public.users&quot;</span><br><span class="line">  Column  |         Type          | Collation | Nullable |              Default</span><br><span class="line">----------+-----------------------+-----------+----------+-----------------------------------</span><br><span class="line"> id       | integer               |           | not null | nextval(&apos;users_id_seq&apos;::regclass)</span><br><span class="line"> name     | character varying(64) |           | not null |</span><br><span class="line"> password | character varying(64) |           |          |</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;users_pkey&quot; PRIMARY KEY, btree (id)</span><br><span class="line">    &quot;ix_users_name&quot; btree (name)</span><br></pre></td></tr></table></figure></p>
<p>成功！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 SQLAlchemy 连接数据库，创建数据表&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SQLAlchemy" scheme="https://yuanblq.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——数组</title>
    <link href="https://yuanblq.github.io/2018/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
    <id>https://yuanblq.github.io/2018/11/27/数据结构——数组/</id>
    <published>2018-11-27T02:32:21.000Z</published>
    <updated>2018-11-27T02:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在绝大多数的变成语言中都会有数组这么一种最基础的数据结构，而且基本都是从 0 开始编号的。</p>
<p><strong>为什么要从 0 开始编号而不是 1 呢？</strong></p>
<a id="more"></a>
<h3 id="如何实现随机访问"><a href="#如何实现随机访问" class="headerlink" title="如何实现随机访问"></a>如何实现随机访问</h3><p>数组，是一种<code>线性表数据结构</code>。它用一组<code>连续的内存空间</code>，来存储一组具有<code>相同类型的数据</code>。</p>
<p><code>线性表结构</code>，限制了数组只有前后两个方向。这个时候，再加上<code>连续的内存空间</code>和<code>相同的数据类型</code>这两个特点，这就使数组拥有了<code>随机访问</code>的特性。但与此同时，也给数组在删除、插入一个数据的时候带来了麻烦。</p>
<p>假设有一个长度为 10 的 int 类型的数组 <code>int[] a = new int[10]</code>，在内存中我们给分配了这样一块内存空间 1000~1039，内存块的首地址 base_address=1000。</p>
<p>计算机是通过内存地址来访问到这块内存里的数据。对于上面数组这块内存，我们很容易通过下面这个公式，使用下标访问任意一个数组元素：</p>
<p><code>a[i]_address = base_address + i * data_type_size</code></p>
<p><code>data_type_size</code> 表示数组中每个元素的大小，所举的例子中是 int 类型，所以 <code>data_type_size</code> 大小就为 4 个字节。</p>
<p>通过这个公式，我们很容易就知道了为什么数组能实现随机访问。另外，如果我们要访问第一个元素的时候，i 的值为 0，这就是为什么下标基本都是从 0 开始的原因。</p>
<p>可能有人会说，把公式变成 <code>a[i]_address = base_address + (i - 1) * data_type_size</code>，这样下标不就可以按照人类数数的习惯，直接从 1 开始了吗。但这会有一个小问题，就是多了的 <code>-1</code> 操作是有效率损耗的，毕竟多做了一步操作。</p>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>上面我们提到，由于数组的连续特性，导致插入操作会比较麻烦，有什么改进的办法吗？</p>
<p>比如我们现在要在第 k 个位置插入一个元素，需要把 k 位以后的所有数据都依次往后挪。假如一开始一共有 n 个元素，那么需要移动 n-k 个元素。最好的情况是直接在数组末尾增加一个元素，此时的时间复杂度很明显是 O(1)。最坏情况就是在数组开头插入一个元素，这时时间复杂度为 O(n)。因为每个位置插入的元素的概率是一样的，所以平均时间复杂度： (1+2+..+n)/n，为 O(n) 的时间复杂度。</p>
<p>如果我们对于数组元素的顺序没有要求，那么在 k 位置插入元素可以这么优化：先把原来第 k 位的元素移动到数组末尾，然后在 k 位插入新的数据。这样能把时间复杂度将为 O(1)。快排中就用到了这个思想。</p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作和插入操作类似，为了内存的连续性，也需要搬迁数据。</p>
<p>如果删除的是末尾数据，则是最好的情况，时间复杂度为 O(1)；如果删除的是头部数据，则是最坏情况，时间复杂度为 O(n)；平均复杂度同样也是 O(n)。</p>
<p>在某些特定的场景下，如果对数组数据的连续性没有要求，那么可以将多次的删除操作合并起来。大概流程是这样的：当我们想要删除某个元素的时候，可以先把这个元素做个标记，表示已经删除了，但实际还未删除（软删除操作），然后等攒到一定数量或者存储空间不够之后之后再统一一起删除。</p>
<p>这个听起来不就是标记清除法的核心思想吗。算法与数据结构的魅力就在于此，其背后的思想和处理技巧这些东西才是最有价值的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在绝大多数的变成语言中都会有数组这么一种最基础的数据结构，而且基本都是从 0 开始编号的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要从 0 开始编号而不是 1 呢？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Algorithms" scheme="https://yuanblq.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（四）</title>
    <link href="https://yuanblq.github.io/2018/11/25/Pandas%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/25/Pandas（四）/</id>
    <published>2018-11-25T06:36:44.000Z</published>
    <updated>2018-11-26T14:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（四）</p>
</blockquote>
<a id="more"></a>
<h2 id="数据处理兼容性"><a href="#数据处理兼容性" class="headerlink" title="数据处理兼容性"></a>数据处理兼容性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index = pd.Index(data=[<span class="string">"Tom"</span>, <span class="string">"Bob"</span>, <span class="string">"Mary"</span>, <span class="string">"James"</span>, <span class="string">"Andy"</span>, <span class="string">"Alice"</span>], name=<span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">18</span>, <span class="number">30</span>, np.nan, <span class="number">40</span>, np.nan, <span class="number">30</span>],</span><br><span class="line">    <span class="string">"city"</span>: [<span class="string">"Bei Jing "</span>, <span class="string">"Shang Hai "</span>, <span class="string">"Guang Zhou"</span>, <span class="string">"Shen Zhen"</span>, np.nan, <span class="string">" "</span>],</span><br><span class="line">    <span class="string">"sex"</span>: [<span class="keyword">None</span>, <span class="string">"male"</span>, <span class="string">"female"</span>, <span class="string">"male"</span>, np.nan, <span class="string">"unknown"</span>],</span><br><span class="line">    <span class="string">"birth"</span>: [<span class="string">"2000-02-10"</span>, <span class="string">"1988-10-17"</span>, <span class="keyword">None</span>, <span class="string">"1978-08-08"</span>, np.nan, <span class="string">"1988-10-17"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将出生日期转为时间戳</span></span><br><span class="line">user_info[<span class="string">"birth"</span>] = pd.to_datetime(user_info.birth)</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Bei Jing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shang Hai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guang Zhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shen Zhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-17</td>
</tr>
</tbody>
</table>
<p>之前说过，如果要处理 Series 中的每一个元素，我们可以使用 <code>map</code> 或 <code>apply</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有城市都转成小写</span></span><br><span class="line">user_info.city.map(<span class="keyword">lambda</span> x: x.lower())</span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-3-a124a99b1001&gt; in &lt;module&gt;
      1 # 将所有城市都转成小写
----&gt; 2 user_info.city.map(lambda x: x.lower())


~/.pyenv/versions/3.6.3/envs/Note/lib/python3.6/site-packages/pandas/core/series.py in map(self, arg, na_action)
   2996         &quot;&quot;&quot;
   2997         new_values = super(Series, self)._map_values(
-&gt; 2998             arg, na_action=na_action)
   2999         return self._constructor(new_values,
   3000                                  index=self.index).__finalize__(self)


~/.pyenv/versions/3.6.3/envs/Note/lib/python3.6/site-packages/pandas/core/base.py in _map_values(self, mapper, na_action)
   1002 
   1003         # mapper is a function
-&gt; 1004         new_values = map_f(values, mapper)
   1005 
   1006         return new_values


pandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()


&lt;ipython-input-3-a124a99b1001&gt; in &lt;lambda&gt;(x)
      1 # 将所有城市都转成小写
----&gt; 2 user_info.city.map(lambda x: x.lower())


AttributeError: &apos;float&apos; object has no attribute &apos;lower&apos;
</code></pre><p>居然报错了，那是因为 <code>np.nan</code> 属于 float 类型。</p>
<p>这时候 <code>str</code> 属性的作用就凸显出来了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是转换成小写</span></span><br><span class="line">user_info.city.str.lower()</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       bei jing 
Bob      shang hai 
Mary     guang zhou
James     shen zhen
Andy            NaN
Alice              
Name: city, dtype: object
</code></pre><p>这样，做处理的时候，如果一个数据不属于字符串就不会被处理了。</p>
<h3 id="替换和分割"><a href="#替换和分割" class="headerlink" title="替换和分割"></a>替换和分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       [Bei, Jing, ]
Bob      [Shang, Hai, ]
Mary      [Guang, Zhou]
James      [Shen, Zhen]
Andy                NaN
Alice              [, ]
Name: city, dtype: object
</code></pre><p>分割列表中的元素可以使用 <code>get</code> 和 <code>[]</code> 进行访问：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      Jing
Bob       Hai
Mary     Zhou
James    Zhen
Andy      NaN
Alice        
Name: city, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str.get(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom     NaN
Bob     NaN
Mary    NaN
James   NaN
Andy    NaN
Alice   NaN
Name: city, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>).str[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      Jing
Bob       Hai
Mary     Zhou
James    Zhen
Andy      NaN
Alice        
Name: city, dtype: object
</code></pre><p><code>split()</code> 方法有个参数很有意思，<code>expand=True</code> 可以把返回的列表数据以 DataFrame 形式返回：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.split(<span class="string">' '</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
<td style="text-align:center">Jing</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
<td style="text-align:center">Zhou</td>
<td style="text-align:center">None</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
<td style="text-align:center">Zhen</td>
<td style="text-align:center">None</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">None</td>
</tr>
</tbody>
</table>
<h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><p><code>extract()</code> 方法接收一个正则表达式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配空字符串前面的所有字母</span></span><br><span class="line">user_info.city.str.extract(<span class="string">r'(\w+)\s+'</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配空格前后的字符串</span></span><br><span class="line">user_info.city.str.extract(<span class="string">r'(\w+)\s+(\w+)'</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">Bei</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">Shang</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Guang</td>
<td style="text-align:center">Zhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">Shen</td>
<td style="text-align:center">Zhen</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<p><code>extract()</code> 只能返回匹配的第一个元素，<code>extractall()</code> 则会返回所有的匹配元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.extractall(<span class="string">r'(\w+)'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">match</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Zhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shen</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Zhen</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city.str.extractall(<span class="string">r'(\w+)\s+'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">match</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Bei</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Jing</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shang</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">Hai</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Guang</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Shen</td>
</tr>
</tbody>
</table>
<p>最后列举一下 <code>str</code> 所支持常用方法：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cat()</td>
<td style="text-align:center">连接字符串</td>
</tr>
<tr>
<td style="text-align:center">split()</td>
<td style="text-align:center">在分隔符上分割字符串</td>
</tr>
<tr>
<td style="text-align:center">rsplit()</td>
<td style="text-align:center">从字符串末尾开始分隔字符串</td>
</tr>
<tr>
<td style="text-align:center">get()</td>
<td style="text-align:center">索引到每个元素（检索第i个元素）</td>
</tr>
<tr>
<td style="text-align:center">join()</td>
<td style="text-align:center">使用分隔符在系列的每个元素中加入字符串</td>
</tr>
<tr>
<td style="text-align:center">get_dummies()</td>
<td style="text-align:center">在分隔符上分割字符串，返回虚拟变量的DataFrame</td>
</tr>
<tr>
<td style="text-align:center">contains()</td>
<td style="text-align:center">如果每个字符串都包含pattern / regex，则返回布尔数组</td>
</tr>
<tr>
<td style="text-align:center">replace()</td>
<td style="text-align:center">用其他字符串替换pattern / regex的出现</td>
</tr>
<tr>
<td style="text-align:center">repeat()</td>
<td style="text-align:center">重复值（s.str.repeat(3)等同于x * 3 t2 &gt;）</td>
</tr>
<tr>
<td style="text-align:center">pad()</td>
<td style="text-align:center">将空格添加到字符串的左侧，右侧或两侧</td>
</tr>
<tr>
<td style="text-align:center">center()</td>
<td style="text-align:center">相当于str.center</td>
</tr>
<tr>
<td style="text-align:center">ljust()</td>
<td style="text-align:center">相当于str.ljust</td>
</tr>
<tr>
<td style="text-align:center">rjust()</td>
<td style="text-align:center">相当于str.rjust</td>
</tr>
<tr>
<td style="text-align:center">zfill()</td>
<td style="text-align:center">等同于str.zfill</td>
</tr>
<tr>
<td style="text-align:center">wrap()</td>
<td style="text-align:center">将长长的字符串拆分为长度小于给定宽度的行</td>
</tr>
<tr>
<td style="text-align:center">slice()</td>
<td style="text-align:center">切分Series中的每个字符串</td>
</tr>
<tr>
<td style="text-align:center">slice_replace()</td>
<td style="text-align:center">用传递的值替换每个字符串中的切片</td>
</tr>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">计数模式的发生</td>
</tr>
<tr>
<td style="text-align:center">startswith()</td>
<td style="text-align:center">相当于每个元素的str.startswith(pat)</td>
</tr>
<tr>
<td style="text-align:center">endswith()</td>
<td style="text-align:center">相当于每个元素的str.endswith(pat)</td>
</tr>
<tr>
<td style="text-align:center">findall()</td>
<td style="text-align:center">计算每个字符串的所有模式/正则表达式的列表</td>
</tr>
<tr>
<td style="text-align:center">match()</td>
<td style="text-align:center">在每个元素上调用re.match，返回匹配的组作为列表</td>
</tr>
<tr>
<td style="text-align:center">extract()</td>
<td style="text-align:center">在每个元素上调用re.search，为每个元素返回一行DataFrame，为每个正则表达式捕获组返回一列</td>
</tr>
<tr>
<td style="text-align:center">extractall()</td>
<td style="text-align:center">在每个元素上调用re.findall，为每个匹配返回一行DataFrame，为每个正则表达式捕获组返回一列</td>
</tr>
<tr>
<td style="text-align:center">len()</td>
<td style="text-align:center">计算字符串长度</td>
</tr>
<tr>
<td style="text-align:center">strip()</td>
<td style="text-align:center">相当于str.strip</td>
</tr>
<tr>
<td style="text-align:center">rstrip()</td>
<td style="text-align:center">相当于str.rstrip</td>
</tr>
<tr>
<td style="text-align:center">lstrip()</td>
<td style="text-align:center">相当于str.lstrip</td>
</tr>
<tr>
<td style="text-align:center">partition()</td>
<td style="text-align:center">等同于str.partition</td>
</tr>
<tr>
<td style="text-align:center">rpartition()</td>
<td style="text-align:center">等同于str.rpartition</td>
</tr>
<tr>
<td style="text-align:center">lower()</td>
<td style="text-align:center">相当于str.lower</td>
</tr>
<tr>
<td style="text-align:center">upper()</td>
<td style="text-align:center">相当于str.upper</td>
</tr>
<tr>
<td style="text-align:center">find()</td>
<td style="text-align:center">相当于str.find</td>
</tr>
<tr>
<td style="text-align:center">rfind()</td>
<td style="text-align:center">相当于str.rfind</td>
</tr>
<tr>
<td style="text-align:center">index()</td>
<td style="text-align:center">相当于str.index</td>
</tr>
<tr>
<td style="text-align:center">rindex()</td>
<td style="text-align:center">相当于str.rindex</td>
</tr>
<tr>
<td style="text-align:center">capitalize()</td>
<td style="text-align:center">相当于str.capitalize</td>
</tr>
<tr>
<td style="text-align:center">swapcase()</td>
<td style="text-align:center">相当于str.swapcase</td>
</tr>
<tr>
<td style="text-align:center">normalize()</td>
<td style="text-align:center">返回Unicode标准格式。相当于unicodedata.normalize</td>
</tr>
<tr>
<td style="text-align:center">translate()</td>
<td style="text-align:center">等同于str.translate</td>
</tr>
<tr>
<td style="text-align:center">isalnum()</td>
<td style="text-align:center">等同于str.isalnum</td>
</tr>
<tr>
<td style="text-align:center">isalpha()</td>
<td style="text-align:center">等同于str.isalpha</td>
</tr>
<tr>
<td style="text-align:center">isdigit()</td>
<td style="text-align:center">相当于str.isdigit</td>
</tr>
<tr>
<td style="text-align:center">isspace()</td>
<td style="text-align:center">等同于str.isspace</td>
</tr>
<tr>
<td style="text-align:center">islower()</td>
<td style="text-align:center">相当于str.islower</td>
</tr>
<tr>
<td style="text-align:center">isupper()</td>
<td style="text-align:center">相当于str.isupper</td>
</tr>
<tr>
<td style="text-align:center">istitle()</td>
<td style="text-align:center">相当于str.istitle</td>
</tr>
<tr>
<td style="text-align:center">isnumeric()</td>
<td style="text-align:center">相当于str.isnumeric</td>
</tr>
<tr>
<td style="text-align:center">isdecimal()</td>
<td style="text-align:center">相当于str.isdecimal</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（四）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（三）</title>
    <link href="https://yuanblq.github.io/2018/11/20/Pandas%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/20/Pandas（三）/</id>
    <published>2018-11-20T06:36:40.000Z</published>
    <updated>2018-11-26T14:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（三）</p>
</blockquote>
<a id="more"></a>
<h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<h3 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h3><ul>
<li>丢弃</li>
<li>填充</li>
<li>替换</li>
<li>使用其他对象填充</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">index = pd.Index(data=[<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>, <span class="string">'Andy'</span>, <span class="string">'Alice'</span>], name=<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, np.nan, <span class="number">40</span>, np.nan, <span class="number">30</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Beijing'</span>, <span class="string">'Shanghai'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>, np.nan, <span class="string">' '</span>],</span><br><span class="line">    <span class="string">'sex'</span>: [<span class="keyword">None</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>, np.nan, <span class="string">'unknown'</span>],</span><br><span class="line">    <span class="string">'birth'</span>: [<span class="string">'2000-02-10'</span>, <span class="string">'1988-10-17'</span>, <span class="keyword">None</span>, <span class="string">'1978-8-8'</span>, np.nan, <span class="string">'1988-10-11'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将出生日期转化为时间戳</span></span><br><span class="line">user_info[<span class="string">'birth'</span>] = pd.to_datetime(user_info.birth)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<p>上面数据中，Tom、Mary 的数据都有缺失，可以使用 <code>isnull()</code>，<code>notnull()</code> 方法来查找：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.isnull()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p>除了简单的查找识别哪些数据是缺失的，还可以有其他的一些操作，比如过滤掉用户年龄为空的用户：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[user_info.age.notnull()]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<h3 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h3><p>使用 <code>dropna</code> 方法丢弃缺失值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean_age = user_info.age.dropna()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean_age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
James    40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>Series 的 <code>dropna()</code> 比较简单，对于 DataFrame 来说，可以设置更多的参数。</p>
<ul>
<li><code>axis</code> 参数，控制行或列，<code>axis=0</code>（默认）表示操作行，<code>axis=1</code> 表示操作列。</li>
<li><code>how</code> 参数，丢弃哪些数据，可选参数：<code>any</code>（默认）或者 <code>all</code>。<code>any</code> 表示一行/列有任意元素为空就丢弃，<code>all</code> 一行/列所有值都为空，才丢弃。</li>
<li><code>subset</code> 参数，表示删除时只考虑索引或列名。</li>
<li><code>thresh</code> 参数，阈值，表示有几个实际值以后就不删除，比如 <code>thresh=3</code> 一行/列非空值大于 3 个就将其保留。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行数据只要有一个字段存在空值就删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行数据所有字段都为空才删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'all'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># city 或 sex 存在空值即删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, subset=[<span class="string">'city'</span>, <span class="string">'sex'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要有三个即以上实际值就不删除</span></span><br><span class="line">user_info.dropna(axis=<span class="number">0</span>, thresh=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<h3 id="填充缺失值"><a href="#填充缺失值" class="headerlink" title="填充缺失值"></a>填充缺失值</h3><p>最常见的就是使用 <code>fillna</code> 完成填充。</p>
<p>常见的填充方式是使用一个标量来填充。例如，将所有缺失的年龄都填充为 0：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      0.0
James    40.0
Andy      0.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>除了使用标量来填充，使用前一个或后一个的有效值来填充。</p>
<p>设置参数 <code>method=&#39;pad&#39;</code> 或者 <code>method=&#39;ffill&#39;</code> 可以使用前一个 <code>有效值</code> 来填充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     30.0
James    40.0
Andy     40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'pad'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     30.0
James    40.0
Andy     40.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>设置参数 <code>method=&#39;bfill&#39;</code> 或者 <code>method=&#39;backfill&#39;</code> 可以使用后一个 <code>有效值</code> 来填充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'backfill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     40.0
James    40.0
Andy     30.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.fillna(method=<span class="string">'bfill'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     40.0
James    40.0
Andy     30.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>除了通过 <code>fillna</code> 方法来填充缺失值外，还可以通过 <code>interpolate</code> 方法来填充。默认情况下使用线性差值，可以设置 <code>method</code> 参数来改变方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      NaN
James    40.0
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.interpolate()</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     35.0
James    40.0
Andy     35.0
Alice    30.0
Name: age, dtype: float64
</code></pre><h3 id="替换缺失值"><a href="#替换缺失值" class="headerlink" title="替换缺失值"></a>替换缺失值</h3><p>像 <code>None</code>、<code>np.nan</code>、<code>NaT</code> 这些值，Pandas 眼中都是缺失值，但在人类眼中，某些异常值我们都会当做缺失值来处理。</p>
<p>比如：我们的表里面记录的都是青年人，但如果某个年龄数据超过了 35 岁，那肯定是个异常值。另外，如果性别记录出现 ‘unknown’，肯定也是异常值。</p>
<p>对于以上这种情况，我们可以使用 <code>replace</code> 方法来替换缺失值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄 40 岁替换成 np.nan</span></span><br><span class="line">user_info.age.replace(<span class="number">40</span>, np.nan)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary      NaN
James     NaN
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><p>替换值也可以是一个字段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄 18 岁替换成 np.nan</span></span><br><span class="line">user_info.age.replace(&#123;<span class="number">18</span>: np.nan&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom       NaN
Bob      30.0
Mary      NaN
James    40.0
Andy      NaN
Alice    30.0
Name: age, dtype: float64
</code></pre><p>对于 DataFrame，可以指定每列要替换的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40.0</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1978-08-08</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.replace(&#123;<span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'birth'</span>: pd.Timestamp(<span class="string">'1978-8-8'</span>)&#125;, np.nan)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">birth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">None</td>
<td style="text-align:center">2000-02-10</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">1988-10-17</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Andy</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaT</td>
</tr>
<tr>
<td style="text-align:center">Alice</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center"></td>
<td style="text-align:center">unknown</td>
<td style="text-align:center">1988-10-11</td>
</tr>
</tbody>
</table>
<p>还可以将特定字符串进行替换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 unknown 进行替换</span></span><br><span class="line">user_info.sex.replace(<span class="string">'unknown'</span>, np.nan)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        None
Bob        male
Mary     female
James      male
Andy        NaN
Alice       NaN
Name: sex, dtype: object
</code></pre><p>替换还可以使用正则来替换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.city</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        Beijing
Bob       Shanghai
Mary     Guangzhou
James     Shenzhen
Andy           NaN
Alice             
Name: city, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将空白字符串替换成空值</span></span><br><span class="line">user_info.city.replace(<span class="string">r'\s+'</span>, np.nan, regex=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom        Beijing
Bob       Shanghai
Mary     Guangzhou
James     Shenzhen
Andy           NaN
Alice          NaN
Name: city, dtype: object
</code></pre><h3 id="使用其他对象填充"><a href="#使用其他对象填充" class="headerlink" title="使用其他对象填充"></a>使用其他对象填充</h3><p>我们可以把一个有值的 Series 数据填充给另一个有缺失值的 Series：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_age = user_info.age.copy()</span><br><span class="line">new_age.fillna(<span class="number">20</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">new_age[<span class="string">'Tom'</span>] = <span class="number">55</span></span><br><span class="line">new_age</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      55.0
Bob      30.0
Mary     20.0
James    40.0
Andy     20.0
Alice    30.0
Name: age, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.combine_first(new_age)</span><br></pre></td></tr></table></figure>
<pre><code>name
Tom      18.0
Bob      30.0
Mary     20.0
James    40.0
Andy     20.0
Alice    30.0
Name: age, dtype: float64
</code></pre><p>可见，有缺失值的 Series 被有数据的 Series 做了填充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（三）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（二）</title>
    <link href="https://yuanblq.github.io/2018/11/15/Pandas%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/15/Pandas（二）/</id>
    <published>2018-11-15T06:36:29.000Z</published>
    <updated>2018-11-26T14:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（二）</p>
</blockquote>
<a id="more"></a>
<h2 id="常用的基本功能"><a href="#常用的基本功能" class="headerlink" title="常用的基本功能"></a>常用的基本功能</h2><p>以 DataFrame 的操作为例，大部分也适用于 Series。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">index = pd.Index(data=[<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>], name=<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Shanghai'</span>, <span class="string">'Beijing'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>],</span><br><span class="line">    <span class="string">'gender'</span>: [<span class="string">'male'</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=data, index=index)</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="整体情况"><a href="#整体情况" class="headerlink" title="整体情况"></a>整体情况</h3><p>首先，我们可以通过 <code>info</code> 方法查看数据的整体情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.info()</span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
Index: 4 entries, Tom to James
Data columns (total 3 columns):
age       4 non-null int64
city      4 non-null object
gender    4 non-null object
dtypes: int64(1), object(2)
memory usage: 128.0+ bytes
</code></pre><h3 id="头尾数据"><a href="#头尾数据" class="headerlink" title="头尾数据"></a>头尾数据</h3><p>数据量巨大的时候，可以像操作大文本一样使用 <code>head</code>、<code>tail</code> 类似的操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.tail(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p><code>.shape</code> 可以获取数据的形状，<code>.T</code> 可以对数据转置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.shape</span><br></pre></td></tr></table></figure>
<pre><code>(4, 3)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.T</span><br></pre></td></tr></table></figure>
<p>|username|Tom|Bob|Mary|James|<br>|age|18|30|25|40|<br>|city|Shanghai|Beijing|Guangzhou|Shenzhen|<br>|gender|male|male|female|male|</p>
<p>像字典一样，可以使用 <code>.values</code> 获取数据内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.values</span><br></pre></td></tr></table></figure>
<pre><code>array([[18, &apos;Shanghai&apos;, &apos;male&apos;],
       [30, &apos;Beijing&apos;, &apos;male&apos;],
       [25, &apos;Guangzhou&apos;, &apos;female&apos;],
       [40, &apos;Shenzhen&apos;, &apos;male&apos;]], dtype=object)
</code></pre><p>可见是 <code>ndarray</code> 类型。</p>
<p>当然也有 <code>keys()</code>，<code>items()</code> 方法（<code>values</code> 只有属性）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.keys()</span><br></pre></td></tr></table></figure>
<pre><code>Index([&apos;age&apos;, &apos;city&apos;, &apos;gender&apos;], dtype=&apos;object&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(<span class="string">'-----'</span>)</span><br><span class="line">    print(value)</span><br><span class="line">    print(<span class="string">'-----'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age
-----
username
Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
-----
city
-----
username
Tom       Shanghai
Bob        Beijing
Mary     Guangzhou
James     Shenzhen
Name: city, dtype: object
-----
gender
-----
username
Tom        male
Bob        male
Mary     female
James      male
Name: gender, dtype: object
-----
</code></pre><h3 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h3><p>自带常用的数据统计指标（最大值、最小值、平均值、中位数等）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大年龄</span></span><br><span class="line">user_info.age.max()</span><br></pre></td></tr></table></figure>
<pre><code>40
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小年龄</span></span><br><span class="line">user_info.age.min()</span><br></pre></td></tr></table></figure>
<pre><code>18
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平均年龄</span></span><br><span class="line">user_info.age.mean()</span><br></pre></td></tr></table></figure>
<pre><code>28.25
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄总和</span></span><br><span class="line">user_info.age.sum()</span><br></pre></td></tr></table></figure>
<pre><code>113
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄中位数</span></span><br><span class="line">user_info.age.median()</span><br></pre></td></tr></table></figure>
<pre><code>27.5
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄方差</span></span><br><span class="line">user_info.age.var()</span><br></pre></td></tr></table></figure>
<pre><code>85.58333333333333
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄标准差</span></span><br><span class="line">user_info.age.std()</span><br></pre></td></tr></table></figure>
<pre><code>9.251126057585278
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.quantile()</span><br></pre></td></tr></table></figure>
<pre><code>27.5
</code></pre><p>如果只是想粗略看一下各项描述指数，可以直接使用 <code>describe()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.describe()</span><br></pre></td></tr></table></figure>
<pre><code>count     4.000000
mean     28.250000
std       9.251126
min      18.000000
25%      23.250000
50%      27.500000
75%      32.500000
max      40.000000
Name: age, dtype: float64
</code></pre><p>这些统计方法可以直接在 DataFrame 上使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.median()</span><br></pre></td></tr></table></figure>
<pre><code>age    27.5
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.max()</span><br></pre></td></tr></table></figure>
<pre><code>age             40
city      Shenzhen
gender        male
dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">4.000000</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">28.250000</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">9.251126</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">18.000000</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">23.250000</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">27.500000</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">32.500000</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">40.000000</td>
</tr>
</tbody>
</table>
<p>如果想要对<strong>非数字</strong>类型的数据也统计，可以设置 <code>include=[&#39;object&#39;]</code> 来获得：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.describe(include=[<span class="string">'object'</span>, <span class="string">'int'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">4.000000</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">unique</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">top</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">freq</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">28.250000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">9.251126</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">18.000000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">23.250000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">27.500000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">32.500000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">40.000000</td>
<td style="text-align:center">NaN</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>对于一堆数据，我们有时候想分成几个区间去统计，这时候可以使用 Pandas 的 <code>cut()</code> 方法完成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      (17.978, 25.333]
Bob      (25.333, 32.667]
Mary     (17.978, 25.333]
James      (32.667, 40.0]
Name: age, dtype: category
Categories (3, interval[float64]): [(17.978, 25.333] &lt; (25.333, 32.667] &lt; (32.667, 40.0]]
</code></pre><p>默认会自动化分成等距的几个区间段，我们也可以自己指定离散区间：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, [<span class="number">1</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">50</span>])</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       (1, 18]
Bob      (18, 30]
Mary     (18, 30]
James    (30, 50]
Name: age, dtype: category
Categories (3, interval[int64]): [(1, 18] &lt; (18, 30] &lt; (30, 50]]
</code></pre><p>例外还可以给每个离散区间取个名字：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(user_info.age, [<span class="number">1</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">50</span>], labels=[<span class="string">'childhood'</span>, <span class="string">'youth'</span>, <span class="string">'middle'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      childhood
Bob          youth
Mary         youth
James       middle
Name: age, dtype: category
Categories (3, object): [childhood &lt; youth &lt; middle]
</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>对于数据的处理怎么能少了排序呢。排序有两种，一种是按照索引（横纵两种）排序，还有就是按照实际的数据值排序.</p>
<p>一、按索引排序（默认正序）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照索引排序</span></span><br><span class="line">user_info.sort_index()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照列索引排序（反序）</span></span><br><span class="line">user_info.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">gender</th>
<th style="text-align:center">city</th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">18</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">female</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">male</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">40</td>
</tr>
</tbody>
</table>
<p>二、按实际数据值排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.sort_values(by=<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>如果排序依据不止一个参考，则传入一个列表即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.sort_values(by=[<span class="string">'age'</span>, <span class="string">'city'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在排序的基础上获取最年轻的两个</span></span><br><span class="line">user_info.sort_values(by=<span class="string">'age'</span>).head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
</tbody>
</table>
<p>上面获取最年轻的两个元素看起来没啥毛病。先排序，然后获取最前面的两个就是最小的元素了。</p>
<p>但是如果数据量大的时候，排序会造成很大的浪费，Pandas 的内置方法 <code>nlargest</code> 和 <code>nsmallest</code> 方法可以快速获取最大、最小的 n 个值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.nlargest(<span class="number">2</span>, columns=<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.nlargest(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40
Bob      30
Name: age, dtype: int64
</code></pre><h3 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h3><p>常用的函数有 <code>map</code>、<code>apply</code>、<code>applymap</code>。</p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h4><p><code>map</code> 是 Series 中特有的方法，通过它可以对 Series 中的每个元素实现变换。</p>
<p>比如判断用户是否属于中年人（年龄大于30岁）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.map(<span class="keyword">lambda</span> x: <span class="string">'yes'</span> <span class="keyword">if</span> x &gt;= <span class="number">30</span> <span class="keyword">else</span> <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       no
Bob      yes
Mary      no
James    yes
Name: age, dtype: object
</code></pre><p>另外，如果我想判断是北方还是南方，可以这么操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">city_map = &#123;</span><br><span class="line">    <span class="string">'Shanghai'</span>: <span class="string">'south'</span>,</span><br><span class="line">    <span class="string">'Beijing'</span>: <span class="string">'north'</span>,</span><br><span class="line">    <span class="string">'Guangzhou'</span>: <span class="string">'south'</span>,</span><br><span class="line">    <span class="string">'Shenzhen'</span>: <span class="string">'south'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_info.city.map(city_map)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      south
Bob      north
Mary     south
James    south
Name: city, dtype: object
</code></pre><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a><code>apply</code></h4><p><code>apply</code> 既支持 Series，也支持 DataFrame。对 Series 操作没啥问题，就是作用到每个值上，在对 DataFrame 操作的时候会根据 <code>axis</code> 参数作用到所有列或者所有行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age.apply(<span class="keyword">lambda</span> x: <span class="string">'yes'</span> <span class="keyword">if</span> x &gt;= <span class="number">30</span> <span class="keyword">else</span> <span class="string">'no'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom       no
Bob      yes
Mary      no
James    yes
Name: age, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.apply(<span class="keyword">lambda</span> x: x.max(), axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>age             40
city      Shenzhen
gender        male
dtype: object
</code></pre><h4 id="applymap"><a href="#applymap" class="headerlink" title="applymap"></a>applymap</h4><p><code>applymap</code> 适用于 DataFrame，类似 <code>apply</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.applymap(<span class="keyword">lambda</span> x: str(x).lower())</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="修改索引-列的名称"><a href="#修改索引-列的名称" class="headerlink" title="修改索引/列的名称"></a>修改索引/列的名称</h3><p>直接使用 <code>rename</code> 即可修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_info = user_info.rename(columns=&#123;<span class="string">'age'</span>: <span class="string">'Age'</span>, <span class="string">'city'</span>: <span class="string">'City'</span>&#125;)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Age</th>
<th style="text-align:center">City</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_info = user_info.rename(index=&#123;<span class="string">'Tom'</span>: <span class="string">'Jack'</span>&#125;)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Jack</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<h3 id="数据类型操作"><a href="#数据类型操作" class="headerlink" title="数据类型操作"></a>数据类型操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每种类型的列数</span></span><br><span class="line">user_info.get_dtype_counts()</span><br></pre></td></tr></table></figure>
<pre><code>int64     1
object    2
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line">new_info = user_info[<span class="string">'age'</span>].astype(float)</span><br><span class="line">new_info</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18.0
Bob      30.0
Mary     25.0
James    40.0
Name: age, dtype: float64
</code></pre><p>数据转换有时候会涉及到将 object 转换成其他类型，常见的有转为数字、日期、时间差，Pandas 中分别对应 <code>to_numeric</code>、<code>to_datetime</code>、<code>to_timedelta</code> 方法</p>
<p>举个例子，我们先给用户添加一些身高数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'height'</span>] = [<span class="string">'178'</span>, <span class="string">'168'</span>, <span class="string">'155'</span>, <span class="string">'188cm'</span>]</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">height</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">168</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">155</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">188cm</td>
</tr>
</tbody>
</table>
<p>现在我们想把身高这一列的数据转换为数字，但是 <code>188cm</code> 并不是数字，我们在转换的时候可以通过 <code>errors</code> 参数来处理转换失败的情况。</p>
<p>默认情况下 <code>errors=&#39;raise&#39;</code>，意味着转换失败会直接抛异常，设置 <code>errors=&#39;coerce&#39;</code> 可以在转换失败的时候赋值为 <code>pd.NaT</code> 或者 <code>pd.NaN</code>，设置 <code>errors=&#39;ignore&#39;</code> 则在转换失败的时候返回原有的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_numeric(user_info.height, errors=<span class="string">'coerce'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      178.0
Bob      168.0
Mary     155.0
James      NaN
Name: height, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_numeric(user_info.height, errors=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom        178
Bob        168
Mary       155
James    188cm
Name: height, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'height'</span>] = pd.to_numeric(user_info.height, errors=<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">height</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">username</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">168</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">155</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">188cm</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（二）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas（一）</title>
    <link href="https://yuanblq.github.io/2018/11/13/Pandas%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/13/Pandas（一）/</id>
    <published>2018-11-13T06:32:14.000Z</published>
    <updated>2018-11-26T14:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Pandas 学习系列（一）</p>
</blockquote>
<a id="more"></a>
<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>带索引和名称的一维数组。在Series中数据类型可以是整数、浮点数、字符串、Python对象等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<p>首先，我们存储一组年龄数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ages = [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>]</span><br><span class="line">pd_ages = pd.Series(data=ages)</span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>0    18
1    30
2    25
3    40
dtype: int64
</code></pre><p>但如果只存储这一组数据的话好像也没什么用，我们可以试着把用户的名字加进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.index = [<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>]</span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
dtype: int64
</code></pre><p>现在我们已经把每个人的名字和年龄对应出来了，但是不知道的人怎么能知道“Tom”、“Bob”这些是人名呢，所以我们还可以为这个索引加上名称：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.index.name = <span class="string">'username'</span></span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
dtype: int64
</code></pre><p>对于这段数据我们还可以像起个表名一样，给Series起个名字：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd_ages.name = <span class="string">'user_age_info'</span></span><br><span class="line">pd_ages</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
Name: user_age_info, dtype: int64
</code></pre><p>上面把这些步骤都一步步分开了，我们还可以快速实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建索引</span></span><br><span class="line">name = pd.Index([<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>], name=<span class="string">'username'</span>)</span><br><span class="line"><span class="comment"># 构建Series</span></span><br><span class="line">pd_age = pd.Series(data=[<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>], index=name, name=<span class="string">'user_age_info'</span>)</span><br><span class="line">pd_age</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18
Bob      30
Mary     25
James    40
Name: user_age_info, dtype: int64
</code></pre><p>上面构建Series的时候没有指定数据的类型，是由Pandas自动判断的，我们当然可以自己指定数据的类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定类型为浮点型</span></span><br><span class="line">pd_age = pd.Series(data=[<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>], index=name, name=<span class="string">"user_age_info"</span>, dtype=float)</span><br><span class="line">pd_age</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      18.0
Bob      30.0
Mary     25.0
James    40.0
Name: user_age_info, dtype: float64
</code></pre><h3 id="探索Series"><a href="#探索Series" class="headerlink" title="探索Series"></a>探索Series</h3><p>由于有索引的存在，Series和dict很像，所以也具有dict的一些类似操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 Tom 的年龄</span></span><br><span class="line">pd_age[<span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd_age.get(<span class="string">'Tom'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><p>除了和dict很像，Series也有ndarray的类似操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个元素</span></span><br><span class="line">pd_age[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>18.0
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取前三个元素</span></span><br><span class="line">pd_age[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom     18.0
Bob     30.0
Mary    25.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取年龄大于 30 的元素</span></span><br><span class="line">pd_age[pd_age &gt; <span class="number">30</span>]</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第 4 个元素和第 1 个元素</span></span><br><span class="line">pd_age[[<span class="number">3</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<pre><code>username
James    40.0
Tom      18.0
Name: user_age_info, dtype: float64
</code></pre><h4 id="Series向量化操作"><a href="#Series向量化操作" class="headerlink" title="Series向量化操作"></a>Series向量化操作</h4><p>Series和ndarray一样，也是支持向量化操作，同时也可以传递给大多数期望ndarray的Numpy方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd_age + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      19.0
Bob      31.0
Mary     26.0
James    41.0
Name: user_age_info, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.exp(pd_age)</span><br></pre></td></tr></table></figure>
<pre><code>username
Tom      6.565997e+07
Bob      1.068647e+13
Mary     7.200490e+10
James    2.353853e+17
Name: user_age_info, dtype: float64
</code></pre><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame 可以理解为二维的 Series。每一列都可以拥有自己的名字，数据类型也可以不一样。</p>
<p>接着上面的例子，这次我们不止要存储用户的年龄，还要存储城市信息，那我们该如何构建 Dataframe 呢？</p>
<p>我们可以把每个用户的数据存在一个个列表中传过去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = [<span class="number">18</span>, <span class="string">'Shanghai'</span>]</span><br><span class="line">Bob = [<span class="number">30</span>, <span class="string">'Beijing'</span>]</span><br><span class="line">Mary = [<span class="number">25</span>, <span class="string">'Guangzhou'</span>]</span><br><span class="line">James = [<span class="number">40</span>, <span class="string">'Shenzhen'</span>]</span><br><span class="line"></span><br><span class="line">user_info = pd.DataFrame(data=[Tom, Bob, Mary, James])</span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>同样，这样一张光秃秃的表格，除了数据我们一无所知。为了以后查阅方便我们得添加点额外信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">columns = [<span class="string">'age'</span>, <span class="string">'city'</span>]</span><br><span class="line">index = [<span class="string">'Tom'</span>, <span class="string">'Bob'</span>, <span class="string">'Mary'</span>, <span class="string">'James'</span>]</span><br><span class="line">user_info.columns = columns</span><br><span class="line">user_info.index = index</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>除此之外，我们也可直接传入 dict 数据，dict 的 key 即为该数据的 column：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">40</span>],</span><br><span class="line">    <span class="string">'city'</span>: [<span class="string">'Shanghai'</span>, <span class="string">'Beijing'</span>, <span class="string">'Guangzhou'</span>, <span class="string">'Shenzhen'</span>]</span><br><span class="line">&#125;</span><br><span class="line">user_info = pd.DataFrame(data=user_data, index=index)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<h3 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h3><h4 id="访问行"><a href="#访问行" class="headerlink" title="访问行"></a>访问行</h4><p>从打印出来的 DataFrame 可见，每一行就表示一个用户的数据，那我们需要取某一个用户的数据时该怎么做呢？</p>
<p>直接通过索引访问：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引名称访问</span></span><br><span class="line">user_info.loc[<span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>age           18
city    Shanghai
Name: Tom, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引角标访问</span></span><br><span class="line">user_info.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>age           18
city    Shanghai
Name: Tom, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还支持切片操作</span></span><br><span class="line">user_info.iloc[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同样还支持索引名称操作！</span></span><br><span class="line">user_info.loc[<span class="string">'Tom'</span>: <span class="string">'Mary'</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
</tbody>
</table>
<p>DataFrame 的索引操作还可以直接这么做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'Tom'</span>: <span class="string">'Bob'</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="number">1</span>: <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
</tbody>
</table>
<h4 id="访问列"><a href="#访问列" class="headerlink" title="访问列"></a>访问列</h4><p>如果我想获取所有人的年龄信息，即访问数据的列数据，有两种办法：</p>
<p>一、使用 <code>.attr</code> 操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info.age</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
</code></pre><p>二、使用 <code>[&#39;attr&#39;]</code> 操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'age'</span>]</span><br></pre></td></tr></table></figure>
<pre><code>Tom      18
Bob      30
Mary     25
James    40
Name: age, dtype: int64
</code></pre><p>那要是相同时获取多个列的数据呢？直接传入列的列表即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_info[[<span class="string">'age'</span>, <span class="string">'city'</span>]]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<h3 id="增加-删除列"><a href="#增加-删除列" class="headerlink" title="增加/删除列"></a>增加/删除列</h3><p>一个 DataFrame 构建完成之后，如果我们还想增加/删除某一列该怎么办呢？</p>
<p>还记得我们可以直接传递一个 dict 到 DataFrame 吗，同样，我们可以像操作字典一样直接加 column：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'gender'</span>] = <span class="string">'male'</span></span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>想删除某一列，同样如此简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info.pop(<span class="string">'gender'</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
</tr>
</tbody>
</table>
<p>当然，给 DataFrame 增加列时，可以传入列表（不过要注意，如果列表元素长度不匹配会报错）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info[<span class="string">'gender'</span>] = [<span class="string">'male'</span>, <span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'male'</span>]</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<p>上面都会在原来的 DataFrame 上做出修改，如果想保留原来的 DataFrame 不变，所有的修改产生出新的 DataFrame 的话，可以使用 <code>assign</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_user_info = user_info.assign(next_year_age=user_info[<span class="string">'age'</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_user_info</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">age</th>
<th style="text-align:center">city</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">next_year_age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tom</td>
<td style="text-align:center">18</td>
<td style="text-align:center">Shanghai</td>
<td style="text-align:center">male</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">Bob</td>
<td style="text-align:center">30</td>
<td style="text-align:center">Beijing</td>
<td style="text-align:center">male</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">Mary</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Guangzhou</td>
<td style="text-align:center">female</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">James</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Shenzhen</td>
<td style="text-align:center">male</td>
<td style="text-align:center">41</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pandas 学习系列（一）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Pandas" scheme="https://yuanblq.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor使用（上）</title>
    <link href="https://yuanblq.github.io/2018/11/07/Supervisor%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/07/Supervisor使用（上）/</id>
    <published>2018-11-07T09:03:25.000Z</published>
    <updated>2018-11-07T09:04:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>supervisor 由两大件组成：</p>
<ul>
<li>supervisord</li>
<li>supervisorctl</li>
</ul>
<a id="more"></a>
<p>supervisord：主服务。负责自身的一些调用以及子进程的管理、响应来自客户端的命令、重启挂掉的子进程、记录子进程的日志、生成处理子进程各个生命节点的事件等等任务。</p>
<p>supervisorctl：提供了一个 shell 交互窗口。由此，我们可以和 supervisord 中的任意一个进程/子进程通信，获取进程的状态、控制子进程的启停，以及当前 supervisord 的进程运行列表。</p>
<p>supervisord、supervisorctl 的配置文件通常存在同一份配置文件中：<code>supervisord.conf</code>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>搞简单点，直接用 <code>pip</code> 安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure></p>
<p>我是直接用 <code>pyenv</code> 安装了一个 <code>Python2</code> 的环境，然后用 <code>Python2</code> 安装（Python3 版本的 supervisor coming soon ..）。</p>
<p><a href="https://yangchy.com/2017/05/27/python-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%A5%9E%E5%99%A8/" target="_blank" rel="noopener">关于 <code>pyenv</code> 的使用可以参考这篇。</a></p>
<p>然后用 <code>pyenv</code> 设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global My_ENV 2.7.15</span><br></pre></td></tr></table></figure></p>
<p>这样默认还是使用常用的虚拟环境，辅以 Python2，完美。</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>我们尝试监控一个简单的程序。</p>
<h4 id="配置-配置文件"><a href="#配置-配置文件" class="headerlink" title="配置 配置文件"></a>配置 配置文件</h4><p>正确安装完之后，直接在 shell 中输入 <code>echo_supervisord_conf</code> 回车就会出现官方默认的一个配置信息，我们新建一个项目文件夹，并把该文件存在该项目文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my_super_pro</span><br><span class="line">$ echo_supervisord_conf &gt; ./supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p>打开这个配置文件，我们做一些个性化的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在文件末尾添加一个 [program:foo] section</span><br><span class="line"></span><br><span class="line">[program:foo]</span><br><span class="line">command=/bin/cat</span><br></pre></td></tr></table></figure></p>
<p>保存之后就可以启动 supervisord 看看效果了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisord</span><br></pre></td></tr></table></figure></p>
<p>因为我们的配置文件就在当前启动目录下，而且名字就叫 <code>supervisord.conf</code>，所以 supervisord 能找到这个配置文件。</p>
<p>如果我们的配置文件不在启动的目录下，或者名字不交 supervisord.conf，就需要通过 <code>-c</code> 参数来指定相应的配置文件路径。</p>
<p>启动之后，我们就可以通过 <code>supervisorctl</code> 这个工具来管理启动的 supervisord 和对应的子进程。</p>
<p>查询子进程状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl status</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo     RUNNING   pid 87215, uptime 0:00:03</span><br></pre></td></tr></table></figure>
<p>结束所有子进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl stop all</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo: stopped</span><br></pre></td></tr></table></figure>
<p>启动子进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl start foo</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo: started</span><br></pre></td></tr></table></figure>
<p>可见我们的 foo 程序已经启动了。supervisor 大致的使用流程就如上所示，其他的就是一些细节的配置、调整。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;supervisor 由两大件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supervisord&lt;/li&gt;
&lt;li&gt;supervisorctl&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Supervisor" scheme="https://yuanblq.github.io/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（五）</title>
    <link href="https://yuanblq.github.io/2018/11/01/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/11/01/Ansible系列（五）/</id>
    <published>2018-11-01T10:01:18.000Z</published>
    <updated>2018-11-01T10:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了创建逻辑清晰，内容可重用的 Playbook，Playbook 支持 <code>import</code> 和 <code>include</code> 两种方法。</p>
<p>使用的时候，可能会发现用法很相似，但是 Ansible 执行的时候还是有区别的。</p>
<a id="more"></a>
<p><code>import *</code> 进来的语句都是在 Playbook 解析的时候就预处理完了。</p>
<p><code>include *</code> 进来的语句是在 Playbook 执行的时候才会执行。</p>
<h3 id="导入-Playbook"><a href="#导入-Playbook" class="headerlink" title="导入 Playbook"></a>导入 Playbook</h3><p>可以直接在主 Playbook 中导入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- import_playbook: webservers.yml</span><br><span class="line">- import_playbook: databases.yml</span><br></pre></td></tr></table></figure>
<p>在每个 Playbook 中的 play 和 task 都是按照其编写的顺序执行的，就像在主 Playbook 中直接定义的那样。</p>
<h3 id="导入-task"><a href="#导入-task" class="headerlink" title="导入 task"></a>导入 task</h3><p>将 task 打碎，放在分类好的各自文件中，是一种有效的组织复杂 task 的方法，而且还能重用这些 task。</p>
<p>比如一个普通的 task 列表长这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># common_tasks.yml</span><br><span class="line"></span><br><span class="line">- name: placeholder foo</span><br><span class="line">  command: /bin/foo</span><br><span class="line">- name: placeholder bar</span><br><span class="line">  command: /bin/bar</span><br></pre></td></tr></table></figure>
<p>我们可以在主 task 列表中使用 <code>import_tasks</code> 和 <code>include_tasks</code> 来导入其他文件的 tasks：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- import_tasks: common_tasks.yml</span><br><span class="line"># 或者这么导入</span><br><span class="line">- include_tasks: common_tasks.yml</span><br></pre></td></tr></table></figure>
<p>另外，在 <code>handlers</code> 中，我们也能像导入 task 一样导入 handlers：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># one_handers.yml</span><br><span class="line"></span><br><span class="line">- name: restart nginx</span><br><span class="line">  service: name=nginx state=restarted</span><br></pre></td></tr></table></figure>
<p>然后在 Playbook 中用到的地方直接导入就行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">handlers:</span><br><span class="line">- include_tasks: one_handlers.yml</span><br><span class="line"># 或者</span><br><span class="line">- import_tasks: one_handlers.yml</span><br></pre></td></tr></table></figure>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了创建逻辑清晰，内容可重用的 Playbook，Playbook 支持 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;include&lt;/code&gt; 两种方法。&lt;/p&gt;
&lt;p&gt;使用的时候，可能会发现用法很相似，但是 Ansible 执行的时候还是有区别的。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（四）</title>
    <link href="https://yuanblq.github.io/2018/10/24/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/24/Ansible系列（四）/</id>
    <published>2018-10-24T04:56:35.000Z</published>
    <updated>2018-10-24T13:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果说前面讲过的模块是雕刻工具，那么 Playbook 就是一份说明书，而清单中的主机就是原材料。</p>
<p>这三者联合起来，就能像流水线一样批量把清单中的主机改造成说明书里描述的样子。</p>
<a id="more"></a>
<h3 id="单口相声"><a href="#单口相声" class="headerlink" title="单口相声"></a>单口相声</h3><p>Playbook 顾名思义就是“剧本”，而剧本就是由一幕幕的戏剧构成。在每一幕剧中，清单中的主机充当各种主角，演绎剧本中的各种桥段。</p>
<p>我们来看一段只有一出戏的剧本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 01-playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: host01</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping the remote host</span><br><span class="line">    ping:</span><br><span class="line">  - name: copy local file to remote</span><br><span class="line">    copy:</span><br><span class="line">      src: /etc/hosts</span><br><span class="line">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>
<p>这份剧本解说：</p>
<ul>
<li>hosts：出演角色，可以一个人也可以一组人（对应清单中记录的姓名）。</li>
<li>remote_user：出道的艺名（以哪个用户身份登录远程主机）。</li>
<li>tasks：有哪些戏码。<ul>
<li>name：该戏码的名称。</li>
<li><code>ping</code>/<code>copy</code> 道具（使用的模块名字）。<ul>
<li><code>src</code>/<code>dest</code> 道具使用方式（模块参数）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>然后导演这出戏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook 01-playbook.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [host01] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [ping the remote host] ****************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [copy local file to remote] ***********************************************************************************</span><br><span class="line">changed: [host01]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************</span><br><span class="line">host01                        : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
<p>执行结果如上所示：<br><code>PLAY [host01]</code> 表示这出戏的主角是 <code>host01</code> 这位。</p>
<p><code>TASK [...]</code> 这个则是这出戏中主角的一系列演出动作，<code>TASK [Gathering Facts]</code> 这个动作则是每出戏都必备的，用来搜集主角当前的各种状态，之前不是说过 Ansible 自带“幂等性”功能嘛，这个准备工作也是在这步搜集信息的。其他两个 <code>TASK</code> 则是我们在剧本中指定的。</p>
<p><code>PLAY RECAP</code> 是观众对这出戏表演完之后的“评价”。</p>
<h3 id="对口相声"><a href="#对口相声" class="headerlink" title="对口相声"></a>对口相声</h3><p>我们现在再来增加一位角色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 02-playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: host01</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping the remote host</span><br><span class="line">    ping:</span><br><span class="line"></span><br><span class="line">- hosts: host02</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy local file to remote</span><br><span class="line">    copy:</span><br><span class="line">      src: /etc/hosts</span><br><span class="line">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>
<p>开导，<code>ansible-playbook 02-playbook.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PLAY [host01] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">TASK [ping the remote host] ****************************************************************************************</span><br><span class="line">ok: [host01]</span><br><span class="line"></span><br><span class="line">PLAY [host02] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************</span><br><span class="line">ok: [host02]</span><br><span class="line"></span><br><span class="line">TASK [copy local file to remote] ***********************************************************************************</span><br><span class="line">changed: [host02]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************</span><br><span class="line">host02                    : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">host01                    : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
<p>哈哈，导演一部两个人的剧也并不是很难嘛！</p>
<p>Playbook 的基本概念也就这么简单，无非就是看你导演的水平如何，能否导出一手好戏。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说前面讲过的模块是雕刻工具，那么 Playbook 就是一份说明书，而清单中的主机就是原材料。&lt;/p&gt;
&lt;p&gt;这三者联合起来，就能像流水线一样批量把清单中的主机改造成说明书里描述的样子。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>一台机器配置多个Git账号</title>
    <link href="https://yuanblq.github.io/2018/10/18/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E5%8F%B7/"/>
    <id>https://yuanblq.github.io/2018/10/18/一台机器配置多个Git账号/</id>
    <published>2018-10-18T07:00:57.000Z</published>
    <updated>2018-10-17T07:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一条优秀的程序狗，不单单要完成公司的开发项目，自己也会有几个开发项目。</p>
<p>不同项目之间如果想使用不同的 Git 账号管理，我们就需要进行如下配置。</p>
<a id="more"></a>
<h3 id="生成各自的-SSH-key"><a href="#生成各自的-SSH-key" class="headerlink" title="生成各自的 SSH key"></a>生成各自的 SSH key</h3><p>不同的 Git 账号，区分使用不同的 SSH key。</p>
<p>生成用户名为 one_git_name 的 SSH key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;one_git_name&quot; -f ~/.ssh/one-key</span><br></pre></td></tr></table></figure></p>
<p>生成用户名为 another_git_name 的 SSH key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;another_git_name&quot; -f ~/.ssh/another-key</span><br></pre></td></tr></table></figure></p>
<h3 id="配置对应的-SSH-key"><a href="#配置对应的-SSH-key" class="headerlink" title="配置对应的 SSH key"></a>配置对应的 SSH key</h3><p>生成了不同的 SSH key 之后，来为不同的账号配置对应的 SSH key。</p>
<p>在 <code>~/.ssh</code> 目录下，新建 <code>config</code> 文件，在其中进行如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host host-alias1（以后不同 Git 账号连接远程服务器时使用的别名，详见下面示例）</span><br><span class="line">    HostName github.com（对应 Git 服务提供商的域名）</span><br><span class="line">    User 登录用户名</span><br><span class="line">    Port 默认22，可不填（open-ssh 端口）</span><br><span class="line">    IdentityFile 私钥地址（例如：~/.ssh/one-key）</span><br><span class="line"></span><br><span class="line">Host host-alias2（以后不同 Git 账号连接远程服务器时使用的别名，详见下面示例）</span><br><span class="line">    HostName github.com（对应 Git 服务提供商的域名）</span><br><span class="line">    User 登录用户名</span><br><span class="line">    Port 默认22，可不填（open-ssh 端口）</span><br><span class="line">    IdentityFile 私钥地址（例如：~/.ssh/another-key）</span><br></pre></td></tr></table></figure>
<h3 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@host-alias1（上面配置的 Git 远程服务商别名）</span><br></pre></td></tr></table></figure>
<p>如果成功会有对应的提示，也可以 <code>ssh -vT git@host-alias1</code> 打出具体的 debug 信息，方便出错以后的调试。</p>
<h3 id="配置本地-Git-账号"><a href="#配置本地-Git-账号" class="headerlink" title="配置本地 Git 账号"></a>配置本地 Git 账号</h3><p>本地操作 Git 仓库的时候需要指定一个 Git 账号，可以配置一个全局的账号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;email@xx.com&quot;</span><br><span class="line">git config --global user.name &quot;username&quot;</span><br></pre></td></tr></table></figure>
<p>也可以在不同的项目仓库配置不同的 Git 账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先进入对应的 Git 仓库文件夹中</span><br><span class="line"></span><br><span class="line">git config user.email &quot;email@xx.com&quot;</span><br><span class="line">git config user.name &quot;username&quot;</span><br></pre></td></tr></table></figure></p>
<p>当然也可以直接修改不同 Git 仓库根目录下的 <code>.git/config</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 注意 [remote &quot;origin&quot;] 中的 url 这项配置</span><br><span class="line"># [user] 就是上面在项目仓库目录下的 git config user.email/name 配置，这里我们不使用命令而是直接手动写入文件</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        ignorecase = true</span><br><span class="line">        precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = git@host-alias1（就是之前我们在 .ssh/config 中配置不同 Git远程服务的别名）:项目.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;develop&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/develop</span><br><span class="line">[user]</span><br><span class="line">        email = email@xxx.com</span><br><span class="line">        name = username</span><br></pre></td></tr></table></figure>
<p>OK，配置完毕，继续 coding …</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一条优秀的程序狗，不单单要完成公司的开发项目，自己也会有几个开发项目。&lt;/p&gt;
&lt;p&gt;不同项目之间如果想使用不同的 Git 账号管理，我们就需要进行如下配置。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Git" scheme="https://yuanblq.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（三）</title>
    <link href="https://yuanblq.github.io/2018/10/16/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/16/Ansible系列（三）/</id>
    <published>2018-10-16T15:39:45.000Z</published>
    <updated>2018-10-15T15:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们安装并大体了解了 Ansible 的使用，接下来在我们开始学习 Playbook 以及其他好玩的内容之前，先来瞧瞧 <code>ad-hoc</code> 这个命令。</p>
<a id="more"></a>
<h3 id="什么是-ad-hoc"><a href="#什么是-ad-hoc" class="headerlink" title="什么是 ad-hoc"></a>什么是 ad-hoc</h3><p><code>ad-hoc</code> 命令和 Python 的 shell 命令差不多，用来快速执行验证一些命令。后面编写的 Playbook 就好像是 Python 的 <code>.py</code> 文件，通过 <code>ad-hoc</code> 就像使用 <code>iPython</code> 一样能帮助我们更好地学习 Playbook。</p>
<p>之前我们用到的 <code>ansible all -m ping</code> 就是一个 <code>ad-hoc</code> 命令。</p>
<h3 id="分身数"><a href="#分身数" class="headerlink" title="分身数"></a>分身数</h3><p>在上一篇讲到可以在“清单”文件中定义主机组，一个组里面可能有几个主机，也可能有十几个、几十个。我们执行 <code>ad-hoc</code> 命令的时候 Ansible 能在同一时间同时操作几台主机，在 Ansible 的配置文件中默认定义为 5 个，我们也可以在执行 <code>ad-hoc</code> 命令的时候通过 <code>-f</code> 参数手动指定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping -f 10</span><br></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>就如 Python 拥有许多内置包一样，Ansible 也有许多内置模块。</p>
<p>前面我们一直使用的 <code>ping</code> 就是其中的一个模块，下面再介绍几个常用的模块。</p>
<p>使用 <code>ansible-doc -l</code> 可以查看到 Ansible 有哪些内置的模块，以及这些模块的简介。</p>
<p>我们在想要实现一个功能的时候可以通过 <code>ansible-doc -l | grep &quot;功能关键字&quot;</code> 来快速搜索。</p>
<p>找到对应的模块名字之后，我们可以使用 <code>ansible-doc -s ping</code> 来查看详细关于模块的使用方法（示例为查看 ping 模块的具体使用方法）。</p>
<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m shell -a &apos;echo $PWD&apos;</span><br></pre></td></tr></table></figure>
<p>上面调用 <code>shell</code> 模块，并通过 <code>-a</code> 参数传入执行 shell 命令时候的参数。</p>
<p>在传入参数的时候需要注意单引号和双引号的区别：上面使用的单引号里面的 <code>$PWD</code> 是远程主机的环境变量，如果换成双引号则 <code>$PWD</code> 使用的是当前执行 Ansible 命令的主机的环境变量。</p>
<p>还记得我们之前说的，Ansible 具有“幂等性”的特征吗。到目前为止，我们一直在使用简单的命令。但是大多数的 Ansible 模块并不是简单的执行命令，它们能在执行命令前计算出最终的状态，然后判断到底需不需要执行我们传进来的命令。</p>
<h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><p>我们先通过 <code>ansible-doc -s copy</code> 看看有哪些常用操作：</p>
<ul>
<li>src：本地需要复制到远程主机的文件或目录，可以是绝对路径，也可以是相对路径。<ul>
<li>指定的路径是文件：没话说，直接复制该文件</li>
<li>指定的路径是文件夹：如果不是以“/”结尾，那就是把该文件夹整个复制，如果是以“/”结尾，则是把文件夹里面的内容复制到远程主机。</li>
</ul>
</li>
<li>dest：复制到远程主机的哪个路径。<ul>
<li>如果“src”是一个文件夹，“dest”也必须是个文件夹。</li>
<li>如果指定的“src”路径不存在并且“dest”以“/”结尾或者“src”是个文件夹，“dest”会以 <code>mkdir -p</code> 的形式创建。</li>
<li>如果“src”和“dest”都是文件，那么“dest”路径不存在则会执行失败。</li>
</ul>
</li>
<li>force：默认“yes”。当文件名一样，但是内容不一样时，是否强制替换。</li>
<li>backup：当强制替换文件的时候，是否需要备份原文件。</li>
<li>mode：修改文件或文件夹的权限。对于习惯使用 <code>chmod</code> 的人来说，如果指定数字，则必须使用八进制（如 0644 或 01777 这样的），如果指定字符串，则使用引号（如 ‘644’ 或 ‘1777’ 这样的）。Ansible 1.8版本之后可以使用符号模式（如 u+rwx 或 u=rw,g=r,o=r 这样的）。</li>
</ul>
<p>直接把文件复制到远程主机：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot;</span><br></pre></td></tr></table></figure>
<h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><ul>
<li>path：需要管理的文件对象</li>
<li>state：<ul>
<li>directory：类似 <code>mkdir -p</code></li>
<li>file：创建文件</li>
<li>link：创建软链接</li>
<li>hard：创建硬链接</li>
<li>absent：删除文件或文件夹，解除软硬链接</li>
<li>touch：如果 path 不存在，则创建一个空文件。如果 path 存在，则更新该文件的权限或者修改时间</li>
</ul>
</li>
<li>src：当 state=link/hard 的时候我们需要指定链接的源文件<ul>
<li>绝对路径</li>
<li>相对路径：相对要被创建链接的文件的路径</li>
<li>空路径</li>
</ul>
</li>
<li>force：作用于创建链接的时候<ul>
<li>源文件不存在（之后会有）</li>
<li>目标链接已存在（则会先解除原来的链接，再创建当前新的链接）</li>
</ul>
</li>
<li>mode：和 <code>copy</code> 模块的 mode 一致</li>
<li>recurse：当操作的目标为文件夹的时候，recurse=yes，可以递归地修改文件夹中文件的属性</li>
</ul>
<p>修改权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/srv/foo/a.txt mode=600 owner=haha group=haha&quot;</span><br></pre></td></tr></table></figure></p>
<p>创建文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/path/to/new/dir mode=755 owner=haha group=haha state=directory&quot;</span><br></pre></td></tr></table></figure></p>
<p>删除文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m file -a &quot;dest=/path/to/new/dir state=absent&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>当我们部署 webapp 的时候如果是从 git 拉取代码的话，可以使用 git 模块：</p>
<ul>
<li>repo：git 仓库地址（必填）</li>
<li>accept_hostkey：设为 yes，能帮我们自动把 git 服务器添加到 <code>known_hosts</code> 中。</li>
<li>clone：如果目标路径不存在，则不会 clone 远程仓库（默认 yes）</li>
<li>dest：把远程仓库 clone 到哪里（除非上面 clone=no，不然必填）</li>
<li>force：如果设为 yes，会丢掉本地仓库的任何变动</li>
<li>version：checkout 到哪个分支（也可以是 HEAD，分支名，tag 名，SHA-1 值）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m git -a &quot;repo=https://foo.example/org/repo.git dest=/srv/myapp version=develop accept_hostkey=yes force=yes&quot;</span><br></pre></td></tr></table></figure>
<p>Ansible 拥有众多模块，暂且不展开讲述了，等用到的时候查下基本就知道怎么用了，多实践才能熟练。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们安装并大体了解了 Ansible 的使用，接下来在我们开始学习 Playbook 以及其他好玩的内容之前，先来瞧瞧 &lt;code&gt;ad-hoc&lt;/code&gt; 这个命令。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（二）</title>
    <link href="https://yuanblq.github.io/2018/10/13/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/13/Ansible系列（二）/</id>
    <published>2018-10-13T09:07:07.000Z</published>
    <updated>2018-10-12T09:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>清单配置详解</p>
<p>Ansible 的“清单”文件就像是黄页电话本。有了它，我们就能和各个主机进行通话交流。</p>
<a id="more"></a>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>像这种通讯联系本都会有一个功能 —— 分组，或者说“打标签”。这样无论再多的联系人（主机）我们都能很轻松地找到。</p>
<p>Ansible 有一个自带的分组名称 —— all。</p>
<p>没错就是字面意思。该分组包含“清单”中的所有联系人。通过这个关键字 <code>all</code> 我们可以同时对“清单”中所有的主机进行操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">host01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">host02 ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">host02 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们自己定义几个分组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">test01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Prod]</span><br><span class="line">prod02 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">prod03 ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure>
<p>上面，我们先定义了两个分组 <code>Test</code>，<code>Prod</code>。接下来我们就可以直接对整个组里的主机进行操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible Test -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible Prod -m ping</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prod02 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">prod03 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们创建了两个分组 —— 测试组和生产组。我们现在可以分别操作这两个组，但是有些操作却是不区分测试组还是生产组的，怎么办呢？</p>
<p>没错，再建一个同时包含这两个组所有主机的新分组。</p>
<p>那如果每一个组包含的主机很多，这种做法效率就太低了，我们还有另一种方法 —— 嵌套。</p>
<p>就是我们在新建的组里面直接添上其他的组名，不用一个个添上其他组内的主机名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">test01 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Prod]</span><br><span class="line">prod02 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line">prod03 ansible_host=x.x.x.x ansible_user=root</span><br><span class="line"></span><br><span class="line">[Basic]</span><br><span class="line">Test</span><br><span class="line">Prod</span><br></pre></td></tr></table></figure>
<p>这样我们想对所有主机执行一些基础操作的时候，就可以直接操作 <code>Basic</code> 组。</p>
<h3 id="YAML-语法"><a href="#YAML-语法" class="headerlink" title="YAML 语法"></a>YAML 语法</h3><p>以上“清单”的配置都是 ini 格式的写法，ansible 的“清单”还支持 YAML 格式的语法。</p>
<p>为什么还要知道 YAML 语法格式的“清单”配置呢？</p>
<p>后面介绍的 Ansible Playbook 配置使用的就是 YAML 语法，虽然“清单”对于 ini 和 YAML 两种语法都支持，但是我们使用同一种语法格式总是会舒服一点。当然这种舒服也是因人而异的，具体使用中哪个适合自己就是用哪个。</p>
<p>下面列出几个 ini 和 YAML 两种格式的对比:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 最简单的 ini</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line"># 对应的 YAML</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br></pre></td></tr></table></figure>
<p>YAML 格式中，最上方的 <code>all</code> 就是之前我们所说的关键字，在 YAML 中必须把 <code>all</code> 写在最上方。这样才符合 <code>all</code> 这个关键字本身的地位嘛。</p>
<p>接着来看其他几个格式对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 简单分组的 ini 格式</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line">[Ga]</span><br><span class="line">y.y.y.y</span><br><span class="line"></span><br><span class="line">[Gb]</span><br><span class="line">z.z.z.z</span><br><span class="line"></span><br><span class="line"># 对应的 YAML</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br><span class="line">    children:</span><br><span class="line">        Ga:</span><br><span class="line">            hosts:</span><br><span class="line">                y.y.y.y</span><br><span class="line">        Gb:</span><br><span class="line">            hosts:</span><br><span class="line">                z.z.z.z</span><br></pre></td></tr></table></figure></p>
<p>可以看出，YAML 格式中定义“组”需要用到 <code>children</code> 关键字。</p>
<p>再来看个嵌套分组的对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># ini 格式</span><br><span class="line">[Ga]</span><br><span class="line">x.x.x.x</span><br><span class="line"></span><br><span class="line">[Gb]</span><br><span class="line">y.y.y.y</span><br><span class="line"></span><br><span class="line">[Gc]</span><br><span class="line">Ga</span><br><span class="line">Gb</span><br><span class="line"></span><br><span class="line"># 对应的 YAML 格式</span><br><span class="line">all:</span><br><span class="line">    children:</span><br><span class="line">        Gc:</span><br><span class="line">            children:</span><br><span class="line">                Ga:</span><br><span class="line">                    hosts:</span><br><span class="line">                        x.x.x.x</span><br><span class="line">                Gb:</span><br><span class="line">                    hosts:</span><br><span class="line">                        y.y.y.y</span><br></pre></td></tr></table></figure></p>
<p>最后我们再来看一个指定 port、name 的两个格式对比:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ini 格式</span><br><span class="line">x.x.x.x</span><br><span class="line">host01 ansible_host=y.y.y.y ansible_port=22</span><br><span class="line"></span><br><span class="line"># 对应的 YAML 格式</span><br><span class="line">all:</span><br><span class="line">    hosts:</span><br><span class="line">        x.x.x.x</span><br><span class="line">        host01:</span><br><span class="line">            ansible_host: y.y.y.y</span><br><span class="line">            ansible_port: 22</span><br></pre></td></tr></table></figure></p>
<p>YAML 语法其实也不是很难，只是把一些逻辑上的层级关系用缩进的形式表现了出来，想要查找学习更多关于“清单”的内容，可以参见<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html" target="_blank" rel="noopener">官网文档。</a></p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;清单配置详解&lt;/p&gt;
&lt;p&gt;Ansible 的“清单”文件就像是黄页电话本。有了它，我们就能和各个主机进行通话交流。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible系列（一）</title>
    <link href="https://yuanblq.github.io/2018/10/11/Ansible%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanblq.github.io/2018/10/11/Ansible系列（一）/</id>
    <published>2018-10-11T14:22:22.000Z</published>
    <updated>2018-10-12T09:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible 是什么？</p>
<p>Ansible 是一款自动化工具。可以用它来配置系统，部署程序，甚至更高级的持续部署。</p>
<a id="more"></a>
<p>Ansible 难不难？</p>
<p>Ansible 设计的主要目的就是简单易用。但虽然简单，却拥有极强的安全性和可靠性。Ansible 采用的是 OpenSSH 无代理方式管理机器，由于 OpenSSH 是备受广大用户检验过的开源组件之一，因此安全性极高。同时，Ansible 还是分布式的 — 依赖系统凭据来控制远程主机，无需在远程主机安装客户端。</p>
<p>直接步入正题吧！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>很简单，直接通过 pip 即可安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ansible</span><br></pre></td></tr></table></figure></p>
<h3 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h3><p>我们要想控制远程主机，当然得让 Ansible 知道要控制哪台主机。这个信息就存储在一个叫做“清单”的文件中。</p>
<p>该“清单”文件默认存放在 <code>/etc/ansible/hosts</code> 文件中，我们现在把受管的主机信息添加到 <code>Inventory</code> 清单文件中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /etc/ansible/hosts</span><br><span class="line">x.x.x.x</span><br></pre></td></tr></table></figure></p>
<p>如果你想自定义“清单”文件的存储路径，则在执行命令的时候通过 <code>-i &lt;path&gt;</code> 来指定自己的“清单”文件。</p>
<p>我现在是存在默认位置的，所以我就不使用 <code>-i</code> 参数了，现在执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible x.x.x.x -m ping</span><br></pre></td></tr></table></figure></p>
<p>这个命令很简单，一看就知道是对这台主机进行 ping 操作。</p>
<p>执行后，返回的结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;,</span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>失败了？为什么会出现这个错误？</p>
<p>哈哈，我们在“清单”文件中就填了一个 ip，就算 Ansible 再怎么厉害，怎么可能不用密码就能有权限管理这台主机呢。</p>
<p>我们添上用户名密码配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x ansible_port=22 ansible_user=root ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure></p>
<p>这个配置是基于密码认证的，但是为了提高安全性，通常会基于密钥认证，密码认证甚至都会被禁用。</p>
<p>我们将本机公钥添加到受管主机的认证列表之后就可以直接这么配置“清单”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure></p>
<p>因为添加了公钥，所以可以省略密码，而sshd端口本来就采用的默认 22，所以也可以省略。</p>
<p>最后，为了以后我们能方便地管理受管主机，我们可以像域名一样给我们的受管主机也起个别名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haha ansible_host=x.x.x.x ansible_user=root</span><br></pre></td></tr></table></figure></p>
<p>再次执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible haha -m ping</span><br><span class="line"></span><br><span class="line">haha | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>成功！</p>
<p>好了，Ansible 的大体执行流程就是这么简单。下一篇我们接着看看“清单”文件还有有哪些神奇功效。</p>
<p><strong>P.S.</strong> 关注我的公众号，第一时间接收更新提醒。</p>
<div align="center"><br><img src="https://pages-ncdn-1253600859.cos.ap-shanghai.myqcloud.com/Others/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" width="320" alt="公众号二维码" align="center/"><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ansible 是什么？&lt;/p&gt;
&lt;p&gt;Ansible 是一款自动化工具。可以用它来配置系统，部署程序，甚至更高级的持续部署。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://yuanblq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ansible" scheme="https://yuanblq.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Channel实战-聊天服务器-P02</title>
    <link href="https://yuanblq.github.io/2018/07/31/Channel%E5%AE%9E%E6%88%98-Part02/"/>
    <id>https://yuanblq.github.io/2018/07/31/Channel实战-Part02/</id>
    <published>2018-07-31T07:33:41.000Z</published>
    <updated>2018-07-31T04:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中我们已经把基本的环境配置都弄好了。</p>
<p>现在我们就正式进入正题，搭建我们的聊天服务器。</p>
<a id="more"></a>
<h4 id="实现一个聊天服务器"><a href="#实现一个聊天服务器" class="headerlink" title="实现一个聊天服务器"></a>实现一个聊天服务器</h4><h5 id="添加一个聊天室视图"><a href="#添加一个聊天室视图" class="headerlink" title="添加一个聊天室视图"></a>添加一个聊天室视图</h5><p>现在我们再创建第二个视图，我们可以在里面发送我们想要发送的消息。</p>
<p>我们现在创建这个文件 <code>chat/templates/chat/room.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chat/templates/chat/room.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat Room<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"chat-log"</span> <span class="attr">cols</span>=<span class="string">"100"</span> <span class="attr">rows</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"chat-message-input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"100"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"chat-message-submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Send"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var roomName = &#123;&#123; room_name_json &#125;&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var chatSocket = new WebSocket(</span></span><br><span class="line"><span class="undefined">        'ws://' + window.location.host +</span></span><br><span class="line"><span class="undefined">        '/ws/chat/' + roomName + '/');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    chatSocket.onmessage = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        var data = JSON.parse(e.data);</span></span><br><span class="line"><span class="undefined">        var message = data['message'];</span></span><br><span class="line"><span class="undefined">        document.querySelector('#chat-log').value += (message + '\n');</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    chatSocket.onclose = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        console.error('Chat socket closed unexpectedly');</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-input').focus();</span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-input').onkeyup = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        if (e.keyCode === 13) &#123;  // enter, return</span></span><br><span class="line"><span class="undefined">            document.querySelector('#chat-message-submit').click();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    document.querySelector('#chat-message-submit').onclick = function(e) &#123;</span></span><br><span class="line"><span class="undefined">        var messageInputDom = document.querySelector('#chat-message-input');</span></span><br><span class="line"><span class="undefined">        var message = messageInputDom.value;</span></span><br><span class="line"><span class="undefined">        chatSocket.send(JSON.stringify(&#123;</span></span><br><span class="line"><span class="undefined">            'message': message</span></span><br><span class="line"><span class="undefined">        &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        messageInputDom.value = '';</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在 <code>view.py</code> 中创建视图函数，为了安全起见，我们需要对房间名做个安全操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/index.html'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">room</span><span class="params">(request, room_name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/room.html'</span>, &#123;</span><br><span class="line">        <span class="string">'room_name_json'</span>: mark_safe(json.dumps(room_name))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>
<p>最后，我们来创建这个路由：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;room_name&gt;[^/]+)/$'</span>, views.room, name=<span class="string">'room'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>OK，启动测试服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入 <code>http://127.0.0.1:8000/chat/</code>，然后输入“lobby”按回车，就会跳转到 <code>http://127.0.0.1:8000/chat/lobby/</code> 这个聊天页面。</p>
<p>我们输入“Hello”，然后按回车。</p>
<p>咦？什么也没有发生，甚至还出现了这行 log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2018/07/31 09:25:49] WebSocket DISCONNECT /ws/chat/lobby/ [127.0.0.1:51241]</span><br></pre></td></tr></table></figure></p>
<p>到底什么情况，哪出错了？</p>
<p>当我们按下回车发送消息的时候会打开连向 <code>ws://127.0.0.1:8000/ws/chat/lobby/</code> 的一个 WebSocket，但是我们还没创建消费者来接收这个 WebSocket 连接。</p>
<h5 id="创建第一个消费者"><a href="#创建第一个消费者" class="headerlink" title="创建第一个消费者"></a>创建第一个消费者</h5><p>和 Django 接收 HTTP 请求之后根据 URLconf 找到对应的 view 视图一样，当 channel 接收到一个 WebSocket 连接之后，也需要根据 routing 配置找到对应的消费者去处理各种到来的事件。</p>
<p>现在我们来创建一个连向 <code>/ws/chat/ROOM_NAME/</code> WebSocket 的一个消费者，并把接收到的聊天信息原样返回回去。</p>
<p>创建一个新文件 <code>chat/consumers.py</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/consumers.py</span></span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure></p>
<p>然后和 Django 的 URLconf 一样，我们也在各个 APP 中创建对应的 <code>routing.py</code> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^ws/chat/(?P&lt;room_name&gt;[^/]+)/$'</span>, consumers.ChatConsumer),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>下一步，就是要在项目的 <code>routing.py</code> 文件中加入我们 <code>chat.routing</code> 配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/routing.py</span></span><br><span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> AuthMiddlewareStack</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">import</span> chat.routing</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="comment"># (http-&gt;django views is added by default)</span></span><br><span class="line">    <span class="string">'websocket'</span>: AuthMiddlewareStack(</span><br><span class="line">        URLRouter(</span><br><span class="line">            chat.routing.websocket_urlpatterns</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这个路由配置表示：如果接收到一个发至 channels 服务器的一个连接，<code>ProtocolTypeRouter</code> 会先检查这个连接的类型。如果是一个 WebSocket 连接（ws:// 或者 wss://），该连接就会给到 <code>AuthMiddlewareStack</code> 去处理。</p>
<p><code>AuthMiddlewareStack</code> 能从连接的 <code>scope</code> 中拿到当前验证的用户对象，就像 Django 的 <code>AuthenticationMiddleware</code> 从 <code>request</code> 中拿到验证的用户对象一样。</p>
<p>然后该连接继续传给 <code>URLRouter</code>。</p>
<p><code>URLRouter</code> 就会最终路由到对应的消费者。</p>
<p>现在我们再次启动测试服务器验证一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>现在我们再试着之前的操作，在聊天页面输入聊天信息，之后回车，是不是很神奇，我们的聊天内容果真发出去了。</p>
<p>不要高兴的太早！</p>
<p>试着再打开一个同名的 <code>lobby</code> 聊天室，模拟下多人在同一个聊天室能否互相聊天。</p>
<p>哈哈哈，不行吧。</p>
<p>这时，我们就需要引入 <code>channel layer</code> 这一抽象概念，来帮我们在同一个消费者的多个实例中传递数据。</p>
<h5 id="搞定-channel-layer"><a href="#搞定-channel-layer" class="headerlink" title="搞定 channel layer"></a>搞定 channel layer</h5><p>channel layer 是一种通信系统。它能让你能在多个消费者实例间互相通信。</p>
<p><code>channel layer</code> 包含两个抽象概念：</p>
<ul>
<li><code>channel</code> 类似于邮箱，我们要通信的消息会发往这里。每个 <code>channel</code> 都有一个独一无二的名字，只要我们拥有这个名字，就能往这里发消息。</li>
<li><code>group</code> 是一组相关 <code>channel</code> 的集合。同样 <code>group</code> 也有名字，拥有这个名字，我们就能往里面添加删除 <code>channel</code>，并且能往该 <code>group</code> 中所有的 <code>channel</code> 发送消息。</li>
</ul>
<p>每个消费者实例都会自动生成唯一的 channel 名字，我们就可以用它在 channel layer 中进行通信。</p>
<p>因此，我们把每个 <code>ChatConsumer</code> 的 channel 添加到以 room 名字命名的 group 中，这样在同一个房间的 <code>ChatConsumer</code> 可以互相通信了。</p>
<p>在用 channel layer 之前，我们还需要用到 Redis 作为后端存储。</p>
<p>方便起见，我们可以直接用 Docker 起一个 Redis 服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure></p>
<p>然后，我们还需要安装 <code>channels_redis</code> 来让我们的 channel 和 redis 进行通信：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install channels_redis</span><br></pre></td></tr></table></figure></p>
<p>最后，需要在项目的 <code>settings.py</code> 中添加如下配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">'WSChat.routing.application'</span></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'channels_redis.core.RedisChannelLayer'</span>,</span><br><span class="line">        <span class="string">'CONFIG'</span>: &#123;</span><br><span class="line">            <span class="string">"hosts"</span>: [(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这一切安装完之后，我们进入 Django 的 shell 环境验证下有没有安装成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py shell</span><br><span class="line">In [1]: import channels.layers</span><br><span class="line"></span><br><span class="line">In [2]: channel_layer = channels.layers.get_channel_layer()</span><br><span class="line"></span><br><span class="line">In [3]: from asgiref.sync import async_to_sync</span><br><span class="line"></span><br><span class="line">In [4]: async_to_sync(channel_layer.send)(<span class="string">'test_channel'</span>, &#123;<span class="string">'type'</span>: <span class="string">'hello'</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [5]: async_to_sync(channel_layer.receive)(<span class="string">'test_channel'</span>)</span><br><span class="line">Out[5]: &#123;<span class="string">'type'</span>: <span class="string">'hello'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在，我们就来改造一下之前的 <code>ChatConsumer</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/consumers.py</span></span><br><span class="line"><span class="keyword">from</span> asgiref.sync <span class="keyword">import</span> async_to_sync</span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.room_name = self.scope[<span class="string">'url_route'</span>][<span class="string">'kwargs'</span>][<span class="string">'room_name'</span>]</span><br><span class="line">        self.room_group_name = <span class="string">'chat_%s'</span> % self.room_name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将当前 channel 对象加入 group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_add)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, close_code)</span>:</span></span><br><span class="line">        <span class="comment"># Leave room group</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_discard)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            self.channel_name</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 WebSocket 接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text_data)</span>:</span></span><br><span class="line">        text_data_json = json.loads(text_data)</span><br><span class="line">        message = text_data_json[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息发往 group，以便同一聊天室的大家都能收到消息</span></span><br><span class="line">        async_to_sync(self.channel_layer.group_send)(</span><br><span class="line">            self.room_group_name,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'chat_message'</span>,</span><br><span class="line">                <span class="string">'message'</span>: message</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 group 接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chat_message</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        message = event[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息发往 WebSocket</span></span><br><span class="line">        self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">'message'</span>: message</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure></p>
<p>整个聊天流程是这样的：</p>
<ul>
<li>一个用户发送一条消息，JS 函数把这条消息通过 WebSocket 传递给 ChatConsumer。</li>
<li>ChatConsumer 收到消息后，将消息转到对应的聊天室 group。</li>
<li>在同一 group 的 ChatConsumer 从 group 收到消息后会通过 WebSocket 把消息转给 JS，最终呈现在前端。</li>
</ul>
<p>关于上面的代码还有几点需要解释一下：</p>
<ul>
<li><p>self.scope[‘url_route’][‘kwargs’][‘room_name’]</p>
<ul>
<li>从 <code>chat/routing.py</code> 路由中获取 <code>room_name</code> 参数</li>
<li>每个消费者都有一个 <code>scope</code> 参数，包含了连接相关的信息，还有来自 URLRouter 的位置参数和关键字参数，以及当前用户对象</li>
</ul>
</li>
<li><p>self.room_group_name=’chat_%s’ % self.room_name</p>
<ul>
<li>通过用户指定的房间名构造一个 channel 的 group 名字</li>
<li>注意：group 名字只能包含字母、数字、连字符和句点</li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_add)(…)</p>
<ul>
<li>加入一个 group</li>
<li>因为我们的 ChatConsumer 是一个同步的消费者，所有有必要调用 <code>async_to_sync(...)</code> 装饰器。（所有的 channel layer 方法都是异步的）</li>
</ul>
</li>
<li><p>self.accept()</p>
<ul>
<li>接收 WebSocket 连接</li>
<li>如果不在 <code>connect()</code> 方法中调用 <code>accept()</code>，那么该连接将会被拒绝并关闭。比如，当用户未验证身份时，你可以拒绝连接</li>
<li>推荐在 <code>connect()</code> 方法的最后再去调用 <code>accept()</code></li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_discard)(…)</p>
<ul>
<li>退出 group</li>
</ul>
</li>
<li><p>async_to_sync(self.channel_layer.group_send)</p>
<ul>
<li>往 group 发送一个事件</li>
<li>每个事件都有一个 <code>type</code> 的特殊关键key，表示该事件将会去调用这个消费者中哪个名字的方法来处理这个事件</li>
</ul>
</li>
</ul>
<p>OK，我们来验证下是否好用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>打开两个浏览器页面进入 <code>http://127.0.0.1:8000/chat/lobby/</code> 页面，试着在两个页面分别输入消息，看看是否都能收到消息。</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/tutorial/part_2.html" target="_blank" rel="noopener">Channels</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章中我们已经把基本的环境配置都弄好了。&lt;/p&gt;
&lt;p&gt;现在我们就正式进入正题，搭建我们的聊天服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="实战" scheme="https://yuanblq.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
      <category term="Channel" scheme="https://yuanblq.github.io/tags/Channel/"/>
    
      <category term="Django" scheme="https://yuanblq.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Channel实战-聊天服务器-P01</title>
    <link href="https://yuanblq.github.io/2018/07/30/Channel%E5%AE%9E%E6%88%98-Part01/"/>
    <id>https://yuanblq.github.io/2018/07/30/Channel实战-Part01/</id>
    <published>2018-07-30T03:48:25.000Z</published>
    <updated>2018-07-31T04:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列，我们将会构建一个基于 WebSocket 的聊天服务器。</p>
<p>一共只有两个页面：</p>
<ul>
<li>输入要加入聊天室的名称</li>
<li>具体聊天室的聊天页面</li>
</ul>
<a id="more"></a>
<h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>本系列环境要求：</p>
<blockquote>
<p>Python &gt;= 3.5<br>Django &gt;= 1.11<br>channels &gt;= 2.0</p>
</blockquote>
<h5 id="创建一个-Django-项目"><a href="#创建一个-Django-项目" class="headerlink" title="创建一个 Django 项目"></a>创建一个 Django 项目</h5><p>在一个合适的目录创建我们即将使用的新项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject WSChat</span><br></pre></td></tr></table></figure></p>
<p>这时，我们的目录结构应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSChat/</span><br><span class="line">    manage.py</span><br><span class="line">    WSChat/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure></p>
<h5 id="创建-Chat-APP"><a href="#创建-Chat-APP" class="headerlink" title="创建 Chat APP"></a>创建 Chat APP</h5><p>我们会把聊天相关的服务都放在这个 APP 内：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp chat</span><br></pre></td></tr></table></figure></p>
<p>此时会多出一个这样的 <code>chat</code> 文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chat/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></p>
<p>然后我们需要让 Django 知道我们刚创建的 <code>chat</code> APP。</p>
<p>在 <code>WSChat/settings.py</code> 文件的 <code>INSTALLED_APPS</code> 配置中添加 <code>chat</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'chat'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h5 id="添加主页面"><a href="#添加主页面" class="headerlink" title="添加主页面"></a>添加主页面</h5><p>现在我们需要创建一个主页面，能让我们输入要加入的聊天室名字。</p>
<p>在 <code>chat</code> 文件夹内创建 <code>templates</code> 文件夹，在 <code>templates</code> 文件夹内创建 <code>chat</code> 文件夹，最后，在刚建的 <code>chat</code> 文件夹创建 <code>index.html</code> 文件。</p>
<p>最终， <code>chat</code> 文件夹可能长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chat/</span><br><span class="line">    __init__.py</span><br><span class="line">    templates/</span><br><span class="line">        chat/</span><br><span class="line">            index.html</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></p>
<p>然后我们把下面代码放进刚创建的 <code>index.html</code> 文件内：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chat/templates/chat/index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat Rooms<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    What chat room would you like to enter?<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"room-name-input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"100"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"room-name-submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Enter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-input').focus();</span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-input').onkeyup = function(e) &#123;</span></span><br><span class="line"><span class="undefined">            if (e.keyCode === 13) &#123;  // enter, return</span></span><br><span class="line"><span class="undefined">                document.querySelector('#room-name-submit').click();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.querySelector('#room-name-submit').onclick = function(e) &#123;</span></span><br><span class="line"><span class="undefined">            var roomName = document.querySelector('#room-name-input').value;</span></span><br><span class="line"><span class="undefined">            window.location.pathname = '/chat/' + roomName + '/';</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接着，我们在 <code>chat/view.py</code> 文件内创建我们的视图函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'chat/index.html'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>最后，配置我们的路由地址。</p>
<p>先在 <code>chat</code> APP 内创建 <code>urls.py</code> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>然后，在项目的 <code>urls.py</code> 文件中创建以下路由代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^chat/'</span>, include(<span class="string">'chat.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>好了，我们现在启动测试服务器验证一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<p>你可能会在终端看到如下的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &apos;python manage.py migrate&apos; to apply them.</span><br><span class="line"></span><br><span class="line">July 30, 2018 - 03:37:32</span><br><span class="line">Django version 2.0.7, using settings &apos;JTChannel.settings&apos;</span><br><span class="line">Starting development server at http://0.0.0.0:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入 <code>http://127.0.0.1:8000/chat/</code> 就可以看见带“What chat room would you like to enter?”这句话的输入框。</p>
<p>我们输入“lobby”并回车，我们发现我们的页面地址跳转到了 <code>http://127.0.0.1:8000/chat/lobby/</code>，但我们现在还没写这个页面，所有会出现“Page not found”的错误页面。</p>
<h5 id="集成-channel-库"><a href="#集成-channel-库" class="headerlink" title="集成 channel 库"></a>集成 channel 库</h5><p>首先，像配置 Django 的 URLconf 一样，配置 channels 的 routing 配置。</p>
<p>这样，当 Channels 服务器收到 HTTP 请求之后，就能知道需要执行哪段代码。</p>
<p>现在，我们现在 <code>WSChat/routing.py</code> 文件中创建一下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="comment">#  (http-&gt;django views is added by default)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>然后，我们要在 <code>settings.py</code> 配置的 <code>INSTALLED_APPS</code> 中加上我们的 <code>channels</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'channels'</span>,</span><br><span class="line">    <span class="string">'chat'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>最后需要像 WSGI 一样，告诉 Django 我们 channels 的根路由配置文件在哪：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WSChat/settings.py</span></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">'WSChat.routing.application'</span></span><br></pre></td></tr></table></figure></p>
<p>最后我们再来启动测试服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &apos;python manage.py migrate&apos; to apply them.</span><br><span class="line"></span><br><span class="line">July 30, 2018 - 03:37:32</span><br><span class="line">Django version 2.0.7, using settings &apos;JTChannel.settings&apos;</span><br><span class="line">Starting ASGI/Channels version 2.1.2 development server at http://0.0.0.0:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br><span class="line">2018-07-30 03:37:32,233 - INFO - server - HTTP/2 support not enabled (install the http2 and tls Twisted extras)</span><br><span class="line">2018-07-30 03:37:32,233 - INFO - server - Configuring endpoint tcp:port=8000:interface=0.0.0.0</span><br><span class="line">2018-07-30 03:37:32,236 - INFO - server - Listening on TCP address 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<p>这时，如果你看见这段话 <code>Starting ASGI/Channels version 2.1.2 development server at http://0.0.0.0:8000/</code> 说明 channel 已经接管了 Django 的测试服务器。</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/tutorial/part_1.html" target="_blank" rel="noopener">Channels</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列，我们将会构建一个基于 WebSocket 的聊天服务器。&lt;/p&gt;
&lt;p&gt;一共只有两个页面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入要加入聊天室的名称&lt;/li&gt;
&lt;li&gt;具体聊天室的聊天页面&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="实战" scheme="https://yuanblq.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
      <category term="Channel" scheme="https://yuanblq.github.io/tags/Channel/"/>
    
      <category term="Django" scheme="https://yuanblq.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow-01-预测房价</title>
    <link href="https://yuanblq.github.io/2018/07/27/TensorFlow-01-%E9%A2%84%E6%B5%8B%E6%88%BF%E4%BB%B7/"/>
    <id>https://yuanblq.github.io/2018/07/27/TensorFlow-01-预测房价/</id>
    <published>2018-07-27T09:44:16.000Z</published>
    <updated>2018-07-27T09:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习目标：</p>
<ul>
<li>学习基本的 TensorFlow 概念</li>
<li>在 TensorFlow 中使用 LinearRegressor 类并基于单个输入特征预测各城市街区的房屋价值中位数</li>
<li>使用均方根误差 (RMSE) 评估模型预测的准确率</li>
<li>通过调整模型的超参数提高模型准确率</li>
</ul>
<a id="more"></a>
<h4 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">house_data = pd.read_csv(<span class="string">"https://dl.google.com/mlcc/mledu-datasets/california_housing_train.csv"</span>, sep=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">print(house_data)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">       longitude         ...          median_house_value</span><br><span class="line">0         -114.3         ...                     66900.0</span><br><span class="line">1         -114.5         ...                     80100.0</span><br><span class="line">2         -114.6         ...                     85700.0</span><br><span class="line">3         -114.6         ...                     73400.0</span><br><span class="line">4         -114.6         ...                     65500.0</span><br><span class="line">...          ...         ...                         ...</span><br><span class="line">16995     -124.3         ...                    111400.0</span><br><span class="line">16996     -124.3         ...                     79000.0</span><br><span class="line">16997     -124.3         ...                    103600.0</span><br><span class="line">16998     -124.3         ...                     85800.0</span><br><span class="line">16999     -124.3         ...                     94600.0</span><br><span class="line"></span><br><span class="line">[17000 rows x 9 columns]</span><br></pre></td></tr></table></figure>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><ul>
<li>随机化处理。以保证不会出现病态的排序结果（防止损害梯度下降算法的效果）</li>
<li>将 <code>median_house_value</code> 调整为以千为单位</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">house_data = house_data.reindex(</span><br><span class="line">    np.random.permutation(california_housing_dataframe.index)</span><br><span class="line">)</span><br><span class="line">house_data[<span class="string">"median_house_value"</span>] /= <span class="number">1000.0</span></span><br><span class="line"></span><br><span class="line">print(house_data)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">longitude</th>
<th style="text-align:center">latitude</th>
<th style="text-align:center">housing_median_age</th>
<th style="text-align:center">total_rooms</th>
<th style="text-align:center">total_bedrooms</th>
<th style="text-align:center">population</th>
<th style="text-align:center">households</th>
<th style="text-align:center">median_income</th>
<th style="text-align:center">median_house_value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:center">-117.0</td>
<td style="text-align:center">32.8</td>
<td style="text-align:center">12.0</td>
<td style="text-align:center">5535.0</td>
<td style="text-align:center">1434.0</td>
<td style="text-align:center">3112.0</td>
<td style="text-align:center">1262.0</td>
<td style="text-align:center">2.6</td>
<td style="text-align:center">108.3</td>
</tr>
<tr>
<td style="text-align:center">14423</td>
<td style="text-align:center">-122.1</td>
<td style="text-align:center">37.4</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">1617.0</td>
<td style="text-align:center">231.0</td>
<td style="text-align:center">555.0</td>
<td style="text-align:center">222.0</td>
<td style="text-align:center">8.9</td>
<td style="text-align:center">500.0</td>
</tr>
<tr>
<td style="text-align:center">2320</td>
<td style="text-align:center">-117.5</td>
<td style="text-align:center">34.0</td>
<td style="text-align:center">3.0</td>
<td style="text-align:center">12870.0</td>
<td style="text-align:center">2315.0</td>
<td style="text-align:center">5820.0</td>
<td style="text-align:center">1759.0</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">147.3</td>
</tr>
<tr>
<td style="text-align:center">1420</td>
<td style="text-align:center">-117.2</td>
<td style="text-align:center">32.8</td>
<td style="text-align:center">23.0</td>
<td style="text-align:center">1215.0</td>
<td style="text-align:center">225.0</td>
<td style="text-align:center">592.0</td>
<td style="text-align:center">224.0</td>
<td style="text-align:center">3.4</td>
<td style="text-align:center">200.6</td>
</tr>
<tr>
<td style="text-align:center">14724</td>
<td style="text-align:center">-122.2</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">52.0</td>
<td style="text-align:center">2198.0</td>
<td style="text-align:center">397.0</td>
<td style="text-align:center">984.0</td>
<td style="text-align:center">369.0</td>
<td style="text-align:center">3.2</td>
<td style="text-align:center">156.5</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">3201</td>
<td style="text-align:center">-117.8</td>
<td style="text-align:center">33.9</td>
<td style="text-align:center">25.0</td>
<td style="text-align:center">1548.0</td>
<td style="text-align:center">256.0</td>
<td style="text-align:center">811.0</td>
<td style="text-align:center">263.0</td>
<td style="text-align:center">5.2</td>
<td style="text-align:center">242.2</td>
</tr>
<tr>
<td style="text-align:center">9159</td>
<td style="text-align:center">-119.0</td>
<td style="text-align:center">35.4</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">1705.0</td>
<td style="text-align:center">418.0</td>
<td style="text-align:center">905.0</td>
<td style="text-align:center">393.0</td>
<td style="text-align:center">1.6</td>
<td style="text-align:center">54.6</td>
</tr>
<tr>
<td style="text-align:center">12103</td>
<td style="text-align:center">-121.4</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">30.0</td>
<td style="text-align:center">1912.0</td>
<td style="text-align:center">451.0</td>
<td style="text-align:center">1065.0</td>
<td style="text-align:center">388.0</td>
<td style="text-align:center">2.1</td>
<td style="text-align:center">125.0</td>
</tr>
<tr>
<td style="text-align:center">14972</td>
<td style="text-align:center">-122.2</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">41.0</td>
<td style="text-align:center">2576.0</td>
<td style="text-align:center">406.0</td>
<td style="text-align:center">794.0</td>
<td style="text-align:center">376.0</td>
<td style="text-align:center">6.0</td>
<td style="text-align:center">366.1</td>
</tr>
<tr>
<td style="text-align:center">15500</td>
<td style="text-align:center">-122.3</td>
<td style="text-align:center">37.9</td>
<td style="text-align:center">29.0</td>
<td style="text-align:center">2304.0</td>
<td style="text-align:center">399.0</td>
<td style="text-align:center">1377.0</td>
<td style="text-align:center">454.0</td>
<td style="text-align:center">5.0</td>
<td style="text-align:center">140.6</td>
</tr>
</tbody>
</table>
<p>17000 rows × 9 columns</p>
<h4 id="检查数据"><a href="#检查数据" class="headerlink" title="检查数据"></a>检查数据</h4><p>dataframe 数据的 <code>describe()</code> 方法能方便地显示出数据的快速摘要：样本数、均值、标准偏差、最大值、最小值和各种分位数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">house_data.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">longitude</th>
<th style="text-align:center">latitude</th>
<th style="text-align:center">housing_median_age</th>
<th style="text-align:center">total_rooms</th>
<th style="text-align:center">total_bedrooms</th>
<th style="text-align:center">population</th>
<th style="text-align:center">households</th>
<th style="text-align:center">median_income</th>
<th style="text-align:center">median_house_value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">-119.6</td>
<td style="text-align:center">35.6</td>
<td style="text-align:center">28.6</td>
<td style="text-align:center">2643.7</td>
<td style="text-align:center">539.4</td>
<td style="text-align:center">1429.6</td>
<td style="text-align:center">501.2</td>
<td style="text-align:center">3.9</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">2.0</td>
<td style="text-align:center">2.1</td>
<td style="text-align:center">12.6</td>
<td style="text-align:center">2179.9</td>
<td style="text-align:center">421.5</td>
<td style="text-align:center">1147.9</td>
<td style="text-align:center">384.5</td>
<td style="text-align:center">1.9</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">-124.3</td>
<td style="text-align:center">32.5</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">2.0</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">3.0</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">0.5</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">-121.8</td>
<td style="text-align:center">33.9</td>
<td style="text-align:center">18.0</td>
<td style="text-align:center">1462.0</td>
<td style="text-align:center">297.0</td>
<td style="text-align:center">790.0</td>
<td style="text-align:center">282.0</td>
<td style="text-align:center">2.6</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">-118.5</td>
<td style="text-align:center">34.2</td>
<td style="text-align:center">29.0</td>
<td style="text-align:center">2127.0</td>
<td style="text-align:center">434.0</td>
<td style="text-align:center">1167.0</td>
<td style="text-align:center">409.0</td>
<td style="text-align:center">3.5</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">-118.0</td>
<td style="text-align:center">37.7</td>
<td style="text-align:center">37.0</td>
<td style="text-align:center">3151.2</td>
<td style="text-align:center">648.2</td>
<td style="text-align:center">1721.0</td>
<td style="text-align:center">605.2</td>
<td style="text-align:center">4.8</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">-114.3</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">52.0</td>
<td style="text-align:center">37937.0</td>
<td style="text-align:center">6445.0</td>
<td style="text-align:center">35682.0</td>
<td style="text-align:center">6082.0</td>
<td style="text-align:center">15.0</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<h4 id="构建第一个模型"><a href="#构建第一个模型" class="headerlink" title="构建第一个模型"></a>构建第一个模型</h4><p>在这个基础练习中，我们以 <code>median_house_value</code> 为标签（也称为目标），使用 <code>total_rooms</code> 作为输入特征。</p>
<p><strong>注意：</strong> 因为我们使用的城市街区的数据，所以 <code>total_rooms</code> 表示的是该街区的所有房间数，而不是单间房屋的房间数（想想这数据也不是 :)）。</p>
<p>为了训练模型，我们将使用 TensorFlow <a href="https://www.tensorflow.org/get_started/estimator" target="_blank" rel="noopener">Estimator</a> API 提供的 <a href="https://www.tensorflow.org/get_started/estimator" target="_blank" rel="noopener">LinearRegressor</a> 接口。此 API 负责处理大量低级别的模型搭建工作，并会提供执行模型训练、评估和推理的便捷方法。</p>
<h5 id="第一步：定义特征并配置特征列"><a href="#第一步：定义特征并配置特征列" class="headerlink" title="第一步：定义特征并配置特征列"></a>第一步：定义特征并配置特征列</h5><p>特征字段主要有两种数据类型：</p>
<ul>
<li>分类数据：一种文字数据，本基础练习不含这种数据，但可能会在看到类似包括家居风格以及房地产广告词这类数据。</li>
<li>数值数据：一种数字数据（整数或浮点数）以及你希望视为数字的数据，但有时可能也会把例如邮编这种数据也是为分类数据来做处理（在稍后的进行详细说明）。</li>
</ul>
<p>现在我们的数据还是 pandas 的 <code>DataFrame</code> 数据格式，我们得让 TensorFlow 读懂这些数据。</p>
<p>首先，我们需要指定每个特征包含的数据类型（以上两种类型），然后我们使用一种称为“特征列”的结构来表示特征的数据类型。</p>
<p><strong>注意：</strong> 特征列仅仅存储对特征数据的描述，和特征数据本身没关系。</p>
<p>现在，我们使用上面所说的 <code>total_rooms</code> 作为数值输入特征。以下代码会从 <code>house_data</code> 中提取 <code>total_rooms</code> 数据，并使用 <code>numeric_column</code> 定义特征列，这样会将其数据指定为数值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到输入特征：total_rooms</span></span><br><span class="line">my_feature = house_data[[<span class="string">'total_rooms'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 total_rooms 配置为数值特征列</span></span><br><span class="line">feature_colums = [tf.feature_column.numeric_column(<span class="string">'total_rooms'</span>)]</span><br><span class="line"></span><br><span class="line">print(my_feature)</span><br><span class="line">print(feature_columns)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">total_rooms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8899</td>
<td style="text-align:center">8803.0</td>
</tr>
<tr>
<td style="text-align:center">682</td>
<td style="text-align:center">3967.0</td>
</tr>
<tr>
<td style="text-align:center">13332</td>
<td style="text-align:center">3735.0</td>
</tr>
<tr>
<td style="text-align:center">9720</td>
<td style="text-align:center">2242.0</td>
</tr>
<tr>
<td style="text-align:center">14046</td>
<td style="text-align:center">4125.0</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">6328</td>
<td style="text-align:center">1476.0</td>
</tr>
<tr>
<td style="text-align:center">2329</td>
<td style="text-align:center">1379.0</td>
</tr>
<tr>
<td style="text-align:center">14272</td>
<td style="text-align:center">1382.0</td>
</tr>
<tr>
<td style="text-align:center">4124</td>
<td style="text-align:center">3443.0</td>
</tr>
<tr>
<td style="text-align:center">5124</td>
<td style="text-align:center">718.0</td>
</tr>
</tbody>
</table>
<p>[17000 rows x 1 columns]</p>
<p>[_NumericColumn(key=’total_rooms’, shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]</p>
<h5 id="第二部：定义标签-目标"><a href="#第二部：定义标签-目标" class="headerlink" title="第二部：定义标签 / 目标"></a>第二部：定义标签 / 目标</h5><p>接下来，我们把 <code>median_house_value</code> 定义为我们的目标。同样，先从 <code>house_data</code> 中提取它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targets = housse_data[<span class="string">"median_house_value"</span>]</span><br></pre></td></tr></table></figure>
<h5 id="第三部：配置-LinearRegressor"><a href="#第三部：配置-LinearRegressor" class="headerlink" title="第三部：配置 LinearRegressor"></a>第三部：配置 LinearRegressor</h5><p>接下来我们使用 LinearRegressor 配置线性回归模型，并使用 GradientDescentOptimizer（它会实现小批量随机梯度下降法（SGD）） 训练该模型。</p>
<p><code>learning_rate</code> 参数可控制梯度步长的大小。</p>
<p><strong>注意：</strong> 为了安全起见，我们会通过 <code>clip_gradients_by_norm</code> 将<a href="https://developers.google.com/machine-learning/glossary/#gradient_clipping" target="_blank" rel="noopener">梯度裁剪</a>应用到我们的优化器。梯度裁剪能确保梯度大小在训练期间不会变得过大，梯度过大会导致梯度下降法失败。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用梯度下降法作为模型训练的优化器，并应用梯度裁剪</span></span><br><span class="line"><span class="comment"># 将梯度下降的学习速率设置为 0.0000001</span></span><br><span class="line">my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.0000001</span>)</span><br><span class="line">my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特征列和优化器应用到我们的线性回归模型上</span></span><br><span class="line">linear_regressor = tf.estimator.LinearRegressor(</span><br><span class="line">    feature_column=feature_colums, optimizer=my_optimizer</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h5 id="第四步：定义输入函数"><a href="#第四步：定义输入函数" class="headerlink" title="第四步：定义输入函数"></a>第四步：定义输入函数</h5><p>要把数据导入 LinearRegressor，我们需要定义一个输入函数，得让 TensorFlow 知道怎么对数据进行预处理，以及在模型训练期间如何进行批处理、随机处理、重复数据。</p>
<p>首先，我们需要把 pandas 数据转换成 Numpy 数组字典。然后，我们就能使用 TensorFlow 的 <a href="https://www.tensorflow.org/programmers_guide/datasets" target="_blank" rel="noopener">Dataset API</a> 根据我们的数据构建 Dataset 对象，并将数据拆分成大小为 batch_size 的多批数据，以按照指定周期数（num_epochs）进行重复。</p>
<p><strong>注意：</strong> 如果 num_epochs=None，那么输入的数据会无限期重复。</p>
<p>然后，如果 <code>shuffle</code> 设置为 True，那么我们就会对数据进行随机处理，以便在训练期间以随机方式传递到模型。<code>buffer_size</code> 参数会指定 shuffle 将从随机抽样的数据集的大小。</p>
<p>最后，输入函数会为该数据集构建一个迭代器，并向 LinearRegressor 返回下一批数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input_fn</span><span class="params">(features, targets, batch_size=<span class="number">1</span>, shuffle=True, num_epochs=None)</span>:</span></span><br><span class="line">    <span class="comment"># 将 pandas 特征数据转换成 Numpy 数组字段</span></span><br><span class="line">    <span class="comment"># features: DataFrame -&gt; Dict(&#123;column_name: column_data(Series)&#125;) -&gt; np.array</span></span><br><span class="line">    <span class="comment"># 这里数据类型的转化：输入之前拿到的那列 DataFrame，最后获取那列数据的一个 np.array 类数组对象</span></span><br><span class="line">    features = &#123; key: np.array(value) <span class="keyword">for</span> key, value <span class="keyword">in</span> dict(features).items() &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建 Dataset 对象，并将数据拆分成大小为 batch_size 的多批数据，以 num_epochs 周期重复</span></span><br><span class="line">    <span class="comment"># 每个步长都会跑 batch_size 批的数据</span></span><br><span class="line">    ds = Dataset.from_tensor_slices((features, targets))  <span class="comment"># 上限 2 GB</span></span><br><span class="line">    ds = ds.batch(batch_size).repeat(num_epochs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机化数据（一共 17k 条数据，每次随机取 10k 条）</span></span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        ds = ds.shuffle(buffer_size=<span class="number">10000</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回下一个 batch 的数据</span></span><br><span class="line">    features, labels = ds.make_one_shot_iterator().get_next()</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br></pre></td></tr></table></figure>
<p>输入函数的初步解释已经写在函数定义中了，更详细的文档参阅 <a href="https://www.tensorflow.org/programmers_guide/datasets" target="_blank" rel="noopener">TensorFlow 编程人员指南</a>。</p>
<h5 id="第五步：训练模型"><a href="#第五步：训练模型" class="headerlink" title="第五步：训练模型"></a>第五步：训练模型</h5><p>现在，我们可以使用 <code>train()</code> 来训练我们的模型。我们将 <code>my_input_fn</code> 封装在 lambda 中，这样我们就可以把 <code>my_features</code> 和 <code>targets</code> 最为参数传入（更过详阅 <a href="https://www.tensorflow.org/get_started/input_fn#passing_input_fn_data_to_your_model" target="_blank" rel="noopener">TensorFlow 输入函数教程</a>）。</p>
<p>首先，我们先训练 100 个步长。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ = linear_regressor.train(</span><br><span class="line">    input_fn=<span class="keyword">lambda</span>: my_input_fn(my_feature, targets),</span><br><span class="line">    steps=<span class="number">100</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h5 id="第六步：评估模型"><a href="#第六步：评估模型" class="headerlink" title="第六步：评估模型"></a>第六步：评估模型</h5><p>经过上面的训练之后，我们现在来做一次预测，看看模型与这些数据的拟合情况。</p>
<p><strong>注意：</strong> 训练误差衡量的是你的模型与训练数据的拟合情况，不能衡量模型<strong>泛化到新数据</strong>上的效果。如果评估模型的泛化能力在后面探索。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为预测创建一个输入函数</span></span><br><span class="line"><span class="comment"># 因为我们就做一次预测，就没必要重复打乱数据了</span></span><br><span class="line">prediction_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature, target, num_epochs=<span class="number">1</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用模型的 predict() 函数进行预测</span></span><br><span class="line">predictions = linear_regressor.predict(input_fn=prediction_input_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将预测数据格式化成 Numpy 的数组类型，方便检查</span></span><br><span class="line">predictions = np.arrary([item[<span class="string">'predictions'</span>][<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> predictions])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出均方误差和均方根误差</span></span><br><span class="line">mean_squared_error = metrics.mean_squared_error(predictions, targets)</span><br><span class="line">root_mean_squared_error = math.sqrt(mean_squared_error)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Mean Squared Error (on training data): %0.3f"</span> % mean_squared_error)</span><br><span class="line">print(<span class="string">"Root Mean Squared Error (on training data): %0.3f"</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mean Squared Error (on training data): 56367.025</span><br><span class="line">Root Mean Squared Error (on training data): 237.417</span><br></pre></td></tr></table></figure>
<p>均方差和均方根误差都已经算出来了，但是我们该怎么去评估这个误差是否能被接受呢？</p>
<p>均方根误差（RMSE）是一个很好的特征，它可以在与原目标相同的规模下解读。</p>
<p>我们来比较下 RMSE 与目标最大值和最小值的差值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">min_house_value = house_data[<span class="string">'median_house_value'</span>].min()</span><br><span class="line">max_house_value = house_data[<span class="string">'median_house_value'</span>].max()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Min. median house value: %0.3f'</span> % min_house_value)</span><br><span class="line">print(<span class="string">'Max. median house value: %0.3f'</span> % max_house_value)</span><br><span class="line">print(<span class="string">'Difference between Min. and Max.: %0.3f'</span> % (max_house_value - min_house_value))</span><br><span class="line">print(<span class="string">'Root Mean Squared Error: %0.3f'</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Min. Median House value: 14.999</span><br><span class="line">Max. Median House value: 500.001</span><br><span class="line">Difference between Min. and Max.: 485.002</span><br><span class="line">Root Mean Squared Error: 237.417</span><br></pre></td></tr></table></figure>
<p>通过上面的计算，我们的误差跨越了目标值的一半。这意味着我们的误差很大吗？</p>
<p>那我们有什么办法来缩小这个误差吗？</p>
<p>首先，我们可以了解下根据总体摘要统计信息，预测和目标的符合情况。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calibration_data = pd.DataFrame()</span><br><span class="line">calibration_data[<span class="string">'predictions'</span>] = pd.Series(predictions)</span><br><span class="line">calibration_data[<span class="string">'targets'</span>] = pd.Series(targets)</span><br><span class="line">calibration_data.describe()</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.0</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">0.2</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">1.9</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p>以上的这些参数指标，对我们评价模型的预测值有什么意义吗？</p>
<p>也许可以比较下平均值和模型的 RMSE？各种分位数和 RMSE？</p>
<p>我相信不管和哪个指标比较，我们现在的预测值都是一坨屎！</p>
<p>为了更直观的显示我们的预测有多狗屎，我们先从这个数据集拿一部分均匀分布的随机数据样本（全部绘制出来太乱了，看不清），绘制散点图。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample = house_data.sample(n=<span class="number">300</span>)</span><br></pre></td></tr></table></figure>
<p>然后，我们根据模型的偏差项和特征权重绘制学到的线，并绘制散点图。改线以红色显示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 total_rooms 数据的最大最小值</span></span><br><span class="line">x_0 = sample[<span class="string">'total_rooms'</span>].min()</span><br><span class="line">x_1 = sample[<span class="string">'total_rooms'</span>].max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取在模型最终训练后的权重与偏差</span></span><br><span class="line">weight = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/total_rooms/weights'</span>)[<span class="number">0</span>]</span><br><span class="line">bias = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/bias_weights'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过获取的预测权重与偏差计算出 median_house_value 预测的最大最小值</span></span><br><span class="line">y_0 = weight * x_0 + bias</span><br><span class="line">y_1 = weight * x_1 + bias</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出我们的预测线性回归线 (x_0, y_0) (x_1, y_1) | c='r' 是 color='red' 的意思 :)</span></span><br><span class="line">plt.plot([x_0, x_1], [y_0, y_1], c=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上坐标描述</span></span><br><span class="line">plt.xlabel(<span class="string">'total_rooms'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'median_house_value'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把我们的样本点一个个“点上去”</span></span><br><span class="line">plt.sactter(sample[<span class="string">'total_rooms'</span>], sample[<span class="string">'median_house_value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把图画出来</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/14_25_47__07_27_2018.jpg" alt="散点图"></p>
<p>哈哈哈，是不是很直观地就发现我们的预测就是一坨屎。</p>
<h4 id="调整模型超参数"><a href="#调整模型超参数" class="headerlink" title="调整模型超参数"></a>调整模型超参数</h4><p>为了方便起见，我们把上面几个步骤合并在一个函数里面，然后把要调整的参数暴露出来，这样就能很容易的测试各种不同参数所模拟的效果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(learning_rate, steps, batch_size, input_feature=<span class="string">'total_rooms'</span>)</span>:</span></span><br><span class="line">    periods = <span class="number">10</span></span><br><span class="line">    steps_per_period = steps / periods</span><br><span class="line">    </span><br><span class="line">    my_feature = input_feature</span><br><span class="line">    my_feature_data = house_data[[my_feature]]</span><br><span class="line">    </span><br><span class="line">    my_target = <span class="string">'median_house_value'</span></span><br><span class="line">    targets = house_data[my_target]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建特征列</span></span><br><span class="line">    feature_columns = [tf.feature_column.numeric_column(my_feature)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建输入函数</span></span><br><span class="line">    training_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature_data, targets, batch_size=batch_size)</span><br><span class="line">    prediction_input_fn = <span class="keyword">lambda</span>: my_input_fn(my_feature_data, targets, num_epochs=<span class="number">1</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建线性回归模型</span></span><br><span class="line">    my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)</span><br><span class="line">    my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="number">5.0</span>)</span><br><span class="line">    linear_regressor = tf.estimator.LinearRegressor(</span><br><span class="line">        feature_columns=feature_columns,</span><br><span class="line">        optimizer=my_optimizer</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot 基本配置</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))  <span class="comment"># 每个网格 15 X 6 大小</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 当前操作一行两列的第一个图表</span></span><br><span class="line">    plt.title(<span class="string">'Learned Line by Period'</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    plt.xlabel(my_feature)  <span class="comment"># 设置横坐标名</span></span><br><span class="line">    plt.ylabel(my_label)  <span class="comment"># 设置纵坐标名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取绘制样本</span></span><br><span class="line">    sample = house_data.sample(n=<span class="number">300</span>)</span><br><span class="line">    plt.scatter(sample[my_feature], sample[my_lable])</span><br><span class="line">    colors = [cm.coolwarm(x) <span class="keyword">for</span> x <span class="keyword">in</span> np.linspace(<span class="number">-1</span>, <span class="number">1</span>, periods)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型，每个周期评估下误差损失</span></span><br><span class="line">    print(<span class="string">'Training model...'</span>)</span><br><span class="line">    print(<span class="string">'RMSE (on training data): '</span>)</span><br><span class="line">    root_mean_squared_errors = []</span><br><span class="line">    <span class="keyword">for</span> period <span class="keyword">in</span> range(<span class="number">0</span>, periods):</span><br><span class="line">        linear_regressor.train(</span><br><span class="line">            input_fn=training_input_fn,</span><br><span class="line">            steps=steps_per_period</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每个周期训练完之后计算一下损失</span></span><br><span class="line">        predictions = linear_regressor.predict(input_fn=prediction_input_fn)</span><br><span class="line">        perdictions = np.array([item[<span class="string">'predictions'</span>][<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> predictions])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        root_mean_squared_error = math.sqrt(</span><br><span class="line">            metrics.mean_squared_error(predictions, targets)</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出当前损失</span></span><br><span class="line">        print(<span class="string">'period %02d : %0.2f'</span> % (period, root_mean_squared_error))</span><br><span class="line">        <span class="comment"># 将当前损失加到记录损失的列表中</span></span><br><span class="line">        root_mean_squared_errors.append(root_mean_squared_error)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 为了画出来的效果，适当调整下横纵坐标的大小</span></span><br><span class="line">        y_extents = np.array([<span class="number">0</span>, sample[my_label].max()])</span><br><span class="line">        </span><br><span class="line">        weight = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/%s/weights'</span> % input_feature)[<span class="number">0</span>]</span><br><span class="line">        bias = linear_regressor.get_variable_value(<span class="string">'linear/linear_model/bias_weights'</span>)</span><br><span class="line">        </span><br><span class="line">        x_extents = (y_extents - bias) / weight</span><br><span class="line">        x_extents = np.maximum(</span><br><span class="line">            np.minimum(x_extents, sample[my_feature].max()),</span><br><span class="line">            sample[my_feature].min()</span><br><span class="line">        )</span><br><span class="line">        y_extents = weight * x_extents + bias</span><br><span class="line">        plt.plot(x_extents, y_extents, color=colors[period])</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'Model training finished.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 现在把每个周期的损失画出来</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Periods'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'RMSE'</span>)</span><br><span class="line">    plt.title(<span class="string">'Root Mean Squared Error vs. Periods'</span>)</span><br><span class="line">    plt.tight_layout()  <span class="comment"># 自动调整子图的布局和坐标刻度的大小</span></span><br><span class="line">    plt.plot(root_mean_squared_errors)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将最终的预测值和目标值放在一张表里展示</span></span><br><span class="line">    calibration_data = pd.DataFrame()</span><br><span class="line">    calibration_data[<span class="string">"predictions"</span>] = pd.Series(predictions)</span><br><span class="line">    calibration_data[<span class="string">"targets"</span>] = pd.Series(targets)</span><br><span class="line">    display.display(calibration_data.describe())</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Final RMSE (on training data): %0.2f"</span> % root_mean_squared_error)</span><br></pre></td></tr></table></figure>
<p>最后我们直接调用这个函数就可以方便地测试各种参数搭配的 RMSE 的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_model(</span><br><span class="line">    learning_rate=<span class="number">0.00002</span>,</span><br><span class="line">    steps=<span class="number">500</span>,</span><br><span class="line">    batch_size=<span class="number">5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Training model...</span><br><span class="line">RMSE (on training data):</span><br><span class="line">  period 00 : 225.63</span><br><span class="line">  period 01 : 214.42</span><br><span class="line">  period 02 : 204.44</span><br><span class="line">  period 03 : 194.97</span><br><span class="line">  period 04 : 187.23</span><br><span class="line">  period 05 : 180.53</span><br><span class="line">  period 06 : 175.00</span><br><span class="line">  period 07 : 171.07</span><br><span class="line">  period 08 : 169.21</span><br><span class="line">  period 09 : 167.37</span><br><span class="line">Model training finished.</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">116.3</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">95.9</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.1</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">64.3</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">93.6</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">138.7</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">1669.2</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/17_18_02__07_27_2018.jpg" alt="模拟结果"></p>
<p>当然，我们还可以试试其他参数作为我们的特征值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_model(</span><br><span class="line">    learning_rate=<span class="number">0.00002</span>,</span><br><span class="line">    steps=<span class="number">1000</span>,</span><br><span class="line">    batch_size=<span class="number">5</span>,</span><br><span class="line">    input_feature=<span class="string">"population"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Training model...</span><br><span class="line">RMSE (on training data):</span><br><span class="line">  period 00 : 225.63</span><br><span class="line">  period 01 : 214.62</span><br><span class="line">  period 02 : 204.67</span><br><span class="line">  period 03 : 196.42</span><br><span class="line">  period 04 : 189.12</span><br><span class="line">  period 05 : 183.91</span><br><span class="line">  period 06 : 180.03</span><br><span class="line">  period 07 : 177.64</span><br><span class="line">  period 08 : 176.45</span><br><span class="line">  period 09 : 175.95</span><br><span class="line">Model training finished.</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">predictions</th>
<th style="text-align:center">targets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">17000.0</td>
<td style="text-align:center">17000.0</td>
</tr>
<tr>
<td style="text-align:center">mean</td>
<td style="text-align:center">121.8</td>
<td style="text-align:center">207.3</td>
</tr>
<tr>
<td style="text-align:center">std</td>
<td style="text-align:center">97.8</td>
<td style="text-align:center">116.0</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">0.3</td>
<td style="text-align:center">15.0</td>
</tr>
<tr>
<td style="text-align:center">25%</td>
<td style="text-align:center">67.3</td>
<td style="text-align:center">119.4</td>
</tr>
<tr>
<td style="text-align:center">50%</td>
<td style="text-align:center">99.4</td>
<td style="text-align:center">180.4</td>
</tr>
<tr>
<td style="text-align:center">75%</td>
<td style="text-align:center">146.6</td>
<td style="text-align:center">265.0</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">3040.1</td>
<td style="text-align:center">500.0</td>
</tr>
</tbody>
</table>
<p><img src="https://pages-ncdn-1253600859.cossh.myqcloud.com/TensorFlow/17_41_30__07_27_2018.jpg" alt="模拟结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习基本的 TensorFlow 概念&lt;/li&gt;
&lt;li&gt;在 TensorFlow 中使用 LinearRegressor 类并基于单个输入特征预测各城市街区的房屋价值中位数&lt;/li&gt;
&lt;li&gt;使用均方根误差 (RMSE) 评估模型预测的准确率&lt;/li&gt;
&lt;li&gt;通过调整模型的超参数提高模型准确率&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="文档" scheme="https://yuanblq.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解Python元类</title>
    <link href="https://yuanblq.github.io/2018/05/31/%E7%90%86%E8%A7%A3Python%E5%85%83%E7%B1%BB/"/>
    <id>https://yuanblq.github.io/2018/05/31/理解Python元类/</id>
    <published>2018-05-31T08:11:12.000Z</published>
    <updated>2018-05-31T08:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>想要理解 Python 中的元类只要记住：一切皆对象。记住这 5 个字，理解元类就会轻松很多。</p>
<a id="more"></a>
<h3 id="先创建一个自定义对象瞧瞧"><a href="#先创建一个自定义对象瞧瞧" class="headerlink" title="先创建一个自定义对象瞧瞧"></a>先创建一个自定义对象瞧瞧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_obj = MyClass()</span><br><span class="line"></span><br><span class="line">my_obj</span><br></pre></td></tr></table></figure>
<pre><code>&lt;__main__.MyClass at 0x10907aa20&gt;
</code></pre><p>我们，很容易就获得了一个自定义的对象。那在这期间都发生了些什么呢？</p>
<p><code>my_obj = MyClass()</code> 这段代码运行的时候，我们都知道这是在实例化一个类来获取这个类的对象，实例化期间会去走 <code>MyClass</code> 类中的 <code>__init__()</code> 方法。</p>
<p>当然，我们都知道在走 <code>__init__()</code> 方法之前还会先去走 <code>MyClass</code> 类的 <code>__new__()</code> 方法，通过 <code>__new__()</code> 方法来创建类的实例。Python 最常见的单例就是通过 <code>__new__()</code> 方法实现的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">"in MyClass __new__ method"</span>)</span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"create a new instance"</span>)</span><br><span class="line">            cls.__instance = super(MyClass, cls).__new__(cls, *args)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">c1 = MyClass()</span><br><span class="line">c2 = MyClass()</span><br><span class="line">c1, c2</span><br></pre></td></tr></table></figure>
<pre><code>in MyClass __new__ method
create a new instance
in MyClass __new__ method





(&lt;__main__.MyClass at 0x1090a1f60&gt;, &lt;__main__.MyClass at 0x1090a1f60&gt;)
</code></pre><p>实际上通过这个单例模式可以了解到，其实真正创建对象的方法是 <code>__new__()</code>，而 <code>__init__()</code> 方法只是给已经创建出来的对象赋予属性等操作。</p>
<h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>在 Python 中，函数可以是个对象，类也可以是个对象。既然类是个对象，那就应该拥有对象所拥有的特性：</p>
<ul>
<li>可以传递给其他变量</li>
<li>可以拷贝它</li>
<li>可以动态地给它增加属性</li>
<li>可以作为参数传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mc = MyClass</span><br><span class="line">mc.new_attr = <span class="string">'Hello'</span></span><br><span class="line">mc, mc.new_attr</span><br></pre></td></tr></table></figure>
<pre><code>(__main__.MyClass, &apos;Hello&apos;)
</code></pre><h3 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h3><p>既然类也是对象，那我们就可以动态的创建一个类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dynamic_class</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'Class_1'</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Class_1</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Class_1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> OtherClass</span><br><span class="line"></span><br><span class="line">d1 = create_dynamic_class(<span class="string">'Class_1'</span>)</span><br><span class="line">d2 = create_dynamic_class(<span class="string">'Class_2'</span>)</span><br><span class="line"></span><br><span class="line">d1, d2</span><br></pre></td></tr></table></figure>
<pre><code>(__main__.create_dynamic_class.&lt;locals&gt;.Class_1,
 __main__.create_dynamic_class.&lt;locals&gt;.OtherClass)
</code></pre><p>但是上面的类创建地还不够“动态”，熟悉 Python 应该知道，这时候就要上 <code>type</code> 了。</p>
<p>使用 <code>type</code> 可以这样创建类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TClass = type(<span class="string">'TClass'</span>, (), &#123;&#125;)</span><br><span class="line">tc = TClass()</span><br><span class="line">tc, type(tc)</span><br></pre></td></tr></table></figure>
<pre><code>(&lt;__main__.TClass at 0x10907a470&gt;, __main__.TClass)
</code></pre><p><code>type()</code> 传递三个参数：类名、父类们、属性。</p>
<p><code>TClass = type(&#39;TClass&#39;, (), {})</code> 这个形式有没有觉得很熟悉，像不像通过类来创建对象这个形式 <code>obj = SomeClass()</code>。实际上 <code>type</code> 算是一个类，只不过小写的形式有点迷惑性，不过想想 <code>str</code>、<code>int</code>、<code>dict</code>、<code>list</code>、<code>set</code> 不都是小写的吗。</p>
<p>这样一来，其实所有对象都是 <code>type</code> 的子类？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(int, type), isinstance(str, type), isinstance(dict, type), isinstance(MyClass, type)</span><br></pre></td></tr></table></figure>
<pre><code>(True, True, True, True)
</code></pre><p>果然就是这个样子！</p>
<h3 id="定义类的创建过程"><a href="#定义类的创建过程" class="headerlink" title="定义类的创建过程"></a>定义类的创建过程</h3><p>通过上面单例的示例代码可知，通过 <code>__new__()</code> 方法可以控制对象的创建过程。</p>
<p>而元类就是利用这一特性！控制类的创建过程。</p>
<p>所有的类，默认情况下都是由 <code>type</code> 控制创建的，我们想自定义类的创建过程当然是修改父类 <code>type</code> 的属性。正常情况就是继承 <code>type</code> 创建自已的 “<code>type</code> 类”然后让我们的类继承我们的 “<code>type</code> 类”：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">'got MyMetaClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'DeniedClass'</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError</span><br><span class="line">        <span class="keyword">return</span> super(MyMetaClass, cls).__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OKClass</span><span class="params">(metaclass=MyMetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">'got OKClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(OKClass, cls).__new__(cls, *args)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'got OKClass __init__()'</span>)</span><br><span class="line"></span><br><span class="line">ok_class = OKClass()</span><br><span class="line">ok_class</span><br></pre></td></tr></table></figure>
<pre><code>got MyMetaClass __new__()
got OKClass __new__()
got OKClass __init__()





&lt;__main__.OKClass at 0x1090cc5f8&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeniedClass</span><span class="params">(metaclass=MyMetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(<span class="string">'got DeniedClass __new__()'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(DeniedClass, cls).__new__(cls, *args)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'got DeniedClass __init__()'</span>)</span><br><span class="line"></span><br><span class="line">denied_class = DeniedClass()</span><br><span class="line">denied_class</span><br></pre></td></tr></table></figure>
<pre><code>got MyMetaClass __new__()



---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-9-913341894ab1&gt; in &lt;module&gt;()
----&gt; 1 class DeniedClass(metaclass=MyMetaClass):
      2     def __new__(cls, *args):
      3         print(&apos;got DeniedClass __new__()&apos;)
      4         return super(DeniedClass, cls).__new__(cls, *args)
      5 


&lt;ipython-input-7-266bb1820d0c&gt; in __new__(cls, name, bases, attrs)
      3         print(&apos;got MyMetaClass __new__()&apos;)
      4         if name == &apos;DeniedClass&apos;:
----&gt; 5             raise RuntimeError
      6         return super(MyMetaClass, cls).__new__(cls, name, bases, attrs)


RuntimeError: 
</code></pre><p>从上面两个类实例的创建例子可见，<strong>实例化一个类对象的时候会先通过该类继承的元类创建出该类的类对象，然后通过该类的类对象创建出该类的对象。</strong></p>
<p>这句话很绕，其实很简单，就是从上往下不断地创建对象（元类 –&gt; 类 –&gt; 实例对象）。</p>
<h3 id="元类应用"><a href="#元类应用" class="headerlink" title="元类应用"></a>元类应用</h3><p>大家最熟悉的一个元类应用就是 <code>Django</code> 的 <code>ORM</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line">p  = Person(name=<span class="string">'bob'</span>, age=<span class="number">35</span>)</span><br><span class="line">print(p.age)</span><br></pre></td></tr></table></figure>
<p>最终输出 <code>p.age</code> 为 <code>35</code> 而不是 <code>models.IntegerField()</code>，这是因为 <code>models.Model</code> 实现的自定义元类对数据库做了一系列 hook，最后暴露给我们这些简单的 API。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000#0" target="_blank" rel="noopener">使用元类</a></li>
<li><a href="http://www.dongwm.com/archives/%E8%AF%A6%E8%A7%A3Python/" target="_blank" rel="noopener">详解Python元类</a></li>
<li><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="noopener">What are metaclasses in Python?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要理解 Python 中的元类只要记住：一切皆对象。记住这 5 个字，理解元类就会轻松很多。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
