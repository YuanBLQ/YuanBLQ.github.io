<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanblq.github.io/"/>
  <updated>2017-08-02T12:40:14.322Z</updated>
  <id>https://yuanblq.github.io/</id>
  
  <author>
    <name>Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django创建与链接数据库</title>
    <link href="https://yuanblq.github.io/2017/08/02/Django%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://yuanblq.github.io/2017/08/02/Django创建与链接数据库/</id>
    <published>2017-08-02T12:40:14.000Z</published>
    <updated>2017-08-02T12:40:14.322Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>名人的颜值有多高？</title>
    <link href="https://yuanblq.github.io/2017/06/22/%E5%90%8D%E4%BA%BA%E7%9A%84%E9%A2%9C%E5%80%BC%E6%9C%89%E5%A4%9A%E9%AB%98%EF%BC%9F/"/>
    <id>https://yuanblq.github.io/2017/06/22/名人的颜值有多高？/</id>
    <published>2017-06-22T14:22:37.000Z</published>
    <updated>2017-08-02T14:30:21.249Z</updated>
    
    <content type="html"><![CDATA[<p>玩弄微软小冰的时候发现有个颜值查询功能，作为一枚颜值正无穷的帅比简直高处不胜寒。<br>后来突发奇想：是不是要想被人民群众记住，不仅仅要有才华，而且颜值也必须得高？</p>
<a id="more"></a>
<p>通过抓取百度百科里面的500多位艺术家信息，传给微软小冰评分后得出如下的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">(&apos;安德里亚·阿诺德&apos;, &apos;9.5&apos;), (&apos;许翰英&apos;, &apos;9.4&apos;), (&apos;李国静&apos;, &apos;8.9&apos;), (&apos;让·维果&apos;, &apos;8.8&apos;),</div><div class="line"> (&apos;斯潘塞·图尼克&apos;, &apos;8.7&apos;), (&apos;缪晓铮&apos;, &apos;8.6&apos;), (&apos;叶福海&apos;, &apos;8.5&apos;), (&apos;李吉瑞&apos;, &apos;8.5&apos;),</div><div class="line"> (&apos;刘翠霞&apos;, &apos;8.5&apos;), (&apos;亨利·金&apos;, &apos;8.4&apos;), (&apos;谢冬雪&apos;, &apos;8.4&apos;), (&apos;孟科娟&apos;, &apos;8.3&apos;),</div><div class="line"> (&apos;白淑贤&apos;, &apos;8.3&apos;), (&apos;King Crimson&apos;, &apos;8.3&apos;), (&apos;魏景山&apos;, &apos;8.2&apos;), (&apos;李壬林&apos;, &apos;8.2&apos;),</div><div class="line"> (&apos;赵庭景美&apos;, &apos;8.1&apos;), (&apos;侯宗辰&apos;, &apos;8.1&apos;), (&apos;章遏云&apos;, &apos;8.1&apos;), (&apos;安波&apos;, &apos;8.0&apos;),</div><div class="line"> (&apos;黎灼灼&apos;, &apos;8.0&apos;), (&apos;杜吉刚&apos;, &apos;8.0&apos;), (&apos;王少舫&apos;, &apos;8.0&apos;), (&apos;张映哲&apos;, &apos;8.0&apos;),</div><div class="line"> (&apos;玛丽·布莱尔&apos;, &apos;7.9&apos;), (&apos;赫伯特·克格尔&apos;, &apos;7.9&apos;), (&apos;路易·德·菲耐斯&apos;, &apos;7.9&apos;), (&apos;张伐&apos;, &apos;7.8&apos;),</div><div class="line"> (&apos;朱端钧&apos;, &apos;7.8&apos;), (&apos;王泉奎&apos;, &apos;7.8&apos;), (&apos;朱利安·施纳贝尔&apos;, &apos;7.8&apos;), (&apos;石筱英&apos;, &apos;7.7&apos;),</div><div class="line"> (&apos;沈冠初&apos;, &apos;7.7&apos;), (&apos;潘亚文&apos;, &apos;7.7&apos;), (&apos;买鸿钧&apos;, &apos;7.7&apos;), (&apos;启骧&apos;, &apos;7.7&apos;),</div><div class="line"> (&apos;刘令华&apos;, &apos;7.6&apos;), (&apos;张荣培&apos;, &apos;7.6&apos;), (&apos;林忠&apos;, &apos;7.6&apos;), (&apos;胡安·格里斯&apos;, &apos;7.6&apos;),</div><div class="line"> (&apos;于万增&apos;, &apos;7.6&apos;), (&apos;邱霁&apos;, &apos;7.6&apos;), (&apos;王梦云&apos;, &apos;7.5&apos;), (&apos;贾堂霞&apos;, &apos;7.5&apos;),</div><div class="line"> (&apos;曾妮&apos;, &apos;7.5&apos;), (&apos;詹泽&apos;, &apos;7.5&apos;), (&apos;刘中华&apos;, &apos;7.5&apos;), (&apos;郑硕希&apos;, &apos;7.5&apos;),</div><div class="line"> (&apos;丁辰&apos;, &apos;7.5&apos;), (&apos;庄学本&apos;, &apos;7.5&apos;), (&apos;沙蒙&apos;, &apos;7.5&apos;), (&apos;史蒂芬·戴德利&apos;, &apos;7.5&apos;),</div><div class="line"> (&apos;江其虎&apos;, &apos;7.5&apos;), (&apos;张书范&apos;, &apos;7.5&apos;), (&apos;康斯特布尔&apos;, &apos;7.5&apos;), (&apos;钱杏邨&apos;, &apos;7.4&apos;),</div><div class="line"> (&apos;李帆&apos;, &apos;7.4&apos;), (&apos;陆小雅&apos;, &apos;7.4&apos;), (&apos;陈富瑞&apos;, &apos;7.4&apos;), (&apos;万俊彦&apos;, &apos;7.3&apos;),</div><div class="line"> (&apos;李雪峰&apos;, &apos;7.3&apos;), (&apos;胡仙&apos;, &apos;7.3&apos;), (&apos;武兆堤&apos;, &apos;7.3&apos;), (&apos;庚斯博罗&apos;, &apos;7.3&apos;),</div><div class="line"> (&apos;郑天任&apos;, &apos;7.2&apos;), (&apos;新罗山人&apos;, &apos;7.2&apos;), (&apos;让·奥诺雷·弗拉贡纳尔&apos;, &apos;7.2&apos;), (&apos;倪华&apos;, &apos;7.2&apos;),</div><div class="line"> (&apos;吴晓明&apos;, &apos;7.2&apos;), (&apos;汪燕燕&apos;, &apos;7.2&apos;), (&apos;林景亮&apos;, &apos;7.2&apos;), (&apos;朱桂芳&apos;, &apos;7.2&apos;),</div><div class="line"> (&apos;龙行&apos;, &apos;7.2&apos;), (&apos;丁力&apos;, &apos;7.2&apos;), (&apos;海兹&apos;, &apos;7.2&apos;), (&apos;柳新生&apos;, &apos;7.2&apos;),</div><div class="line"> (&apos;李瑞芳&apos;, &apos;7.2&apos;), (&apos;王凤卿&apos;, &apos;7.2&apos;), (&apos;阮兆辉&apos;, &apos;7.2&apos;), (&apos;吴宗锡&apos;, &apos;7.1&apos;),</div><div class="line"> (&apos;刘双印&apos;, &apos;7.1&apos;), (&apos;陈炳熙&apos;, &apos;7.1&apos;), (&apos;普皮·阿瓦蒂&apos;, &apos;7.1&apos;), (&apos;潘璟琍&apos;, &apos;7.1&apos;),</div><div class="line"> (&apos;曾山东&apos;, &apos;7.1&apos;), (&apos;邹为瑞&apos;, &apos;7.1&apos;), (&apos;李素雅&apos;, &apos;7.0&apos;), (&apos;卡尔·德莱叶&apos;, &apos;7.0&apos;),</div><div class="line"> (&apos;周锦堂&apos;, &apos;7.0&apos;), (&apos;罗伯特·劳森伯格&apos;, &apos;7.0&apos;), (&apos;侯永奎&apos;, &apos;7.0&apos;), (&apos;夏川&apos;, &apos;7.0&apos;),</div><div class="line"> (&apos;郭惠兰&apos;, &apos;7.0&apos;), (&apos;尼克·德雷克&apos;, &apos;7.0&apos;), (&apos;亚历山大·康斯坦丁诺维奇·格拉祖诺夫&apos;, &apos;7.0&apos;), (&apos;胡海涛&apos;, &apos;7.0&apos;),</div><div class="line"> (&apos;瞿同祖&apos;, &apos;7.0&apos;), (&apos;许磊然&apos;, &apos;7.0&apos;), (&apos;陶白莉&apos;, &apos;7.0&apos;), (&apos;蔡龙云&apos;, &apos;7.0&apos;),</div><div class="line"> (&apos;朱崇懋&apos;, &apos;7.0&apos;), (&apos;费之雄&apos;, &apos;7.0&apos;), (&apos;齐花坦&apos;, &apos;7.0&apos;), (&apos;辛沪光&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;黄虎威&apos;, &apos;6.9&apos;), (&apos;戈雅&apos;, &apos;6.9&apos;), (&apos;陈士和&apos;, &apos;6.9&apos;), (&apos;李东风&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;黄庆云&apos;, &apos;6.9&apos;), (&apos;刘江川&apos;, &apos;6.9&apos;), (&apos;刘广迎&apos;, &apos;6.9&apos;), (&apos;戴月琴&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;田纬钤&apos;, &apos;6.9&apos;), (&apos;杨和平&apos;, &apos;6.9&apos;), (&apos;马桂芬&apos;, &apos;6.9&apos;), (&apos;陈一&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;赵维莉&apos;, &apos;6.9&apos;), (&apos;杨隆寿&apos;, &apos;6.9&apos;), (&apos;黄准&apos;, &apos;6.9&apos;), (&apos;于俊波&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;李绪洪&apos;, &apos;6.9&apos;), (&apos;钟荣&apos;, &apos;6.9&apos;), (&apos;李家载&apos;, &apos;6.9&apos;), (&apos;拉斐尔·圣齐奥&apos;, &apos;6.9&apos;),</div><div class="line"> (&apos;佟长江&apos;, &apos;6.9&apos;), (&apos;尼古拉斯·卡洛维奇·梅特纳&apos;, &apos;6.9&apos;), (&apos;程玉菁&apos;, &apos;6.9&apos;), (&apos;查国钧&apos;, &apos;6.8&apos;),</div><div class="line"> (&apos;金开诚&apos;, &apos;6.8&apos;), (&apos;爱杜尔·马奈&apos;, &apos;6.8&apos;), (&apos;李延洲&apos;, &apos;6.8&apos;), (&apos;梁京武&apos;, &apos;6.8&apos;),</div><div class="line"> (&apos;尚游&apos;, &apos;6.8&apos;), (&apos;孙正阳&apos;, &apos;6.8&apos;), (&apos;康成元&apos;, &apos;6.8&apos;), (&apos;张少华&apos;, &apos;6.8&apos;),</div><div class="line"> (&apos;阿尔希波夫&apos;, &apos;6.8&apos;), (&apos;范雪朋&apos;, &apos;6.8&apos;), (&apos;梅熹&apos;, &apos;6.8&apos;), (&apos;胡朋&apos;, &apos;6.8&apos;),</div><div class="line"> (&apos;孟令云&apos;, &apos;6.8&apos;), (&apos;林耀光&apos;, &apos;6.8&apos;), (&apos;夏星&apos;, &apos;6.8&apos;), (&apos;徐正濂&apos;, &apos;6.7&apos;),</div><div class="line"> (&apos;宗其香&apos;, &apos;6.7&apos;), (&apos;张藜&apos;, &apos;6.7&apos;), (&apos;郑在石&apos;, &apos;6.7&apos;), (&apos;何迟&apos;, &apos;6.7&apos;),</div><div class="line"> (&apos;贯大元&apos;, &apos;6.7&apos;), (&apos;牟炫甫&apos;, &apos;6.7&apos;), (&apos;曹致友&apos;, &apos;6.7&apos;), (&apos;王开方&apos;, &apos;6.7&apos;),</div><div class="line"> (&apos;孙恩道&apos;, &apos;6.7&apos;), (&apos;马克辛&apos;, &apos;6.7&apos;), (&apos;孙佰钧&apos;, &apos;6.7&apos;), (&apos;康丁斯基&apos;, &apos;6.7&apos;),</div><div class="line"> (&apos;娄际成&apos;, &apos;6.7&apos;), (&apos;区志航&apos;, &apos;6.7&apos;), (&apos;刘云厚&apos;, &apos;6.7&apos;), (&apos;岑范&apos;, &apos;6.7&apos;),</div><div class="line"> (&apos;赵汝平&apos;, &apos;6.6&apos;), (&apos;佩佩·罗梅罗&apos;, &apos;6.6&apos;), (&apos;维拉斯奎兹&apos;, &apos;6.6&apos;), (&apos;雨农&apos;, &apos;6.6&apos;),</div><div class="line"> (&apos;吴兆南&apos;, &apos;6.6&apos;), (&apos;风雨同仁堂&apos;, &apos;6.6&apos;), (&apos;施本铭&apos;, &apos;6.6&apos;), (&apos;郝寿臣&apos;, &apos;6.6&apos;),</div><div class="line"> (&apos;赵开坤&apos;, &apos;6.6&apos;), (&apos;杭子和&apos;, &apos;6.6&apos;), (&apos;雅克·塔蒂&apos;, &apos;6.6&apos;), (&apos;尤金·奥曼迪&apos;, &apos;6.6&apos;),</div><div class="line"> (&apos;汪更新&apos;, &apos;6.6&apos;), (&apos;秦咏诚&apos;, &apos;6.6&apos;), (&apos;夏之秋&apos;, &apos;6.6&apos;), (&apos;洪磊&apos;, &apos;6.6&apos;),</div><div class="line"> (&apos;韩文中&apos;, &apos;6.6&apos;), (&apos;樊其辉&apos;, &apos;6.6&apos;), (&apos;张咏梅&apos;, &apos;6.6&apos;), (&apos;吴钊&apos;, &apos;6.6&apos;),</div><div class="line"> (&apos;冯梦波&apos;, &apos;6.6&apos;), (&apos;秦斌&apos;, &apos;6.6&apos;), (&apos;马云涛&apos;, &apos;6.5&apos;), (&apos;德弗乍克&apos;, &apos;6.5&apos;),</div><div class="line"> (&apos;旺忘望&apos;, &apos;6.5&apos;), (&apos;吴膺群&apos;, &apos;6.5&apos;), (&apos;李金凤&apos;, &apos;6.5&apos;), (&apos;廖辅叔&apos;, &apos;6.5&apos;),</div><div class="line"> (&apos;钟知一&apos;, &apos;6.5&apos;), (&apos;格哈德·里希特&apos;, &apos;6.5&apos;), (&apos;远藤实&apos;, &apos;6.5&apos;), (&apos;高保成&apos;, &apos;6.5&apos;),</div><div class="line"> (&apos;冯欣蕊&apos;, &apos;6.5&apos;), (&apos;萧盛萱&apos;, &apos;6.5&apos;), (&apos;甘特·萨克斯&apos;, &apos;6.5&apos;), (&apos;丁士青&apos;, &apos;6.5&apos;),</div><div class="line"> (&apos;张天志&apos;, &apos;6.5&apos;), (&apos;程熙&apos;, &apos;6.5&apos;), (&apos;艾伦·李&apos;, &apos;6.5&apos;), (&apos;梁小鸾&apos;, &apos;6.5&apos;),</div><div class="line"> (&apos;杨成兴&apos;, &apos;6.5&apos;), (&apos;爱德华·霍珀&apos;, &apos;6.5&apos;), (&apos;江和平&apos;, &apos;6.5&apos;), (&apos;李京盛&apos;, &apos;6.4&apos;),</div><div class="line"> (&apos;罗品超&apos;, &apos;6.4&apos;), (&apos;吴子复&apos;, &apos;6.4&apos;), (&apos;冷冰&apos;, &apos;6.4&apos;), (&apos;简庆福&apos;, &apos;6.4&apos;),</div><div class="line"> (&apos;罗伟&apos;, &apos;6.4&apos;), (&apos;曾竹韶&apos;, &apos;6.4&apos;), (&apos;蒲伯英&apos;, &apos;6.4&apos;), (&apos;马俊子&apos;, &apos;6.4&apos;),</div><div class="line"> (&apos;王晋元&apos;, &apos;6.4&apos;), (&apos;石少华&apos;, &apos;6.4&apos;), (&apos;王苏娅&apos;, &apos;6.4&apos;), (&apos;宋文元&apos;, &apos;6.4&apos;),</div><div class="line"> (&apos;张佩&apos;, &apos;6.4&apos;), (&apos;吴子熊&apos;, &apos;6.4&apos;), (&apos;韩中杰&apos;, &apos;6.3&apos;), (&apos;迭戈·里维拉&apos;, &apos;6.3&apos;),</div><div class="line"> (&apos;清冈纯子&apos;, &apos;6.3&apos;), (&apos;潘利国&apos;, &apos;6.3&apos;), (&apos;吕品昌&apos;, &apos;6.3&apos;), (&apos;黄绍芬&apos;, &apos;6.3&apos;),</div><div class="line"> (&apos;路易·卢米埃尔&apos;, &apos;6.3&apos;), (&apos;蒋碧微&apos;, &apos;6.3&apos;), (&apos;王西彦&apos;, &apos;6.3&apos;), (&apos;周正荣&apos;, &apos;6.3&apos;),</div><div class="line"> (&apos;李林峰&apos;, &apos;6.3&apos;), (&apos;雷开元&apos;, &apos;6.3&apos;), (&apos;华兰&apos;, &apos;6.3&apos;), (&apos;侯一波&apos;, &apos;6.2&apos;),</div><div class="line"> (&apos;陈云岗&apos;, &apos;6.2&apos;), (&apos;刘育熙&apos;, &apos;6.2&apos;), (&apos;杨振雄&apos;, &apos;6.2&apos;), (&apos;黄丰&apos;, &apos;6.2&apos;),</div><div class="line"> (&apos;陈锦芳&apos;, &apos;6.2&apos;), (&apos;谭建勋&apos;, &apos;6.2&apos;), (&apos;邱丽莉&apos;, &apos;6.2&apos;), (&apos;陈望衡&apos;, &apos;6.2&apos;),</div><div class="line"> (&apos;伦布兰特&apos;, &apos;6.2&apos;), (&apos;王向阳&apos;, &apos;6.2&apos;), (&apos;埃里克·罗麦尔&apos;, &apos;6.2&apos;), (&apos;于光华&apos;, &apos;6.1&apos;),</div><div class="line"> (&apos;唐柯&apos;, &apos;6.1&apos;), (&apos;张方明&apos;, &apos;6.1&apos;), (&apos;程继先&apos;, &apos;6.1&apos;), (&apos;叶楠&apos;, &apos;6.1&apos;),</div><div class="line"> (&apos;解国平&apos;, &apos;6.1&apos;), (&apos;田春鸟&apos;, &apos;6.1&apos;), (&apos;陈云诰&apos;, &apos;6.1&apos;), (&apos;朱仲禄&apos;, &apos;6.1&apos;),</div><div class="line"> (&apos;汝龙&apos;, &apos;6.1&apos;), (&apos;燕守谷&apos;, &apos;6.1&apos;), (&apos;史晶歆&apos;, &apos;6.1&apos;), (&apos;丁荫楠&apos;, &apos;6.1&apos;),</div><div class="line"> (&apos;王舜来&apos;, &apos;6.1&apos;), (&apos;袁一灵&apos;, &apos;6.1&apos;), (&apos;陈笑风&apos;, &apos;6.1&apos;), (&apos;赵建忠&apos;, &apos;6.1&apos;),</div><div class="line"> (&apos;刘金彪&apos;, &apos;6.1&apos;), (&apos;许幸之&apos;, &apos;6.1&apos;), (&apos;林子杰&apos;, &apos;6.0&apos;), (&apos;马少宣&apos;, &apos;6.0&apos;),</div><div class="line"> (&apos;阿道夫·门采尔&apos;, &apos;6.0&apos;), (&apos;鲜灵霞&apos;, &apos;6.0&apos;), (&apos;崔占一&apos;, &apos;6.0&apos;), (&apos;叶竹盛&apos;, &apos;6.0&apos;),</div><div class="line"> (&apos;王沂暖&apos;, &apos;6.0&apos;), (&apos;王天华&apos;, &apos;6.0&apos;), (&apos;薛建波&apos;, &apos;6.0&apos;), (&apos;温可铮&apos;, &apos;6.0&apos;),</div><div class="line"> (&apos;黄荣&apos;, &apos;5.9&apos;), (&apos;张安邦&apos;, &apos;5.9&apos;), (&apos;景荣庆&apos;, &apos;5.9&apos;), (&apos;周来&apos;, &apos;5.9&apos;),</div><div class="line"> (&apos;马明&apos;, &apos;5.9&apos;), (&apos;魏光庆&apos;, &apos;5.9&apos;), (&apos;司徒安&apos;, &apos;5.9&apos;), (&apos;路易齐·波凯里尼&apos;, &apos;5.9&apos;),</div><div class="line"> (&apos;张子康&apos;, &apos;5.9&apos;), (&apos;侯长喜&apos;, &apos;5.8&apos;), (&apos;曾俊逸&apos;, &apos;5.8&apos;), (&apos;魏荣元&apos;, &apos;5.8&apos;),</div><div class="line"> (&apos;杨志淳&apos;, &apos;5.8&apos;), (&apos;李苦寒&apos;, &apos;5.8&apos;), (&apos;彭薇&apos;, &apos;5.8&apos;), (&apos;赵焕章&apos;, &apos;5.8&apos;),</div><div class="line"> (&apos;郭春山&apos;, &apos;5.8&apos;), (&apos;埃米尔·库斯图里卡&apos;, &apos;5.8&apos;), (&apos;胡文&apos;, &apos;5.8&apos;), (&apos;朱宪民&apos;, &apos;5.8&apos;),</div><div class="line"> (&apos;陈亚莲&apos;, &apos;5.7&apos;), (&apos;吴志辉&apos;, &apos;5.7&apos;), (&apos;张广志&apos;, &apos;5.7&apos;), (&apos;土登&apos;, &apos;5.7&apos;),</div><div class="line"> (&apos;李晓梅&apos;, &apos;5.7&apos;), (&apos;刘正亮&apos;, &apos;5.7&apos;), (&apos;李味青&apos;, &apos;5.7&apos;), (&apos;小岚云&apos;, &apos;5.7&apos;),</div><div class="line"> (&apos;刘文清&apos;, &apos;5.7&apos;), (&apos;李志明&apos;, &apos;5.7&apos;), (&apos;张越男&apos;, &apos;5.7&apos;), (&apos;细江英公&apos;, &apos;5.7&apos;),</div><div class="line"> (&apos;赵大地&apos;, &apos;5.7&apos;), (&apos;周中华&apos;, &apos;5.6&apos;), (&apos;黄里&apos;, &apos;5.6&apos;), (&apos;吴国松&apos;, &apos;5.6&apos;),</div><div class="line"> (&apos;陈志清&apos;, &apos;5.6&apos;), (&apos;赵和平&apos;, &apos;5.6&apos;), (&apos;杨希雪&apos;, &apos;5.6&apos;), (&apos;严雪亭&apos;, &apos;5.6&apos;),</div><div class="line"> (&apos;许娜&apos;, &apos;5.6&apos;), (&apos;清水裕子&apos;, &apos;5.6&apos;), (&apos;袁克平&apos;, &apos;5.6&apos;), (&apos;钱妙花&apos;, &apos;5.6&apos;),</div><div class="line"> (&apos;卢雅文&apos;, &apos;5.5&apos;), (&apos;萧润德&apos;, &apos;5.5&apos;), (&apos;袁淑梅&apos;, &apos;5.5&apos;), (&apos;李荣威&apos;, &apos;5.5&apos;),</div><div class="line"> (&apos;黄汉&apos;, &apos;5.4&apos;), (&apos;俞金喜&apos;, &apos;5.4&apos;), (&apos;周企何&apos;, &apos;5.4&apos;), (&apos;黄鹤&apos;, &apos;5.3&apos;),</div><div class="line"> (&apos;张松林&apos;, &apos;5.3&apos;), (&apos;杨少斌&apos;, &apos;5.2&apos;), (&apos;沈西蒙&apos;, &apos;5.2&apos;), (&apos;侯月秋&apos;, &apos;5.2&apos;),</div><div class="line"> (&apos;徐小香&apos;, &apos;5.2&apos;), (&apos;李鑫荃&apos;, &apos;5.2&apos;), (&apos;刘改鱼&apos;, &apos;5.2&apos;), (&apos;姬鹤武&apos;, &apos;5.2&apos;),</div><div class="line"> (&apos;李岱江&apos;, &apos;5.2&apos;), (&apos;水禾田&apos;, &apos;5.1&apos;), (&apos;姚金芬&apos;, &apos;5.1&apos;), (&apos;兹德齐斯洛·贝克辛斯基&apos;, &apos;5.1&apos;),</div><div class="line"> (&apos;李开敏&apos;, &apos;5.0&apos;), (&apos;乔慷慨&apos;, &apos;5.0&apos;), (&apos;时宜&apos;, &apos;5.0&apos;), (&apos;李克寒&apos;, &apos;5.0&apos;),</div><div class="line"> (&apos;欧有才&apos;, &apos;4.9&apos;), (&apos;张义潜&apos;, &apos;4.9&apos;), (&apos;白沉&apos;, &apos;4.9&apos;), (&apos;张猛&apos;, &apos;4.9&apos;),</div><div class="line"> (&apos;荷加斯&apos;, &apos;4.9&apos;), (&apos;尤无曲&apos;, &apos;4.9&apos;), (&apos;刘福安&apos;, &apos;4.9&apos;), (&apos;刘延广&apos;, &apos;4.8&apos;),</div><div class="line"> (&apos;吴养木&apos;, &apos;4.8&apos;), (&apos;靳景祥&apos;, &apos;4.8&apos;), (&apos;田桂凤&apos;, &apos;4.8&apos;), (&apos;李洲&apos;, &apos;4.7&apos;),</div><div class="line"> (&apos;陈永玲&apos;, &apos;4.7&apos;), (&apos;尹小芳&apos;, &apos;3.9&apos;), (&apos;黄泉福&apos;, &apos;3.4&apos;), (&apos;胡晓平&apos;, &apos;2.1&apos;),</div><div class="line"> (&apos;筱桂花&apos;, &apos;2.0&apos;)</div></pre></td></tr></table></figure>
<p>在小冰眼里</p>
<p>长得最好看的是这样的：<br><img src="/2017/06/22/名人的颜值有多高？/640.png" alt="png"></p>
<p>还有这样的:<br><img src="/2017/06/22/名人的颜值有多高？/650.png" alt="png"></p>
<p>颜值低的是这样的<br><img src="/2017/06/22/名人的颜值有多高？/660.png" alt="png"></p>
<p>显然，小冰的识别系统是有问题的。巨硬爸爸还需努力啊！</p>
<p>最后简单总结一下：颜值5.0分以下的只占了4%，虽说小冰的识别系统有些地方还需改善，但是对于正常的图片来说，识别率还是很靠谱的。嗯，现实就是这么“残酷”，一直都是“看脸”的时代。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩弄微软小冰的时候发现有个颜值查询功能，作为一枚颜值正无穷的帅比简直高处不胜寒。&lt;br&gt;后来突发奇想：是不是要想被人民群众记住，不仅仅要有才华，而且颜值也必须得高？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django表单验证</title>
    <link href="https://yuanblq.github.io/2017/06/09/Django%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <id>https://yuanblq.github.io/2017/06/09/Django表单验证/</id>
    <published>2017-06-09T10:41:07.000Z</published>
    <updated>2017-08-01T00:44:19.884Z</updated>
    
    <content type="html"><![CDATA[<p>Django 的表单在调用 <code>is_valid()</code>、<code>errors</code>属性、<code>full_clean()</code> 时会对表单进行验证。</p>
<p>以上行为都有可能抛出 <code>ValidationError</code> 异常。如果每异常则会返回经过验证的正常 Python 对象。</p>
<a id="more"></a>
<h3 id="大多数的验证可以通过-validators-实现。"><a href="#大多数的验证可以通过-validators-实现。" class="headerlink" title="大多数的验证可以通过 validators 实现。"></a>大多数的验证可以通过 <code>validators</code> 实现。</h3><p><code>validators</code> 运行在字段的 <code>to_python()</code> 方法执行之后。</p>
<h3 id="对于一个表单的验证分为以下几步："><a href="#对于一个表单的验证分为以下几步：" class="headerlink" title="对于一个表单的验证分为以下几步："></a>对于一个表单的验证分为以下几步：</h3><h4 id="to-python-为任何验证的第一步。"><a href="#to-python-为任何验证的第一步。" class="headerlink" title="to_python 为任何验证的第一步。"></a><code>to_python</code> 为任何验证的第一步。</h4><p>该步验证的是数据的类型，数据类型不对则会抛出 <code>ValidationError</code> 异常。该方法接受的是表单部件的原始值。也就是说，如果该表单字段类型为 <code>FloatField</code>，那么该数据要么转成 Pyhton 的 <code>float</code> 要么抛出 <code>ValidationError</code> 异常。</p>
<h4 id="validate-方法，处理不适合用验证器验证的一些特定字段的验证。"><a href="#validate-方法，处理不适合用验证器验证的一些特定字段的验证。" class="headerlink" title="validate() 方法，处理不适合用验证器验证的一些特定字段的验证。"></a><code>validate()</code> 方法，处理不适合用验证器验证的一些特定字段的验证。</h4><p>该步验证接受已经被检验正确数据类型的值，接下来有任何错误的话，也会抛出 <code>ValidationError</code> 异常。该方法不反悔任何东西，所以不要修改传进来的值。该步就是用来处理你不能或不愿意在验证器里验证的一些验证逻辑</p>
<h4 id="run-validators-方法用来执行对应字段的所有验证器"><a href="#run-validators-方法用来执行对应字段的所有验证器" class="headerlink" title="run_validators()  方法用来执行对应字段的所有验证器"></a><code>run_validators()</code>  方法用来执行对应字段的所有验证器</h4><p>如果有异常抛出，则会把所有异常聚合成一个 <code>ValidationError</code> 异常抛出。该方法一般不应该重写。</p>
<h4 id="字段子类的-clean-负责以正确的顺序执行-to-python-，validate-，run-validators"><a href="#字段子类的-clean-负责以正确的顺序执行-to-python-，validate-，run-validators" class="headerlink" title="字段子类的 clean() 负责以正确的顺序执行 to_python()，validate()，run_validators()"></a>字段子类的 <code>clean()</code> 负责以正确的顺序执行 <code>to_python()</code>，<code>validate()</code>，<code>run_validators()</code></h4><p>该方法还会依次传递它们的错误信息。有一步发生异常，则会终止验证并抛出异常。该方法返回验证后的值，正确的值接下来会插入表单的 <code>cleaned_data</code> 字典。</p>
<h4 id="form-表单子类调用-clean-lt-fieldname-gt-方法"><a href="#form-表单子类调用-clean-lt-fieldname-gt-方法" class="headerlink" title="form 表单子类调用 clean_&lt;fieldname&gt;() 方法"></a><code>form</code> 表单子类调用 <code>clean_&lt;fieldname&gt;()</code> 方法</h4><p>该方法用来验证任何指定的属性，和字段的类型无关。该方法不传递任何参数，要想查字段的值，<code>self.cleaned_data</code> 中查找（这时候该变量为 Python 对象，因为已经经过通用的 <code>clean()</code> 方法处理过一次了。）</p>
<p>比如，你想验证名叫 <code>serialnumber</code> 的 <code>CharField</code> 的内容是否唯一。那么使用<code>clean_serialnumber()</code> 是最好的一个方法。该方法的返回值会替换掉原本在 <code>cleaned_data</code> 中的值。所以它必须是 <code>cleaned_data</code> 的一个字段值，或者一个新的验证过的值。</p>
<h4 id="表单子类的-clean-方法"><a href="#表单子类的-clean-方法" class="headerlink" title="表单子类的 clean() 方法"></a>表单子类的 <code>clean()</code> 方法</h4><p>该方法可以验证多字段的关系，比如可以验证“如果有 A 字段，那么 B 字段必须包含一个有效的邮箱地址”。该方法可以返回一个完全不同的字典，可以当成 <code>cleaned_data</code> 来用。</p>
<p>如果不是由特定字段（为 __all__字段）引起的异常，则可以通过 <code>non_field_errors()</code> 方法访问。如果想往特定字段添加错误信息可以使用 <code>add_error()</code>。</p>
<p>在重写 <code>ModelForm</code> 子类的 <code>clean()</code> 方法的时候还有一些其他注意事项，详情见 <a href="https://docs.djangoproject.com/en/1.11/topics/forms/modelforms/#overriding-modelform-clean-method" target="_blank" rel="external">ModelForm documentation</a></p>
<p>这些方法按上面指定的顺序执行。先验证表单中每个字段（按照它们在表单中定义的顺序），即 <code>field.clean()</code> 方法执行，然后执行 <code>clean_&lt;fieldname&gt;()</code> 方法，最后执行 <code>Form.clean()</code> 方法（无论前面字段验证过程有没有抛异常，表单验证都会进行）。</p>
<p>如果字段验证过程中，某一字段抛异常了，<code>clean_&lt;fieldname&gt;()</code> 不会再执行，而接下来的其他字段还是会接着执行。</p>
<h3 id="错误消息的编码风格"><a href="#错误消息的编码风格" class="headerlink" title="错误消息的编码风格"></a>错误消息的编码风格</h3><p>为了使错误信息灵活，方便改写，最好遵守一下规则：</p>
<ul>
<li>提供描述错误信息的 <code>code</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line">ValidationError(_(<span class="string">'Invalid value'</span>), code=<span class="string">'invalid'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Bad</span></div><div class="line">ValidationError(_(<span class="string">'Invalid value'</span>))</div></pre></td></tr></table></figure>
<ul>
<li>不要在信息中传变量，使用 <code>params</code> 构造参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line">ValidationError(</div><div class="line">    _(<span class="string">'Invalid value: %(value)s'</span>),</div><div class="line">    params=&#123;<span class="string">'value'</span>: <span class="string">'42'</span>&#125;,</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Bad</span></div><div class="line">ValidationError(_(<span class="string">'Invalid value: %s'</span>) % value)</div></pre></td></tr></table></figure>
<ul>
<li>使用关键字参数，而不是位置参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line">ValidationError(</div><div class="line">    _(<span class="string">'Invalid value: %(value)s'</span>),</div><div class="line">    params=&#123;<span class="string">'value'</span>: <span class="string">'42'</span>&#125;,</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Bad</span></div><div class="line">ValidationError(</div><div class="line">    _(<span class="string">'Invalid value: %s'</span>),</div><div class="line">    params=(<span class="string">'42'</span>,),</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li>使用 <code>gettext</code> 包裹消息，这样能使翻译生效</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line">ValidationError(_(<span class="string">'Invalid value'</span>))</div><div class="line"></div><div class="line"><span class="comment"># Bad</span></div><div class="line">ValidationError(<span class="string">'Invalid value'</span>)</div></pre></td></tr></table></figure>
<p>把这些合在一起，就长这样子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> ValidationError(</div><div class="line">    _(<span class="string">'Invalid value: %(value)s'</span>),</div><div class="line">    code=<span class="string">'invalid'</span>,</div><div class="line">    params=&#123;<span class="string">'value'</span>: <span class="string">'42'</span>&#125;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>但如果你在验证的最后一步或者你知道你永远也不会去重写错误消息，那么你可以像这样些简单点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValidationError(_(<span class="string">'Invalid value: %s'</span>) % value)</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.errors.as_data" target="_blank" rel="external"><code>Form.errors.as_data()</code></a>，<a href="https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.errors.as_json" target="_blank" rel="external"><code>Form.errors.as_json()</code></a> 这两个方法以各自不同的形式返回 <code>ValidationError</code>s 的所有错误信息。（以 <code>code</code> 名字为键名）</p>
<h3 id="抛出多重异常"><a href="#抛出多重异常" class="headerlink" title="抛出多重异常"></a>抛出多重异常</h3><p>当在一个 <code>clean</code> 方法中检测到多个错误，可以通过给 <code>ValidationError</code> 构造器传递一个错误信息的列表，以此返回给表单提交者。</p>
<p>按照上面的规范，传递错误列表建议这么写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line"><span class="keyword">raise</span> ValidationError([</div><div class="line">    ValidationError(_(<span class="string">'Error 1'</span>), code=<span class="string">'error1'</span>),</div><div class="line">    ValidationError(_(<span class="string">'Error 2'</span>), code=<span class="string">'error2'</span>),</div><div class="line">])</div><div class="line"></div><div class="line"><span class="comment"># Bad</span></div><div class="line"><span class="keyword">raise</span> ValidationError([</div><div class="line">    _(<span class="string">'Error 1'</span>),</div><div class="line">    _(<span class="string">'Error 2'</span>),</div><div class="line">])</div></pre></td></tr></table></figure></p>
<h3 id="具体情况下如何使用"><a href="#具体情况下如何使用" class="headerlink" title="具体情况下如何使用"></a>具体情况下如何使用</h3><h4 id="使用验证器"><a href="#使用验证器" class="headerlink" title="使用验证器"></a>使用验证器</h4><p>Django <code>form</code> 表单（<code>model</code> 模型）字段支持使用一些简单的工具函数以及类作为验证器。</p>
<p>验证器仅仅是一个可调对象或者函数。接收一个值，如果值有效则不返回任何东西，否则抛 <code>ValidationError</code> 异常。</p>
<p>验证器可以直接传给字段构造器的 <code>validators</code> 参数，或者在该字段类中定义 <code>default_validators</code> 属性。</p>
<p>比方说 Django 的 <code>SlugField</code> 字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> CharField</div><div class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> validators</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlugField</span><span class="params">(CharField)</span>:</span></div><div class="line">    default_validators = [validators.validate_slug]</div></pre></td></tr></table></figure></p>
<p>正如你所见的，<code>SlugField</code> 仅仅是一个带有自定义验证器的 <code>CharField</code> 字段，该验证器检测提交的文本是否遵守某些规则。这样在字段定义的时候这么写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slug = forms.SlugField()</div></pre></td></tr></table></figure>
<p>上面的写法等同于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slug = forms.CharField(validators=[validators.validate_slug])</div></pre></td></tr></table></figure>
<p><a href="https://docs.djangoproject.com/en/1.11/ref/validators/" target="_blank" rel="external">点我</a> 查看 Django 内置的一些验证器以及如何自定义验证器</p>
<h4 id="表单字段的默认验证"><a href="#表单字段的默认验证" class="headerlink" title="表单字段的默认验证"></a>表单字段的默认验证</h4><p>我们来看下怎样验证提交的表单中的字符串是否包含逗号分隔的邮箱地址。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> validate_email</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiEmailField</span><span class="params">(forms.Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"""Normalize data to a list of strings."""</span></div><div class="line">        <span class="comment"># Return an empty list if no input was given.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        <span class="keyword">return</span> value.split(<span class="string">','</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"""Check if value consists only of valid emails."""</span></div><div class="line">        <span class="comment"># Use the parent's handling of required fields, etc.</span></div><div class="line">        <span class="comment"># 重写父类方法，实现我们多邮箱表单的验证效果</span></div><div class="line">        super(MultiEmailField, self).validate(value)</div><div class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> value:</div><div class="line">            validate_email(email)</div></pre></td></tr></table></figure>
<p>任何使用该字段的表单都会先经过这些方法，然后才进行后面的操作。</p>
<p>我们创建一个简单的 <code>ContactForm</code> 表单来演示下如何使用该字段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</div><div class="line">    message = forms.CharField()</div><div class="line">    sender = forms.EmailField()</div><div class="line">    recipients = MultiEmailField()</div><div class="line">    cc_myself = forms.BooleanField(required=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>使用的时候，就和其他字段一样。当表单调用 <code>is_valid()</code> 的时候，<code>MultiEmailField.clean()</code> 方法就会作为验证过程中的一环，依次调用我们自定义的 <code>to_python()</code> 和 <code>validate()</code> 方法来验证。</p>
<h4 id="验证特定字段属性"><a href="#验证特定字段属性" class="headerlink" title="验证特定字段属性"></a>验证特定字段属性</h4><p>还是以我们上面的 <code>ContactForm</code> 表单为例。我们想确保 <code>recipients</code> 字段必须包含 <code>fred@example.com</code> 这个邮箱地址。</p>
<p>因为我们只是需要当前这个表单有这个验证，而对于其他使用了 <code>MultiEmailField</code> 字段的表单无需此验证，那么我们就没必要把该验证放到 <code>MultiEmailField</code> 类中，最为一个通用验证。我们只需在 <code>ContactForm</code> 表单类中加上我们需要自定义的验证器即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    <span class="comment"># Everything as before.</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_recipients</span><span class="params">(self)</span>:</span></div><div class="line">        data = self.cleaned_data[<span class="string">'recipients'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"fred@example.com"</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</div><div class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">"You have forgotten about Fred!"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Always return a value to use as the new cleaned data, even if</span></div><div class="line">        <span class="comment"># this method didn't change it.</span></div><div class="line">        <span class="keyword">return</span> data</div></pre></td></tr></table></figure>
<h4 id="验证相互依赖的字段"><a href="#验证相互依赖的字段" class="headerlink" title="验证相互依赖的字段"></a>验证相互依赖的字段</h4><p>假如，我们 <code>ContactForm</code> 表单中 <code>cc_myself</code> 为 <code>True</code>，那么 <code>subject</code> 字段必须包含 <code>help</code> 这个词。</p>
<p>当我们验证的时候，需要同时依赖多个字段，那么 <code>clean()</code> 方法绝对是个好帮手。</p>
<p>当表单的 <code>clean()</code> 方法调用的时候，会启用所有字段的 <code>clean()</code> 方法，所以，<code>self.cleaned_data</code> 能拿到目前所有“存活”着的数据，也就是说也有可能你的某些字段可能无法或者到达这一步的验证。</p>
<p>到这一步，一般有两种方法来反馈错误信息。其中最常用的是在表单的最上面显示错误信息。你可以在 <code>clean()</code> 方法中抛出 <code>ValidationError</code> 异常来创造这个错误信息。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    <span class="comment"># Everything as before.</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></div><div class="line">        cleaned_data = super(ContactForm, self).clean()</div><div class="line">        cc_myself = cleaned_data.get(<span class="string">"cc_myself"</span>)</div><div class="line">        subject = cleaned_data.get(<span class="string">"subject"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> cc_myself <span class="keyword">and</span> subject:</div><div class="line">            <span class="comment"># Only do something if both fields are valid so far.</span></div><div class="line">            <span class="comment"># 只有当你想要验证的数据还“活着”的时候才进行接下来的验证</span></div><div class="line">            <span class="keyword">if</span> <span class="string">"help"</span> <span class="keyword">not</span> <span class="keyword">in</span> subject:</div><div class="line">                <span class="keyword">raise</span> forms.ValidationError(</div><div class="line">                    <span class="string">"Did not send for 'help' in the subject despite "</span></div><div class="line">                    <span class="string">"CC'ing yourself."</span></div><div class="line">                )</div></pre></td></tr></table></figure>
<p>以上代码，如果验证失败，表单会在它最上方显示一个错误信息。</p>
<p>代码中 <code>super(ContactForm, self).clean()</code> 是为了确保父类中的一些验证能有效执行。如果你表单继承的父类在它的 <code>clean()</code> 方法中不返回 <code>cleaned_data</code> 这个字典，那么就没必要让 <code>cleaned_data</code> 接收 <code>super()</code> 的返回值，直接使用 <code>self.cleanned_data</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></div><div class="line">    super(ContactForm, self).clean()</div><div class="line">    cc_myself = self.cleaned_data.get(<span class="string">"cc_myself"</span>)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>第二种反馈验证错误信息的方式，可能涉及给某些字段指定错误信息。在这个例子中，我们给 <code>subject</code> 和 <code>cc_myself</code> 字段都指定错误信息。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    <span class="comment"># Everything as before.</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></div><div class="line">        cleaned_data = super(ContactForm, self).clean()</div><div class="line">        cc_myself = cleaned_data.get(<span class="string">"cc_myself"</span>)</div><div class="line">        subject = cleaned_data.get(<span class="string">"subject"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> cc_myself <span class="keyword">and</span> subject <span class="keyword">and</span> <span class="string">"help"</span> <span class="keyword">not</span> <span class="keyword">in</span> subject:</div><div class="line">            msg = <span class="string">"Must put 'help' in subject when cc'ing yourself."</span></div><div class="line">            self.add_error(<span class="string">'cc_myself'</span>, msg)</div><div class="line">            self.add_error(<span class="string">'subject'</span>, msg)</div></pre></td></tr></table></figure>
<p><code>add_error()</code> 的第二个参数，可以是一个简单的字符串，也可以是 <code>ValidationError</code> 的一个实例。详见 <a href="https://docs.djangoproject.com/en/1.11/ref/forms/validation/#raising-validation-error" target="_blank" rel="external">Raising ValidationError</a>。</p>
<p><strong>注意：</strong><code>add_error()</code> 会自动将这个字段从 <code>cleaned_data</code> 中移除。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django 的表单在调用 &lt;code&gt;is_valid()&lt;/code&gt;、&lt;code&gt;errors&lt;/code&gt;属性、&lt;code&gt;full_clean()&lt;/code&gt; 时会对表单进行验证。&lt;/p&gt;
&lt;p&gt;以上行为都有可能抛出 &lt;code&gt;ValidationError&lt;/code&gt; 异常。如果每异常则会返回经过验证的正常 Python 对象。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://yuanblq.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>python 版本控制神器</title>
    <link href="https://yuanblq.github.io/2017/05/27/python-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%A5%9E%E5%99%A8/"/>
    <id>https://yuanblq.github.io/2017/05/27/python-版本控制神器/</id>
    <published>2017-05-27T08:26:32.000Z</published>
    <updated>2017-07-01T15:54:48.322Z</updated>
    
    <content type="html"><![CDATA[<p>由于 python 拥有众多的版本，以及不同模块也有不同的版本。如果每个版本之间相互都不兼容那也就无所谓什么版本控制了，可是同一机器上各个版本的 python 可以相互兼容并存，而且同一模块不同版本有时需要的 python 版本是不相同的，所以 python 的版本控制显得尤为重要。</p>
<p><code>pyenv</code> 是个 shell 脚本，能够轻松得实现各个不同版本 python 的相互间切换，而且各个版本的 python 切换不限于全局切换，甚至不同文件夹都可以拥有不同的 python 版本。</p>
<a id="more"></a>
<p>下面我们就来看看如何使用 <code>pyenv</code>。</p>
<h2 id="管理-python-版本"><a href="#管理-python-版本" class="headerlink" title="管理 python 版本"></a>管理 python 版本</h2><p>如果你既需要使用 <code>python2</code>，也需要使用 <code>python3</code>，<code>pyenv</code> 将是一个很高效的 python 版本管理工具。</p>
<p>由于 <code>pyenv</code> 是脚本插件，所以只能在类 UNIX 系统上使用。所以，如果你想在 windows 上安装，那就点击左上角去隔壁 <code>virtualenv</code> 瞧瞧。</p>
<h3 id="安装-pyenv（Ubuntu）"><a href="#安装-pyenv（Ubuntu）" class="headerlink" title="安装 pyenv（Ubuntu）"></a>安装 pyenv（Ubuntu）</h3><ol>
<li><p><strong>确定你想把 <code>pyenv</code> 安装在哪。</strong>推荐安装在 <code>$HOME/.pyenv</code>，但你也可以安装在任意位置。  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv</div></pre></td></tr></table></figure>
</li>
<li><p><strong>定义你 <code>PYENV_ROOT</code> 的环境变量</strong>来指定你把 pyenv 仓库克隆到了哪，并把 <code>$PYENV_ROOT/bin</code> 添加到你的 <code>$PATH</code> 中，这样就能在命令行使用 <code>pyenv</code> 命令。  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrc</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p><strong>设置启动 shell 时自动加载 pyenv 脚本。</strong>在 shell 配置文件的最后面加上 <code>eval &quot;$(pyenv init -)&quot;</code>。  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p><strong>重启 shell，使脚本生效。</strong>  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure>
</li>
<li><p><strong>安装不同的 python 版本到 <code>$(pyenv root)/versions</code> 文件夹。</strong><br> 在 <code>pyenv</code> 安装之前的所有 python 版本都归为 <code>system</code> 版本。 （可以用 <code>pyenv versions</code> 查看当前安装的 python 版本）<br> 在安装 python 之前，可以使用 <code>pyenv install -l</code> 查看当前可以安装哪些 python 版本。<br> 然后使用 <code>pyenv install 选择的版本</code> 来安装你所选择的 python 版本。比如 <code>pyenv install 3.6.1</code> 安装 python 官网的版本。  </p>
</li>
<li><p><strong>如果在安装 python 时报了如下错误，</strong>那就有可能是你的环境依赖没有装好，一般安装以下几个依赖就可以了。  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 报错信息</div><div class="line">WARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib</div><div class="line"></div><div class="line">WARNING: The Python readline extension was not compiled. Missing the GNU readline lib</div><div class="line"></div><div class="line">ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 安装以下依赖</div><div class="line">$ sudo apt-get install libbz2-dev</div><div class="line"></div><div class="line">$ sudo apt-get install libssl-dev</div><div class="line"></div><div class="line">$ sudo apt-get install libreadline6 libreadline6-dev</div><div class="line"></div><div class="line">$ sudo apt-get install libsqlite3-dev</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用-git-更新-pyenv"><a href="#使用-git-更新-pyenv" class="headerlink" title="使用 git 更新 pyenv"></a>使用 git 更新 pyenv</h3><p>如果你是按照上面的方法安装的 <code>pyenv</code>，那你可以使用 git 来更新。</p>
<h4 id="更新为最新的开发版"><a href="#更新为最新的开发版" class="headerlink" title="更新为最新的开发版"></a>更新为最新的开发版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd $(pyenv root)</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h4 id="更新为指定的版本"><a href="#更新为指定的版本" class="headerlink" title="更新为指定的版本"></a>更新为指定的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd $(pyenv root)</div><div class="line">$ git fetch</div><div class="line">$ git tag</div><div class="line">v0.1.0</div><div class="line">$ git checkout v0.1.0</div></pre></td></tr></table></figure>
<h3 id="pyenv-的基本操作命令"><a href="#pyenv-的基本操作命令" class="headerlink" title="pyenv 的基本操作命令"></a>pyenv 的基本操作命令</h3><ul>
<li><code>pyenv versions</code> 查看当前已安装的 python 版本</li>
<li><code>pyenv install ...</code> 安装指定版本的 python</li>
<li><code>pyenv global python版本</code> 切换全局 python 版本</li>
<li><code>pyenv local python版本</code> 切换当前文件夹下的 python 版本</li>
<li><code>pyenv shell python版本</code> 切换当前 shell 中的 python 版本</li>
<li><code>pyenv version</code> 查看当前使用的 python 版本</li>
</ul>
<h3 id="卸载-pyenv"><a href="#卸载-pyenv" class="headerlink" title="卸载 pyenv"></a>卸载 pyenv</h3><ul>
<li>如果你只是想禁用 <code>pyenv</code>，那么把 <code>pyenv init</code> 从 shell 的配置文件中移除，然后重启 shell 就行了（移除后 <code>pyenv</code> 命令仍然能使用，但是版本切换命令不会生效）。  </li>
<li>完整卸载 pyenv。执行上一步，然后把 pyenv 的根目录删除即可全部删除 pyenv（通过 <code>pyenv install ...</code> 安装的 python 版本都会删除）。    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf $(pyenv root)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="卸载-pyenv-安装的-python-版本"><a href="#卸载-pyenv-安装的-python-版本" class="headerlink" title="卸载 pyenv 安装的 python 版本"></a>卸载 pyenv 安装的 python 版本</h3><ul>
<li>使用 <code>pyenv uninstall ...</code> 命令。  </li>
<li>直接删除 <code>versions</code> 文件夹下的对应 python 版本文件夹。  </li>
</ul>
<h3 id="pyenv-其他操作命令"><a href="#pyenv-其他操作命令" class="headerlink" title="pyenv 其他操作命令"></a>pyenv 其他操作命令</h3><p>参见 <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md" target="_blank" rel="external">commands.md</a></p>
<p><br><br><br></p>
<h2 id="管理-python-模块版本"><a href="#管理-python-模块版本" class="headerlink" title="管理 python 模块版本"></a>管理 python 模块版本</h2><p>使用 <code>virtualenv</code> 和 <code>virtualenvwrapper</code> 管理 python 虚拟环境，每次都需要手动激活或退出。对于懒癌晚期患者，<code>pyenv-virtual</code> 的自动激活和退出虚拟环境功能简直不能再赞。另外搭配 <code>pyenv</code> 食用效果更佳。</p>
<h3 id="安装-pyenv-virtualenv（Ubuntu）"><a href="#安装-pyenv-virtualenv（Ubuntu）" class="headerlink" title="安装 pyenv-virtualenv（Ubuntu）"></a>安装 pyenv-virtualenv（Ubuntu）</h3><p>由于 <code>pyenv-virtualenv</code> 是 <code>pyenv</code> 的一个插件，所以安装之前需要先安装 <code>pyenv</code>。</p>
<p><strong>注意：</strong>如果 <code>pyenv</code> 的安装目录不是 <code>$HOME/.pyenv</code> 需要确保克隆下来的仓库位于你所安装的 <code>pyenv</code> 目录下的 <code>plugin</code> 文件夹下。</p>
<p>接下来就可以执行安装步骤了：</p>
<ol>
<li>克隆 <code>pyenv-virtual</code> 仓库到 <code>plugin</code> 文件夹下。</li>
<li><p>（可选/重点）添加 <code>pyenv virtualenv-init</code> 到你的 shell 配置文件中，这样进入指定文件夹自动进入虚拟环境，离开文件夹退出虚拟环境。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;eval &quot;$(pyenv virtualenv-init -)&quot;&apos; &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p>重启 shell。</p>
</li>
</ol>
<h3 id="创建-pyenv-virtualenv-虚拟环境"><a href="#创建-pyenv-virtualenv-虚拟环境" class="headerlink" title="创建 pyenv-virtualenv 虚拟环境"></a>创建 pyenv-virtualenv 虚拟环境</h3><ul>
<li><code>pyenv virtualenv 指定python版本 虚拟环境名字</code></li>
<li><code>pyenv virtualenv 虚拟环境名字</code></li>
</ul>
<p>如果不指定 python 版本，则默认使用当前 <code>pyenv version</code> 的 python 版本。</p>
<p>创建的虚拟环境位于 <code>$(pyenv root)/versions/</code> 下的指定 python 版本的文件夹中 <code>envs/</code> 文件夹下。</p>
<h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><ul>
<li>自动激活/退出</li>
<li>手动激活/退出</li>
</ul>
<p>自动激活环境：</p>
<ul>
<li>在 <code>.bashrc</code> 文件的最后添加 <code>eval &quot;$(pyenv virtualenv-init -)&quot;</code>，然后在 shell 中输入 <code>exec &quot;$SHELL&quot;</code> 重启 shell，或者手动重启 shell。</li>
<li>在想要激活虚拟环境的文件夹中新建 <code>.python-version</code> 文件，并写入虚拟环境的名字（<code>pyenv local python版本</code> 该命令也是通过创建该文件来达到进入该文件夹后自动使用指定 python 版本的目的）。</li>
<li>以后进入该的文件夹就会自动激活虚拟环境，离开该文件夹就会退出虚拟环境。</li>
</ul>
<p>手动激活环境：</p>
<ul>
<li><code>pyenv activate 虚拟环境名字</code> 激活虚拟环境。</li>
<li><code>pyenv deactivate</code> 退出虚拟环境。</li>
</ul>
<h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><p>有 2 种方法：  </p>
<ol>
<li>删除 <code>$(pyenv root)/versions</code> 和 <code>$(pyenv root)/versions/{version}/envs</code> 的相关文件夹即可。  </li>
<li>命令行运行 <code>pyenv uninstall 虚拟环境的名字</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 python 拥有众多的版本，以及不同模块也有不同的版本。如果每个版本之间相互都不兼容那也就无所谓什么版本控制了，可是同一机器上各个版本的 python 可以相互兼容并存，而且同一模块不同版本有时需要的 python 版本是不相同的，所以 python 的版本控制显得尤为重要。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 是个 shell 脚本，能够轻松得实现各个不同版本 python 的相互间切换，而且各个版本的 python 切换不限于全局切换，甚至不同文件夹都可以拥有不同的 python 版本。&lt;/p&gt;
    
    </summary>
    
      <category term="document" scheme="https://yuanblq.github.io/categories/document/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>itertools 模块解析</title>
    <link href="https://yuanblq.github.io/2017/05/21/itertools%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90/"/>
    <id>https://yuanblq.github.io/2017/05/21/itertools模块解析/</id>
    <published>2017-05-21T11:32:55.000Z</published>
    <updated>2017-05-20T16:39:37.523Z</updated>
    
    <content type="html"><![CDATA[<p>python 的内建模块 <code>itertools</code> 提供了非常有用的用于操作可迭代对象的函数.<br>通过这些函数, 我们能更好更快的解决许多有关可迭代对象的问题.<br>对于这些函数, 大体分成三类来描述 :  </p>
<ul>
<li>组合产生器</li>
<li>无限迭代器</li>
<li>有限迭代器</li>
</ul>
<a id="more"></a>
<h2 id="组合产生器"><a href="#组合产生器" class="headerlink" title="组合产生器"></a>组合产生器</h2><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations"></a>combinations</h3><p><code>itertools.combinations</code> 允许你从一个可迭代对象中创建一个迭代器, 迭代中的元素长度相同.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</div><div class="line">c = combinations(<span class="string">'ABC'</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>(&apos;A&apos;, &apos;B&apos;)
(&apos;A&apos;, &apos;C&apos;)
(&apos;B&apos;, &apos;C&apos;)
</code></pre><p>运行上面的代码可见, <code>combinations()</code> 将一个可迭代对象重新组合成指定的几个元素长度, 并且是以元祖的方式返回.</p>
<p><strong>需要注意的是, 组合的元素是不重复的.</strong></p>
<p>通过 <code>join()</code> 方法, 可以将元祖内的元祖进行拼凑.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> combinations(<span class="string">'ABC'</span>, <span class="number">2</span>):</div><div class="line">    print(<span class="string">''</span>.join(i))</div></pre></td></tr></table></figure>
<pre><code>AB
AC
BC
</code></pre><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement"></a>combinations_with_replacement</h3><p><code>combinations_with_replacement</code> 和 <code>combinations</code> 类似, 只不过它会创建重复的元素.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations_with_replacement</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>(&apos;A&apos;, &apos;A&apos;)
(&apos;A&apos;, &apos;B&apos;)
(&apos;A&apos;, &apos;C&apos;)
(&apos;B&apos;, &apos;B&apos;)
(&apos;B&apos;, &apos;C&apos;)
(&apos;C&apos;, &apos;C&apos;)
</code></pre><p><strong>但是, 创建出来的组合是没有顺序的, 即 <code>AB</code> 和 <code>BA</code> 视为同一组合.</strong></p>
<h3 id="product"><a href="#product" class="headerlink" title="product"></a>product</h3><p><code>product</code> 迭代器从一系列的输入中创建笛卡儿积 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</div><div class="line">l = [(<span class="string">'A'</span>, <span class="string">'B'</span>), [<span class="number">1</span>, <span class="number">2</span>], (<span class="string">'w'</span>,)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> product(*l):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>(&apos;A&apos;, 1, &apos;w&apos;)
(&apos;A&apos;, 2, &apos;w&apos;)
(&apos;B&apos;, 1, &apos;w&apos;)
(&apos;B&apos;, 2, &apos;w&apos;)
</code></pre><p>同样, 也是以元祖的形式返回.</p>
<h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a>permutations</h3><p><code>permutations</code> 和 <code>combinations</code> 很像, 只不过, <code>permutations</code> 是有排列顺序的, 即 <code>AB</code> 和 <code>BA</code> 是两个不同的组合.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> permutations(<span class="string">'ABC'</span>, <span class="number">2</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>(&apos;A&apos;, &apos;B&apos;)
(&apos;A&apos;, &apos;C&apos;)
(&apos;B&apos;, &apos;A&apos;)
(&apos;B&apos;, &apos;C&apos;)
(&apos;C&apos;, &apos;A&apos;)
(&apos;C&apos;, &apos;B&apos;)
</code></pre><p><strong>另外, <code>permutations</code> 同样是不会重复元素的.</strong></p>
<h2 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>count(start=0, step=1)</code>, count 迭代器从起始值开始, 按一定的步长, 生成一个能产生无限长度的迭代器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> count(start=<span class="number">10</span>, step=<span class="number">3</span>):</div><div class="line">    <span class="keyword">if</span> i == <span class="number">25</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>10
13
16
19
22
</code></pre><h3 id="islice"><a href="#islice" class="headerlink" title="islice"></a>islice</h3><p>一般无限迭代器可以和 <code>islice</code> 配合使用, 它能使无限迭代器在指定的次数后停止.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(count(<span class="number">3</span>, <span class="number">2</span>), <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>3
7
11
15
19
</code></pre><p><code>islice</code> 可以接受三个参数, 即 start, stop, step, 也可以只接收两个, 即 start, stop, 甚至也可以只接受一个参数, 即 stop.</p>
<h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle"></a>cycle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</div><div class="line">count = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cycle([<span class="number">1</span>,<span class="number">2</span>]):</div><div class="line">    <span class="keyword">if</span> count &gt; <span class="number">5</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(i)</div><div class="line">    count += <span class="number">1</span></div></pre></td></tr></table></figure>
<pre><code>1
2
1
2
1
2
</code></pre><p><code>cycle</code> 接收一个参数, 它能生成接收参数的无限循环迭代器.</p>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p><code>repeat</code> 能够指定循环的次数, 但是它不像 <code>cycle</code> 能循环接受的参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> repeat</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat([<span class="number">1</span> ,<span class="number">2</span>], <span class="number">5</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>[1, 2]
[1, 2]
[1, 2]
[1, 2]
[1, 2]
</code></pre><h2 id="有限迭代器"><a href="#有限迭代器" class="headerlink" title="有限迭代器"></a>有限迭代器</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p><code>accumulate</code> (Python3 中提供) 默认返回累加之和, 也可以传入自定义的函数.</p>
<p>例如, 传递 0-9 这个序列, 它会一次相加, 第一次是 0, 第二次是 0+1, 等等 …</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</div><div class="line">list(accumulate(range(<span class="number">9</span>)))</div></pre></td></tr></table></figure>
<pre><code>[0, 1, 3, 6, 10, 15, 21, 28, 36]
</code></pre><p>我们也可以传入自定义的函数 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> operator</div><div class="line"></div><div class="line">list(accumulate(range(<span class="number">1</span>,<span class="number">5</span>), <span class="keyword">lambda</span> x,y : x*y))</div></pre></td></tr></table></figure>
<pre><code>[1, 2, 6, 24]
</code></pre><h3 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_list = [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</div><div class="line">numbers = range(<span class="number">3</span>)</div><div class="line">cmd = (<span class="string">'ls'</span>, <span class="string">'/home'</span>)</div><div class="line">my_list.extend(numbers)</div><div class="line">my_list.extend(cmd)</div><div class="line">print(my_list)</div></pre></td></tr></table></figure>
<pre><code>[&apos;foo&apos;, &apos;bar&apos;, 0, 1, 2, &apos;ls&apos;, &apos;/home&apos;]
</code></pre><p>如上述代码, 我们能把多个可迭代对象进行融合, 但是 <code>extend()</code> 方法只能接受一个参数, 而且融合后是个列表, 如果数据量比较大, 那么会非常占用内存.</p>
<p>通过 <code>chain</code> 能完成多个可迭代对象的融合, 而且融合后是一个迭代器 : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</div><div class="line">s = <span class="string">'abc'</span></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">t = (<span class="string">'q'</span>, <span class="string">'w'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain(s, l, t):</div><div class="line">    print(i, end=<span class="string">''</span>)</div></pre></td></tr></table></figure>
<pre><code>abc123qwer
</code></pre><h3 id="compress"><a href="#compress" class="headerlink" title="compress"></a>compress</h3><p><code>compress</code> 接收两个可迭代对象, 并通过第二个可迭代对象对第一个可迭代对象进行过滤 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> compress</div><div class="line">letters = <span class="string">'ABCDEFG'</span></div><div class="line">bools = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">''</span>, <span class="keyword">True</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compress(letters, bools):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>A
C
E
</code></pre><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile"></a>dropwhile</h3><p>从字面意思可以看出, 该迭代器是 : 一直丢弃, 直到 (不满足条件为止) :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile(<span class="keyword">lambda</span> x : x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>8
10
5
3
1
</code></pre><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile"></a>takewhile</h3><p><code>takewhile</code> 与 <code>dropwhile</code> 相反 : 一直返回, 直到(满足条件为止) :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> takewhile</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile(<span class="keyword">lambda</span> x:x &lt; <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>1
2
1
</code></pre><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse"></a>filterfalse</h3><p><code>filterfalse</code> (Python2 是 ifilterfalse), 仅仅返回不满足条件的值 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> filterfalse</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filterfalse(<span class="keyword">lambda</span> x : x&gt;<span class="number">3</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>1
3
2
1
</code></pre><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby"></a>groupby</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</div><div class="line">vehicles = [(<span class="string">'Ford'</span>, <span class="string">'Taurus'</span>), (<span class="string">'Dodge'</span>, <span class="string">'Durango'</span>), (<span class="string">'Chevrolet'</span>, <span class="string">'Cobalt'</span>),</div><div class="line">           (<span class="string">'Ford'</span>, <span class="string">'F150'</span>), (<span class="string">'Dodge'</span>, <span class="string">'Charger'</span>), (<span class="string">'Ford'</span>, <span class="string">'GT'</span>)]</div><div class="line"><span class="keyword">for</span> group_name, sub_group <span class="keyword">in</span> groupby(sorted(vehicles), <span class="keyword">lambda</span> group : group[<span class="number">0</span>]):</div><div class="line">    print(group_name)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_group:</div><div class="line">        print(i)</div></pre></td></tr></table></figure>
<pre><code>Chevrolet
(&apos;Chevrolet&apos;, &apos;Cobalt&apos;)
Dodge
(&apos;Dodge&apos;, &apos;Charger&apos;)
(&apos;Dodge&apos;, &apos;Durango&apos;)
Ford
(&apos;Ford&apos;, &apos;F150&apos;)
(&apos;Ford&apos;, &apos;GT&apos;)
(&apos;Ford&apos;, &apos;Taurus&apos;)
</code></pre><p>在传入 <code>groupby</code> 之前, 一般先对数据进行排序, 使数据更加密集, 并且能让 <code>groupby</code> 正确的将元素聚集在一起.</p>
<p><code>groupby</code> 接收两个参数, 第一个是可迭代对象, 第二个是 keyfunc 函数. keyfunc 函数用来定义以什么为标准, 进行分组.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> key, sub_group <span class="keyword">in</span> groupby(<span class="string">'AaBbBaBCCC'</span>, <span class="keyword">lambda</span> x : x.upper()):</div><div class="line">    print(key, list(sub_group))</div></pre></td></tr></table></figure>
<pre><code>A [&apos;A&apos;, &apos;a&apos;]
B [&apos;B&apos;, &apos;b&apos;, &apos;B&apos;]
A [&apos;a&apos;]
B [&apos;B&apos;]
C [&apos;C&apos;, &apos;C&apos;, &apos;C&apos;]
</code></pre><p>当数据排序不够密集时, 就会出现上面数据分类不够紧凑的问题, 所以在分组前, 一般现对数据进行排序处理.</p>
<h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap"></a>starmap</h3><p><code>starmap</code> 使用传入的函数和可迭代对象进行计算, 返回一个新的迭代器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> starmap</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap(<span class="keyword">lambda</span> x,y: x+y, [[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">3</span>, <span class="number">4</span>), [<span class="string">'a'</span>, <span class="string">'b'</span>]]):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>3
7
ab
</code></pre><p><code>starmap</code> 和 <code>map</code> 的区别在于, 传入的函数分别为 func(a, b) 和 func(*c)</p>
<h3 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> tee</div><div class="line">data = <span class="string">'ABCDE'</span></div><div class="line">iter1, iter2 = tee(data)</div><div class="line">print(list(iter1))</div><div class="line">print(list(iter2))</div></pre></td></tr></table></figure>
<pre><code>[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]
[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> tee</div><div class="line">data = <span class="string">'ABCDE'</span></div><div class="line">iter1, iter2, iter3 = tee(data, <span class="number">3</span>)</div><div class="line">print(list(iter1))</div><div class="line">print(list(iter2))</div><div class="line">print(list(iter3))</div></pre></td></tr></table></figure>
<pre><code>[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]
[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]
[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]
</code></pre><p>相当于复制, 默认复制 2 个.</p>
<h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest"></a>zip_longest</h3><p><code>zip_longest</code> (Python3 支持) 可以用来将两个可迭代对象打包在一起, 如果两个对象长度一部样, 可以传入 <code>fillvalue</code> :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip_longest(<span class="string">'abc'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], fillvalue=<span class="string">'哈'</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>(&apos;a&apos;, 1)
(&apos;b&apos;, 2)
(&apos;c&apos;, 3)
(&apos;哈&apos;, 4)
(&apos;哈&apos;, 5)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 的内建模块 &lt;code&gt;itertools&lt;/code&gt; 提供了非常有用的用于操作可迭代对象的函数.&lt;br&gt;通过这些函数, 我们能更好更快的解决许多有关可迭代对象的问题.&lt;br&gt;对于这些函数, 大体分成三类来描述 :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组合产生器&lt;/li&gt;
&lt;li&gt;无限迭代器&lt;/li&gt;
&lt;li&gt;有限迭代器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Python" scheme="https://yuanblq.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>从输入url到显示页面发生了什么</title>
    <link href="https://yuanblq.github.io/2017/05/14/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://yuanblq.github.io/2017/05/14/从输入url到显示页面发生了什么/</id>
    <published>2017-05-14T09:59:04.000Z</published>
    <updated>2017-05-20T16:27:56.007Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当我们在浏览器的地址栏输入访问的 URL，然后回车，到浏览器显示对应的页面。这期间，到底发生了什么？</strong>  </p>
<p>以下，我大概按如这几部分来探索关于浏览器是怎么呈现出我们想要的页面：  </p>
<ul>
<li>输入 url</li>
<li>解析域名</li>
<li>建立连接</li>
<li>发起请求</li>
<li>响应请求</li>
<li>渲染页面</li>
<li>断开连接</li>
</ul>
<a id="more"></a>
<h2 id="输入-url"><a href="#输入-url" class="headerlink" title="输入 url"></a>输入 url</h2><p>在一个网络中，不同计算机拥有的 ip 地址都是唯一的。提供网页的服务器也是一台计算机，所以同样拥有唯一的一个 ip。  </p>
<p>比如百度的某一台服务器 ip 为 111.13.101.208，你完全可以通过 111.13.101.208:80 去访问百度的首页。但如果你还想访问腾讯、淘宝等其他网站呢？  </p>
<p>显然以 ip 方式去访问一个网站是很费劲的。就像我们说天安门在哪的时候不会说天安门在经纬多少多少度一样，而是以人话说在北京哪哪哪。  </p>
<p>所以，我们同样以别名的方式去记住每一个网站。而这就是 DNS 服务器干的活。  </p>
<p>我们在浏览器输入的是一个，人能够轻松记住的域名网址。当我们回车的时候 DNS 服务器就会去找该域名网址在网络中对应的 ip 地址，称之为解析域名。  </p>
<h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>一般来说，浏览器会先从本地的 hosts 文件中查找该域名对应的 ip 地址。  </p>
<p>没有的话再从网络运营商的 DNS 服务器中请求解析，如果没有就再以递归的方式往下不断请求 DNS 解析。找到之后，再一层层返回到你的电脑。  </p>
<h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>浏览器拿到 ip 地址之后，会以一个随机端口（1024-65535）向服务器 web 程序的 80/443 端口发起 TCP 连接请求，即所谓的三次握手，如下图所示：<br><img src="/2017/05/14/从输入url到显示页面发生了什么/三次握手.PNG" alt="PNG">  </p>
<h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><p>TCP 连接建立完成之后，浏览器就会向服务器发起 http request header 请求。  </p>
<p>一般为 GET 和 POST 两种请求。  </p>
<p>一个简单的 GET 请求的 request header 包含：</p>
<ul>
<li>请求行：HTTP/1.1 / GET</li>
<li>请求头：’User-Agent’: ‘Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0’, …</li>
<li>请求体：?key1=value1&amp;key2=value2…</li>
</ul>
<p>请求头和请求体的最后一行之间有两个 ‘\r\n’，用于告诉服务器没有其他请求头了。（POST 方式的请求信息一般不放在请求体，而是通过表单提交）  </p>
<h2 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h2><p>服务器接收到浏览器的请求之后，根据其响应内容会给浏览器相应的响应，服务器的 HTTP 响应同样也分为，响应行、响应头、响应体。  </p>
<h2 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h2><p>浏览器拿到服务器返回的响应数据后，根据其内容在把它渲染出来。</p>
<h2 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h2><p>当我们在浏览器关闭正在访问的页面的时候，浏览器会发送断开连接的请求，及四次挥手过程，如下图所示：<br><img src="/2017/05/14/从输入url到显示页面发生了什么/四次挥手.PNG" alt="PNG">  </p>
<p>以上基本就是一个简单的从输入 url 到浏览器显示最终页面，期间所发生的一些事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;当我们在浏览器的地址栏输入访问的 URL，然后回车，到浏览器显示对应的页面。这期间，到底发生了什么？&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;以下，我大概按如这几部分来探索关于浏览器是怎么呈现出我们想要的页面：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入 url&lt;/li&gt;
&lt;li&gt;解析域名&lt;/li&gt;
&lt;li&gt;建立连接&lt;/li&gt;
&lt;li&gt;发起请求&lt;/li&gt;
&lt;li&gt;响应请求&lt;/li&gt;
&lt;li&gt;渲染页面&lt;/li&gt;
&lt;li&gt;断开连接&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="网络" scheme="https://yuanblq.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>yield理解</title>
    <link href="https://yuanblq.github.io/2017/05/08/yield%E7%90%86%E8%A7%A3/"/>
    <id>https://yuanblq.github.io/2017/05/08/yield理解/</id>
    <published>2017-05-08T12:54:59.000Z</published>
    <updated>2017-05-19T14:34:24.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是-StackOverflow-上的一个很热的帖子-这里是投票最高的一个答案"><a href="#这是-StackOverflow-上的一个很热的帖子-这里是投票最高的一个答案" class="headerlink" title="这是 StackOverflow 上的一个很热的帖子, 这里是投票最高的一个答案"></a>这是 StackOverflow 上的一个很热的帖子, 这里是投票最高的一个答案</h3><p>原文: <a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained" target="_blank" rel="external">http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained</a></p>
<h4 id="提问者的问题"><a href="#提问者的问题" class="headerlink" title="提问者的问题"></a>提问者的问题</h4><p>Python 关键字 yield 的作用是什么? 用来干什么的?</p>
<p>比如, 我正在试图理解下面的代码 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span>.<span class="title">_get_child_candidates</span><span class="params">(self, distance, min_dist, max_dist)</span>:</span></div><div class="line">    <span class="keyword">if</span> self._leftchild <span class="keyword">and</span> distance - max_dist &lt; self._median:</div><div class="line">        <span class="keyword">yield</span> self._leftchild</div><div class="line">    <span class="keyword">if</span> self._rightchild <span class="keyword">and</span> distance + max_dist &gt;= self._median:</div><div class="line">        <span class="keyword">yield</span> self._rightchild</div></pre></td></tr></table></figure>
<p>下面的是调用 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">result, candidates = list(), [self]</div><div class="line"><span class="keyword">while</span> candidates:</div><div class="line">    node = candidates.pop()</div><div class="line">    distance = node._get_dist(obj)</div><div class="line">    <span class="keyword">if</span> distance &lt;= max_dist <span class="keyword">and</span> distance &gt;= min_dist:</div><div class="line">        result.extend(node._values)</div><div class="line">    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</div><div class="line"><span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>当调用 _get_child_candidates 的时候发生了什么? 返回了一个列表? 返回了一个元素? 被重复调用了么? 什么时候这个调用结束呢?</p>
<a id="more"></a>
<h4 id="回答部分"><a href="#回答部分" class="headerlink" title="回答部分"></a>回答部分</h4><p>为了理解什么是 yield ,你必须理解什么是生成器. 在理解生成器之前, 让我们先走近迭代.</p>
<h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><p>当你建立了一个列表, 你可以逐项地读取这个列表, 这叫做一个可迭代对象 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>1
2
3
</code></pre><p>mylist 是一个可迭代对象. 当你使用一个列表生成式来建立一个列表的时候, 就建立了一个可迭代对象 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mylist = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>0
1
4
</code></pre><p>所有你可以使用 for .. in .. 语法的叫做一个迭代器 : 列表, 字符串, 文件 … 你经常使用它们是因为你可以如你所愿的读取其中的元素, 但是你把所有的值都存储到了内存中, 如果你有大量数据的话, 这个方式并不是你想要的.</p>
<h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>生成器是可以迭代的, 但是你 <strong><em>只可以读取它一次</em></strong> ,因为它并不把所有的值放在内存中, 它是实时地生成数据 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mygenerator = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>0
1
4
</code></pre><p>看起来除了把 [] 换成 () 外没什么不同. 但是, 你不可以再次使用 for i in mygenerator , 因为生成器只能被迭代一次 : 先计算出 0, 然后继续计算 1, 然后计算 4, 一个接一个的 …</p>
<h5 id="yield-关键字"><a href="#yield-关键字" class="headerlink" title="yield 关键字"></a>yield 关键字</h5><p>yield 是一个类似 rerun 的关键字, 只是这个函数返回的是一个生成器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createGenerator</span><span class="params">()</span>:</span></div><div class="line">    mylist = range(<span class="number">3</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</div><div class="line">        <span class="keyword">yield</span> i*i</div><div class="line"></div><div class="line">mygenerator = createGenerator()</div><div class="line">print(mygenerator)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<pre><code>&lt;generator object createGenerator at 0x00C189C0&gt;
0
1
4
</code></pre><p>这个例子没什么用途, 但是它让你知道, 这个函数会返回一大批你只需要读一次的值.</p>
<p>为了精通 yield ,你必须要理解 : <strong>当你调用这个函数的时候, 函数内部的代码并不立马执行</strong> , 这个函数只是返回一个生成器对象, 这有点蹊跷不是吗.</p>
<p>那么, 函数的代码什么时候执行呢? 当你使用 for 进行迭代的时候.</p>
<p>现在到了关键点了 !</p>
<p>第一次迭代中你的函数会执行, 从开始到达 yield 关键字, 然后返回 yield 后的值作为第一次迭代的返回值, 然后, 每次执行这个函数都会继续执行你在函数内部定义的那个循环的下一次, 再返回那个值, 直到没有可以返回的.</p>
<p>如果生成器内部没有定义 yield 关键字, 那么这个生成器被认为空的. 这种情况可能因为是循环进行没了, 或者是没有满足 if/else 条件.</p>
<h5 id="回到你的代码"><a href="#回到你的代码" class="headerlink" title="回到你的代码"></a>回到你的代码</h5><p>生成器 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建 node 对象的一个方法, 该方法返回一个生成器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span>.<span class="title">_get_child_candidates</span><span class="params">(self, distance, min_dist, max_dist)</span>:</span></div><div class="line">    <span class="comment"># 如果 node 对象的左边仍然有 child</span></div><div class="line">    <span class="comment"># 并且距离合适, 则返回下一个 child</span></div><div class="line">    <span class="keyword">if</span> self._leftchild <span class="keyword">and</span> distance - max_dist &lt; self._median:</div><div class="line">        <span class="keyword">yield</span> self._leftchild</div><div class="line">    </div><div class="line">    <span class="comment"># 如果 node 对象的右边仍然有 child</span></div><div class="line">    <span class="comment"># 并且距离合适, 则返回下一个 child</span></div><div class="line">    <span class="keyword">if</span> self._rightchild <span class="keyword">and</span> distance + max_dist &gt;= self._median:</div><div class="line">        <span class="keyword">yield</span> self._rightchild</div><div class="line">        </div><div class="line">    <span class="comment"># 如果函数执行到这了, 则认为生成器已经空了</span></div><div class="line">    <span class="comment"># 不再有这两个值: leftchild, rightchild</span></div></pre></td></tr></table></figure>
<p>调用者 : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建一个空列表, 和带有当前对象引用的列表</span></div><div class="line">result, candidates = list(), [self]</div><div class="line"></div><div class="line"><span class="comment"># candidates 的循环 (一开始他们只包含一个元素 --&gt; self)</span></div><div class="line"><span class="keyword">while</span> candidates:</div><div class="line">    </div><div class="line">    <span class="comment"># 获取最后一位 candidate , 并把它从列表中移除</span></div><div class="line">    node = candidates.pop()</div><div class="line">    </div><div class="line">    <span class="comment"># 获取 obj 和 candidate 之间的 distance</span></div><div class="line">    distance = node._get_dist(obj)</div><div class="line">    </div><div class="line">    <span class="comment"># 如果距离合适, 加入result</span></div><div class="line">    <span class="keyword">if</span> distance &lt;= max_dist <span class="keyword">and</span> distance &gt;= min_dist:</div><div class="line">        result.extend(node._values)</div><div class="line">        </div><div class="line">    <span class="comment"># 在 candidates 列表中添加 candidate 的 children</span></div><div class="line">    <span class="comment"># 这样, 循环就能持续执行, 直到它查遍 candidate 的所有 children</span></div><div class="line">    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</div><div class="line">    </div><div class="line"><span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>这个代码包含了几个小部分 :</p>
<ul>
<li>我们对一个列表进行迭代, 但是迭代中列表还在不断的扩展. 它是一个迭代这些嵌套的数据的简洁方式, 即使这样有点危险, 因为可能导致无限迭代.<br>  <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code><br>  <strong>穷尽了生成器的所有制</strong>, 但 <code>while</code> 不断地在产生新的生成器, 他们会产生和上一次不一样的值, 但没有作用到同一个节点上.</li>
<li><code>extend()</code> 是一个迭代器方法, 作用于迭代器, 并把参数追加到迭代器的后面.</li>
</ul>
<p>通常我们传给它一个列表参数 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line">a.extend(b)</div><div class="line">print(a)</div></pre></td></tr></table></figure>
<pre><code>[1, 2, 3, 4]
</code></pre><p>但是在你的代码中是一个生成器, 这是不错的, 因为 :</p>
<ul>
<li>你不必读两次所有的值.</li>
<li>你可以有很多子对象, 但不必叫他们都储存在内存里面.</li>
</ul>
<p>并且这很奏效, 因为 Python 不关心一个方法的参数是不是个列表. Python 只希望它是一个可以迭代的, 所以这个参数可以是列表, 元祖, 字符串, 生成器 … 这叫做 <code>duck typing</code>, 这也是为何 Python 如此棒的原因之一, 但这已经是另外一个问题了 … </p>
<p>你可以在这里停下, 来看看生成器的一些高级用法 : </p>
<font color="red">控制生成器的穷尽</font>


<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span><span class="params">()</span>:</span>   <span class="comment"># 让我们创建一个银行, 生成 ATM</span></div><div class="line">    crisis = <span class="keyword">False</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_atm</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.crisis:</div><div class="line">            <span class="keyword">yield</span> <span class="string">'$100'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hsbc = Bank()</div><div class="line">corner_street_atm = hsbc.create_atm()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(corner_street_atm.__next__())</div></pre></td></tr></table></figure>
<pre><code>$100
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(corner_street_atm.__next__())</div></pre></td></tr></table></figure>
<pre><code>$100
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print([corner_street_atm.__next__() <span class="keyword">for</span> cash <span class="keyword">in</span> range(<span class="number">5</span>)])</div></pre></td></tr></table></figure>
<pre><code>[&apos;$100&apos;, &apos;$100&apos;, &apos;$100&apos;, &apos;$100&apos;, &apos;$100&apos;]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hsbc.crisis = <span class="keyword">True</span> <span class="comment"># 经济危机来了, 没钱啦!</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(corner_street_atm.__next__())</div></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-21-0291977c370d&gt; in &lt;module&gt;()
----&gt; 1 print(corner_street_atm.__next__())


StopIteration: 
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wall_street_atm = hsbc.create_atm() <span class="comment"># 甚至新的 ATM 也有危机</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(wall_street_atm.__next__())</div></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-32-b42bcf449bd2&gt; in &lt;module&gt;()
----&gt; 1 print(wall_street_atm.__next__())


StopIteration: 
</code></pre><p><strong>糟糕的是, 危机走了, 但是 ATM 却依然没钱 …</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hsbc.crisis = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(corner_street_atm.__next__())</div></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-36-0291977c370d&gt; in &lt;module&gt;()
----&gt; 1 print(corner_street_atm.__next__())


StopIteration: 
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brand_new_atm = hsbc.create_atm()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">7</span></div><div class="line"><span class="keyword">for</span> cash <span class="keyword">in</span> brand_new_atm:</div><div class="line">    i -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</div><div class="line">        print(cash)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<pre><code>$100
$100
$100
$100
$100
$100
</code></pre><p>对于控制一些资源的访问来说, 这很有用.</p>
<font color="red">Itertools, 你最好的朋友</font>

<p>itertools 包含了很多特殊的迭代方法. 是不是曾想过复制一个迭代器? 串联两个迭代器? 把嵌套的列表分组? 不用创造一个新的列表的 <code>zip/map</code> ?</p>
<p>只要 <code>import itertools</code></p>
<p>需要个例子? 让我们看看比赛中 4 匹马可能到达终点的先后顺序的可能情况 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line">horses = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">races = itertools.permutations(horses)</div><div class="line">print(races)</div></pre></td></tr></table></figure>
<pre><code>&lt;itertools.permutations object at 0x012B9DB0&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(list(races))</div></pre></td></tr></table></figure>
<pre><code>[(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]
</code></pre><font color="red">了解迭代器的内部机理</font>

<p>迭代是一个实现可迭代对象(实现的是 <code>__iter__()</code> )和迭代器(实现的是 <code>__next__()</code> )的过程. 可迭代对象是你可以从其获取到一个迭代器的任一对象. 迭代器是那些允许你迭代可迭代对象的对象.</p>
<p>更多见这个文章 <a href="http://effbot.org/zone/python-for-statement.htm" target="_blank" rel="external">http://effbot.org/zone/python-for-statement.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;这是-StackOverflow-上的一个很热的帖子-这里是投票最高的一个答案&quot;&gt;&lt;a href=&quot;#这是-StackOverflow-上的一个很热的帖子-这里是投票最高的一个答案&quot; class=&quot;headerlink&quot; title=&quot;这是 StackOverflow 上的一个很热的帖子, 这里是投票最高的一个答案&quot;&gt;&lt;/a&gt;这是 StackOverflow 上的一个很热的帖子, 这里是投票最高的一个答案&lt;/h3&gt;&lt;p&gt;原文: &lt;a href=&quot;http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained&quot;&gt;http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;提问者的问题&quot;&gt;&lt;a href=&quot;#提问者的问题&quot; class=&quot;headerlink&quot; title=&quot;提问者的问题&quot;&gt;&lt;/a&gt;提问者的问题&lt;/h4&gt;&lt;p&gt;Python 关键字 yield 的作用是什么? 用来干什么的?&lt;/p&gt;
&lt;p&gt;比如, 我正在试图理解下面的代码 :&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;_get_child_candidates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, distance, min_dist, max_dist)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self._leftchild &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; distance - max_dist &amp;lt; self._median:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; self._leftchild&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self._rightchild &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; distance + max_dist &amp;gt;= self._median:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; self._rightchild&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的是调用 :&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;result, candidates = list(), [self]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; candidates:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    node = candidates.pop()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    distance = node._get_dist(obj)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; distance &amp;lt;= max_dist &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; distance &amp;gt;= min_dist:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result.extend(node._values)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当调用 _get_child_candidates 的时候发生了什么? 返回了一个列表? 返回了一个元素? 被重复调用了么? 什么时候这个调用结束呢?&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="https://yuanblq.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>itchat 微信机器人</title>
    <link href="https://yuanblq.github.io/2017/05/02/itchat/"/>
    <id>https://yuanblq.github.io/2017/05/02/itchat/</id>
    <published>2017-05-02T04:13:51.000Z</published>
    <updated>2017-05-02T07:09:04.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人"><a href="#通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人" class="headerlink" title="通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人"></a>通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>通过微信的 python 接口 itchat获取微信消息  </li>
<li>将微信消息转发给”小冰”  </li>
<li>获取”小冰”处理后的返回消息  </li>
<li>将返回消息返回给微信消息的发送人  </li>
</ul>
<a id="more"></a>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="获取微信消息"><a href="#获取微信消息" class="headerlink" title="获取微信消息"></a>获取微信消息</h3><p>itchat 在注册时会根据相应的消息类型调用对应的函数.<br>比如现在只需获取基本的文本消息, 只需这样注册:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_msg</span><span class="params">(msg)</span>:</span></div><div class="line">	print(msg[<span class="string">'Text'</span>])</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>第三行, 通过装饰符将 <code>get_msg()</code> 注册为处理文本消息的函数.<br>微信的消息有很多类型, 通过注册不同的消息类型, 可以分别处理不同类型的消息.<br>执行命令后, 和登录网页版微信一样, 扫描弹出来的二维码, 即可登录你的微信并开始处理微信消息:<br><img src="/2017/05/02/itchat/qr.PNG" alt="png">  </p>
<h3 id="发送微信消息"><a href="#发送微信消息" class="headerlink" title="发送微信消息"></a>发送微信消息</h3><p>同样, 发送的微信消息有各种类型, 现在我们同样只处理文本类型的消息.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itchat.send(<span class="string">'your msg'</span>, <span class="string">'toUserName'</span>)</div></pre></td></tr></table></figure></p>
<p>该发送消息的函数接收两个参数, 消息的内容和消息接收者的 UserName, 即该对象的标识符.<br>我们先试着给文件助手发送一条消息:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.send(<span class="string">'我发送的消息'</span>, <span class="string">'filehelper'</span>)</div></pre></td></tr></table></figure></p>
<p>如果每次调试都要扫码登录的话比较麻烦.<br>第三行, 通过将 <code>auto_login()</code> 函数的 <code>hotReload</code> 参数设为 <code>True</code>, 即可实现热登陆.<br>保存代码后, 执行命令后, 效果如下:<br><img src="/2017/05/02/itchat/file.PNG" alt="png">  </p>
<p>该方法是主动给别人发送消息, 还有种是给你发送消息的回复消息.<br>如下的代码所示, 是回复给你发送消息的人:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reply_msg</span><span class="params">(msg)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'我回复的内容'</span></div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>这种回复消息的方法属于被动触发, 只有别人给你发消息了, 才会去回复并且不需要消息接收者的 UserName.  </p>
<h3 id="将消息转发给”小冰”"><a href="#将消息转发给”小冰”" class="headerlink" title="将消息转发给”小冰”"></a>将消息转发给”小冰”</h3><p>既然我们已经会了收发消息的方法, 那么现在就可以完成将别人发给你的微信消息转发给”小冰”, 进而获取”小冰”的回复.<br>但是要发送消息给”小冰”, 那么”小冰”的 UserName 是什么呢?<br>itchat 提供了搜索每个人 UserName 的方法, 比如搜索公众号 UserName 的方法为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itchat.search_mps(name=<span class="string">'小冰'</span>)</div></pre></td></tr></table></figure></p>
<p>该方法返回的是一个字典, 通过查看字典结构即可拿到”小冰”的 UserName:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoice = itchat.search_mps(name=<span class="string">'小冰'</span>)[<span class="number">0</span>][<span class="string">'UserName'</span>]</div></pre></td></tr></table></figure></p>
<p>现在, 我们就可一接收消息, 并把消息转发给”小冰”了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fw_ice</span><span class="params">(msg)</span>:</span></div><div class="line">    msg_text = msg[<span class="string">'Text'</span>]</div><div class="line">    itchat.send(msg_text, xiaoice)</div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">xiaoice = itchat.search_mps(name=<span class="string">'小冰'</span>)[<span class="number">0</span>][<span class="string">'UserName'</span>]</div><div class="line">itchat.run()</div></pre></td></tr></table></figure></p>
<p>运行之后, 当别人给你发送消息的时候, 程序会自动将其转发给”小冰”:<br><img src="/2017/05/02/itchat/ice_reply.PNG" alt="png"><br><img src="/2017/05/02/itchat/ice_reply2.PNG" alt="png">  </p>
<h3 id="获取小冰的回复内容-并将其转发给给你发送微信的人"><a href="#获取小冰的回复内容-并将其转发给给你发送微信的人" class="headerlink" title="获取小冰的回复内容, 并将其转发给给你发送微信的人"></a>获取小冰的回复内容, 并将其转发给给你发送微信的人</h3><p>首先, 我们获取给你发微信的人 UserName<br>从 <code>def fw_ice(msg)</code> 传进来 msg 是一个字典, 我们可以从中获取到该次消息对话的很多信息, 其中就有消息发送者的 UserName: <code>msg[&#39;FromUserName&#39;]</code>.<br>我们把发送者的 UserName 存储在一个全局变量中, 这样等获取到”小冰”发送的内容后就能知道转发给谁了.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">who_send = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fw_ice</span><span class="params">(msg)</span>:</span></div><div class="line">	<span class="keyword">global</span> who_send</div><div class="line">    msg_text = msg[<span class="string">'Text'</span>]</div><div class="line">    who_send = msg[<span class="string">'FromUserName'</span>]</div><div class="line">    itchat.send(msg_text, xiaoice)</div></pre></td></tr></table></figure></p>
<p>然后, 我们获取”小冰”的回复内容, 并把它转发给发送者:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT, isMpChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ice</span><span class="params">(msg)</span>:</span></div><div class="line">    ice_msg = msg[<span class="string">'Text'</span>]</div><div class="line">    itchat.send(ice_msg, toUserName=g_who_send)</div></pre></td></tr></table></figure></p>
<p>因为和”小冰”聊天属于和公众号的聊天, 所以在注册时需要添加 <code>isMpChat=True</code> 来让该函数知道它需要处理的是和公众号的聊天消息.<br>接着, 我们通过 msg 这个字典获取到”小冰”的回复内容后通过 <code>itchat.send()</code> 方法, 把该内容转发给发送者.<br>执行后, 如图所示:<br><img src="/2017/05/02/itchat/ice_reply3.PNG" alt="png"><br><img src="/2017/05/02/itchat/ice_reply4.PNG" alt="png"><br>这样就基本完成了利用”小冰”来实现的微信机器人.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人&quot;&gt;&lt;a href=&quot;#通过-itchat-模块和微软小冰的微信公众号-xiaoice-ms-打造自己的微信机器人&quot; class=&quot;headerlink&quot; title=&quot;通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人&quot;&gt;&lt;/a&gt;通过 itchat 模块和微软小冰的微信公众号(xiaoice-ms)打造自己的微信机器人&lt;/h1&gt;&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过微信的 python 接口 itchat获取微信消息  &lt;/li&gt;
&lt;li&gt;将微信消息转发给”小冰”  &lt;/li&gt;
&lt;li&gt;获取”小冰”处理后的返回消息  &lt;/li&gt;
&lt;li&gt;将返回消息返回给微信消息的发送人  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="应用实例" scheme="https://yuanblq.github.io/categories/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="itchat" scheme="https://yuanblq.github.io/tags/itchat/"/>
    
      <category term="小冰" scheme="https://yuanblq.github.io/tags/%E5%B0%8F%E5%86%B0/"/>
    
  </entry>
  
  <entry>
    <title>mySQL操作</title>
    <link href="https://yuanblq.github.io/2017/04/21/mySQL%E6%93%8D%E4%BD%9C/"/>
    <id>https://yuanblq.github.io/2017/04/21/mySQL操作/</id>
    <published>2017-04-21T11:38:36.000Z</published>
    <updated>2017-05-02T09:44:47.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>SQL分为三个部分：</p>
<p>DDL：Data Definition<br>Language，数据定义语言，用来维护存储数据的结构（数据库，表），代表指令：create，drop，alter等。</p>
<p>DML：Data Manipulation<br>Language，数据操作语言，用来对数据进行操作（数据表中的内容），代表指令：insert，delete，update等；其中DML内部又单独进行了一个分类：DQL（Data<br>Query Language：数据查询语言，如select）。</p>
<p>DCL：Data Control<br>Language，数据控制语言，主要是负责权限管理（用户），代表指令：grant，revoke等。</p>
<p>SQL是关系型数据库的操作指令，SQL是一种约束，但不强制（类似W3C），不同产品（如Oracle，mysql）可能内部会有一些细微的区别。</p>
<a id="more"></a>
<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><p>Mysql数据库是一种c/s结构的软件：客户端/服务端，若想访问服务器必须通过客户端（服务器一直运行，客户端在需要使用的时候运行）。</p>
<p>交互方式</p>
<ol>
<li><p>客户端连接认证：连接服务器，认证身份：mysql.exe -hPup（hP连接，up认证）</p>
<p> <img src="/2017/04/21/mySQL操作/1.png" alt="png"></p>
</li>
<li><p>发送SQL指令</p>
</li>
<li><p>服务器接收SQL指令，处理SQL指令，返回操作结果</p>
</li>
<li><p>客户端接受结果，显示结果</p>
<p> <img src="/2017/04/21/mySQL操作/2.png" alt="png"></p>
</li>
<li><p>断开连接（释放资源：服务器并发限制）：exit / quit / \q</p>
<p> <img src="/2017/04/21/mySQL操作/3.png" alt="png"></p>
</li>
</ol>
<h1 id="MySQL服务器对象"><a href="#MySQL服务器对象" class="headerlink" title="MySQL服务器对象"></a>MySQL服务器对象</h1><p>将mysql服务器内部对象分成四层：系统（DBMS）-> 数据库（DB）-><br>数据表（table）-> 字段（field）</p>
<p><img src="/2017/04/21/mySQL操作/4.png" alt="png"></p>
<h1 id="SQL基本操作"><a href="#SQL基本操作" class="headerlink" title="SQL基本操作"></a>SQL基本操作</h1><p>基本操作：CRUD</p>
<p>将SQL的基本操作根据操作对象分为三类：库操作，表操作（字段），数据操作</p>
<h2 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h2><p>对数据库的增删改查</p>
<h3 id="新增数据库"><a href="#新增数据库" class="headerlink" title="新增数据库"></a>新增数据库</h3><p>基本语法</p>
<p>create database 数据库名字 [库选项];</p>
<p>库选项：用来约束数据库，分为两个选项</p>
<p>字符集设定：charset / character set<br>具体字符集（数据存储的编码格式）：常用字符集：gbk和utf8</p>
<p>校对集设定：collate 具体校对集（数据比较的规则）</p>
<p><img src="/2017/04/21/mySQL操作/5.png" alt="png"></p>
<p>其中：数据库名字不能用关键字或者保留字，非要用可以在前后加上反引号（`）</p>
<p>当创建数据库的SQL语句执行后，发生了什么？</p>
<ol>
<li><p>在数据库系统中，增加了对应的数据库信息</p>
</li>
<li><p>会在保存数据的文件夹下：Data目录，创建一个对应数据库名字的文件夹</p>
<p><img src="/2017/04/21/mySQL操作/6.png" alt="png"></p>
</li>
<li><p>每个数据库下都有一个opt文件：保存了库选项</p>
<p><img src="/2017/04/21/mySQL操作/7.png" alt="png"></p>
</li>
</ol>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><ol>
<li><p>查看所有数据库</p>
<p>show databases;</p>
<p><img src="/2017/04/21/mySQL操作/8.png" alt="png"></p>
</li>
<li><p>查看指定部分的数据库：模糊查询</p>
<p>show databases like ‘pattern’ – pattern是匹配模式</p>
<p>%：表示匹配多个字符</p>
<p>_：表示匹配单个字符</p>
</li>
<li><p>查看数据库的创建语句</p>
<p>show create database 数据库名字;</p>
<p><img src="/2017/04/21/mySQL操作/9.png" alt="png"></p>
<p>数据库在执行SQL语句之前会优化SQL，系统保存优化之后的结果。</p>
</li>
</ol>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><p>数据库的名字不可以修改。 – 修改数据库名字不安全</p>
<p>数据库的修改仅限库选项：字符集和校对集（校对集依赖字符集）</p>
<p>alter database 数据库名字 [库选项];</p>
<p>库选项：charset / character set [=] 字符集</p>
<p>collate 校对集</p>
<p><img src="/2017/04/21/mySQL操作/10.png" alt="png"></p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>drop database 数据库名字;</p>
<p><img src="/2017/04/21/mySQL操作/11.png" alt="png"></p>
<p>当执行删除数据库语句时，发生了什么？</p>
<ol>
<li><p>在数据库内部看不到对应的数据库</p>
</li>
<li><p>在对应的数据库存储的文件夹内：数据库名字对应的文件夹也被删除（级联删除：里面的数据表全部删除）</p>
</li>
</ol>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p>表与字段是不可分的。</p>
<h3 id="新增数据表"><a href="#新增数据表" class="headerlink" title="新增数据表"></a>新增数据表</h3><p>create table [if not exists] 表名(</p>
<p>字段名字 数据类型,</p>
<p>字段名字 数据类型,</p>
<p>…</p>
<p>)[表选项];</p>
<p>if not exists：如果表名不存在，那就创建，否则不执行创建代码：检查功能</p>
<p>表选项：控制表的表现</p>
<p>字符集：charset / character set 具体字符集; – 保证表中数据存储的字符集</p>
<p>校对集：collate 具体校对集;</p>
<p>存储引擎：engin 具体的存储引擎（innodb和myisam）</p>
<p><img src="/2017/04/21/mySQL操作/12.png" alt="png"></p>
<p>任何一个表的设计都必须指定数据库。</p>
<p>方案1：显式的指定表所属的数据库</p>
<p>create table 数据库名.表名(); – 将当前的数据表创建到指定的数据库下</p>
<p><img src="/2017/04/21/mySQL操作/13.png" alt="png"></p>
<p>方案2：隐式的指定表所属的数据库：先进入到某个数据库环境，这样创建的表自动归属到某个指定的数据库。</p>
<p>进入数据库环境：use 数据库名字</p>
<p><img src="/2017/04/21/mySQL操作/14.png" alt="png"></p>
<p>当创建表的SQL指令执行之后，发生了什么？</p>
<ol>
<li><p>指定数据库下已经存在对应的表</p>
</li>
<li><p>在数据库对应的文件夹下，会产生对应表的机构文件（跟存储引擎有关）</p>
<p><img src="/2017/04/21/mySQL操作/15.png" alt="png"></p>
</li>
</ol>
<h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><p>数据库能查看的方式表都能用。</p>
<ol>
<li><p>查看所有表：show tables;</p>
<p><img src="/2017/04/21/mySQL操作/16.png" alt="png"></p>
</li>
<li><p>查看部分表：show tables like ‘pattren’; – pattern 匹配模式</p>
</li>
<li><p>查看表创建语句：show create table 表名;</p>
<p>show create table student\g – \g 等价于分号（;）</p>
<p>show create table student\G; – \G将查到的结构旋转90°（纵向）</p>
<p><img src="/2017/04/21/mySQL操作/17.png" alt="png"></p>
</li>
<li><p>查看表结构：查看表中的字段信息</p>
<p>desc/ describe / show columns from 表名;</p>
<p><img src="/2017/04/21/mySQL操作/18.png" alt="png"></p>
</li>
</ol>
<h3 id="更新数据表"><a href="#更新数据表" class="headerlink" title="更新数据表"></a>更新数据表</h3><p>表的修改分为两部分：修改表本身和修改字段</p>
<h4 id="修改表本身"><a href="#修改表本身" class="headerlink" title="修改表本身"></a>修改表本身</h4><p>表本身可以修改：表名和表选项</p>
<ol>
<li><p>修改表名：rename table 老表名 to 新表名;</p>
<p><img src="/2017/04/21/mySQL操作/19.png" alt="png"></p>
</li>
<li><p>修改表选项：字符集，校对集和存储引擎</p>
<p>alter table 表名 表选项 [=] 值</p>
<p><img src="/2017/04/21/mySQL操作/20.png" alt="png"></p>
</li>
</ol>
<h4 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h4><p>字段操作有很多：新增，修改，重名，删除</p>
<ol>
<li><p>新增字段</p>
<p>alter table 表名 add [column] 字段名 数据类型 [列属性] [位置];</p>
<p>位置：字段名可以存放到表中的任意位置：</p>
<p>first：第一个位置</p>
<p>after：在哪个字段之后：after 字段名；默认的是在最后一个字段之后</p>
<p><img src="/2017/04/21/mySQL操作/21.png" alt="png"></p>
</li>
<li><p>修改字段：通常修改属性或者数据类型</p>
<p>alter table 表名 modify 字段名 数据类型 [属性] [位置];</p>
<p><img src="/2017/04/21/mySQL操作/22.png" alt="png"></p>
</li>
<li><p>重命名字段</p>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 [属性] [位置];</p>
<p><img src="/2017/04/21/mySQL操作/23.png" alt="png"></p>
</li>
<li><p>删除字段</p>
<p>alter table 表名 drop 字段名;</p>
<p><img src="/2017/04/21/mySQL操作/24.png" alt="png"></p>
</li>
</ol>
<h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><p>drop table 表名1，表名2…; – 可以删除多张数据表</p>
<p><img src="/2017/04/21/mySQL操作/25.png" alt="png"></p>
<p>当删除数据表的指令执行后发生了什么？</p>
<ol>
<li><p>在表空间中，没有了指定的表（数据也没有了）</p>
</li>
<li><p>在数据库对用的文件夹下，表对应的文件（与存储引擎有关）也会被删除</p>
<p><img src="/2017/04/21/mySQL操作/26.png" alt="png"></p>
</li>
</ol>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><p>有两种方法</p>
<p>方案1：给全表字段插入数据，不需要指定字段列表：要求数据的值出现的顺序必须与表中设计的字段出现的顺序一致：凡是非数值数据，都需要使用引号（建议是单引号）包裹</p>
<p>insert into 表名 values(值列表)[,(值列表)]; – 可以一次性插入多条记录</p>
<p><img src="/2017/04/21/mySQL操作/27.png" alt="png"></p>
<p>方案2：给部分字段插入数据，需要选定字段列表：字段列表出现的顺序与字段的顺序无关，但是值列表的顺序必须与选定的字段的顺序一致。</p>
<p>inset into 表名 (字段列表) values (值列表)[,(值列表)];</p>
<p><img src="/2017/04/21/mySQL操作/28.png" alt="png"></p>
<h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>select */字段列表 from 表名 [where 条件];</p>
<ol>
<li><p>查看所有数据</p>
<p><img src="/2017/04/21/mySQL操作/29.png" alt="png"></p>
</li>
<li><p>查看指定字段，指定条件的数据</p>
<p><img src="/2017/04/21/mySQL操作/30.png" alt="png"></p>
</li>
</ol>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>update 表名 set 字段 = 值 [where 条件]; – 不加where条件就是更新全部数据</p>
<p><img src="/2017/04/21/mySQL操作/31.png" alt="png"></p>
<h3 id="删除数据库-1"><a href="#删除数据库-1" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>delete from 表名 [where条件];</p>
<p><img src="/2017/04/21/mySQL操作/32.png" alt="png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;p&gt;SQL分为三个部分：&lt;/p&gt;
&lt;p&gt;DDL：Data Definition&lt;br&gt;Language，数据定义语言，用来维护存储数据的结构（数据库，表），代表指令：create，drop，alter等。&lt;/p&gt;
&lt;p&gt;DML：Data Manipulation&lt;br&gt;Language，数据操作语言，用来对数据进行操作（数据表中的内容），代表指令：insert，delete，update等；其中DML内部又单独进行了一个分类：DQL（Data&lt;br&gt;Query Language：数据查询语言，如select）。&lt;/p&gt;
&lt;p&gt;DCL：Data Control&lt;br&gt;Language，数据控制语言，主要是负责权限管理（用户），代表指令：grant，revoke等。&lt;/p&gt;
&lt;p&gt;SQL是关系型数据库的操作指令，SQL是一种约束，但不强制（类似W3C），不同产品（如Oracle，mysql）可能内部会有一些细微的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="document" scheme="https://yuanblq.github.io/categories/document/"/>
    
    
      <category term="mySQL" scheme="https://yuanblq.github.io/tags/mySQL/"/>
    
  </entry>
  
  <entry>
    <title>词云小例子</title>
    <link href="https://yuanblq.github.io/2017/04/17/%E8%AF%8D%E4%BA%91%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
    <id>https://yuanblq.github.io/2017/04/17/词云小例子/</id>
    <published>2017-04-17T14:52:09.000Z</published>
    <updated>2017-08-02T14:08:04.481Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">在<a href="/2017/04/10/WordCloud/" title="&nbsp;上一篇&nbsp;">&nbsp;上一篇&nbsp;</a>中介绍了 word cloud 的一些用法，下面是几个实战小例子。</font></p>
<h2 id="使用默认参数从文本中生成矩形词云"><a href="#使用默认参数从文本中生成矩形词云" class="headerlink" title="使用默认参数从文本中生成矩形词云"></a>使用默认参数从文本中生成矩形词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div></pre></td></tr></table></figure>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'JaneEyre.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    text = f.read()</div></pre></td></tr></table></figure>
<h3 id="生成词云图"><a href="#生成词云图" class="headerlink" title="生成词云图"></a>生成词云图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wordcloud = WordCloud().generate(text)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="展示生成的图片"><a href="#展示生成的图片" class="headerlink" title="展示生成的图片"></a>展示生成的图片</h3><h4 id="matplotlib-方式："><a href="#matplotlib-方式：" class="headerlink" title="matplotlib 方式："></a>matplotlib 方式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/04/17/词云小例子/output_8_0.png" alt="png"></p>
<h5 id="把最大字体尺寸改小点"><a href="#把最大字体尺寸改小点" class="headerlink" title="把最大字体尺寸改小点"></a>把最大字体尺寸改小点</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wordcloud = WordCloud(max_font_size=<span class="number">40</span>).generate(text)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/04/17/词云小例子/output_10_0.png" alt="png"></p>
<h4 id="用PIL方式（这种方式需要有管理员权限才可以运行）："><a href="#用PIL方式（这种方式需要有管理员权限才可以运行）：" class="headerlink" title="用PIL方式（这种方式需要有管理员权限才可以运行）："></a>用PIL方式（这种方式需要有管理员权限才可以运行）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行之后会自动打开生成的图片文件</span></div><div class="line">image = wordcloud.to_image()</div><div class="line">image.show()</div></pre></td></tr></table></figure>
<h2 id="在mask中生成词云图"><a href="#在mask中生成词云图" class="headerlink" title="在mask中生成词云图"></a>在mask中生成词云图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS</div></pre></td></tr></table></figure>
<h3 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'JaneEyre.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    text = f.read()</div></pre></td></tr></table></figure>
<h3 id="读取用作mask的图片"><a href="#读取用作mask的图片" class="headerlink" title="读取用作mask的图片"></a>读取用作mask的图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> Image.open(<span class="string">'mask.jpg'</span>) <span class="keyword">as</span> p:</div><div class="line">    mask = np.array(p)</div></pre></td></tr></table></figure>
<h3 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a>生成词云</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wc = WordCloud(background_color=<span class="string">'white'</span>, max_words=<span class="number">2000</span>, mask=mask)</div><div class="line">wc.generate(text)</div></pre></td></tr></table></figure>
<pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x7c849b0&gt;
</code></pre><h3 id="存储到文件中"><a href="#存储到文件中" class="headerlink" title="存储到文件中"></a>存储到文件中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc.to_file(<span class="string">'wc.png'</span>)</div></pre></td></tr></table></figure>
<pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x7c849b0&gt;
</code></pre><h3 id="或者直接显示出来"><a href="#或者直接显示出来" class="headerlink" title="或者直接显示出来"></a>或者直接显示出来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.imshow(wc, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(mask, cmap=plt.cm.gray, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/2017/04/17/词云小例子/output_11_0.png" alt="png"></p>
<p><img src="/2017/04/17/词云小例子/output_11_1.png" alt="png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;4&quot;&gt;在&lt;a href=&quot;/2017/04/10/WordCloud/&quot; title=&quot;&amp;nbsp;上一篇&amp;nbsp;&quot;&gt;&amp;nbsp;上一篇&amp;nbsp;&lt;/a&gt;中介绍了 word cloud 的一些用法，下面是几个实战小例子。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用默认参数从文本中生成矩形词云&quot;&gt;&lt;a href=&quot;#使用默认参数从文本中生成矩形词云&quot; class=&quot;headerlink&quot; title=&quot;使用默认参数从文本中生成矩形词云&quot;&gt;&lt;/a&gt;使用默认参数从文本中生成矩形词云&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wordcloud &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; WordCloud&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;读取文件&quot;&gt;&lt;a href=&quot;#读取文件&quot; class=&quot;headerlink&quot; title=&quot;读取文件&quot;&gt;&lt;/a&gt;读取文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;JaneEyre.txt&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text = f.read()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成词云图&quot;&gt;&lt;a href=&quot;#生成词云图&quot; class=&quot;headerlink&quot; title=&quot;生成词云图&quot;&gt;&lt;/a&gt;生成词云图&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wordcloud = WordCloud().generate(text)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="小练习" scheme="https://yuanblq.github.io/categories/%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="词云" scheme="https://yuanblq.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="wordcloud" scheme="https://yuanblq.github.io/tags/wordcloud/"/>
    
      <category term="mask" scheme="https://yuanblq.github.io/tags/mask/"/>
    
  </entry>
  
  <entry>
    <title>WordCloud</title>
    <link href="https://yuanblq.github.io/2017/04/10/WordCloud/"/>
    <id>https://yuanblq.github.io/2017/04/10/WordCloud/</id>
    <published>2017-04-10T12:55:52.000Z</published>
    <updated>2017-08-02T14:07:45.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wordcloud-的-API-Reference-分三部分："><a href="#Wordcloud-的-API-Reference-分三部分：" class="headerlink" title="Wordcloud 的 API Reference 分三部分："></a>Wordcloud 的 API Reference 分三部分：</h1><ul>
<li>WordCloud([font_path, width, height, …])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Word cloud对象，用于生成以及绘制</li>
<li>ImageColorGenerator(image)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于一个彩色图片的颜色生成器</li>
<li>random_color_func([word, font_size, …])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随机色相生成器</li>
</ul>
<a id="more"></a>
<h2 id="wordcloud-WordCloud"><a href="#wordcloud-WordCloud" class="headerlink" title="wordcloud.WordCloud"></a>wordcloud.WordCloud</h2><p><table><tr><td bgcolor="#EEE8AA">class <font color="red"><b>wordcloud.WordCloud </b></font>(font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=’black’, max_font_size=None, font_step=1, mode=’RGB’, relative_scaling=0.5, regexp=None, collocations=True, colormap=None, normalize_plurals=True)<br></td></tr></table></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h3><h4 id="font-path-sting"><a href="#font-path-sting" class="headerlink" title="font_path : sting"></a>font_path : sting</h4><div class="note default"><p>字体的路径（OTF 或者 TTF 字体）。在Linux上默认为 DroidSansMono 路径，如果没有这个字体或者其它的 OS 操作系统，那就需要手动调整路径。</p>
</div>
<h4 id="width-int-default-400"><a href="#width-int-default-400" class="headerlink" title="width : int (default=400)"></a>width : int (default=400)</h4><div class="note default"><p>画布的宽度。</p>
</div>
<h4 id="height-int-default-200"><a href="#height-int-default-200" class="headerlink" title="height : int (default=200)"></a>height : int (default=200)</h4><div class="note default"><p>画布的高度。</p>
</div>
<h4 id="prefer-horizontal-float-default-0-9"><a href="#prefer-horizontal-float-default-0-9" class="headerlink" title="prefer_horizontal : float (default=0.9)"></a>prefer_horizontal : float (default=0.9)</h4><div class="note default"><p>水平词语占的比例，即最后词云图中以水平方式展现的词语占的比例。</p>
</div>
<h4 id="mask-nd-array-or-None-default-None"><a href="#mask-nd-array-or-None-default-None" class="headerlink" title="mask : nd-array or None (default=None)"></a>mask : nd-array or None (default=None)</h4><div class="note default"><p>如果不为None，那么就在这给定的二进制文件的mask上绘制词云，并且忽略 width 和 height 。<br>所有的白色区域（#FF 或者 #FFFFFF）都视为在mask外部，也就是不绘制词云。</p>
</div>
<h4 id="scale-float-default-1"><a href="#scale-float-default-1" class="headerlink" title="scale : float (default=1)"></a>scale : float (default=1)</h4><div class="note default"><p>当词云图片比较大时，不要使用大画布而是使用 scale 缩放。</p>
</div>
<h4 id="min-font-size-int-default-4"><a href="#min-font-size-int-default-4" class="headerlink" title="min_font_size : int (default=4)"></a>min_font_size : int (default=4)</h4><div class="note default"><p>所使用的最小尺寸的字体。当没有空间能容纳此尺寸的字体时，停止绘制词云。</p>
</div>
<h4 id="font-step-int-default-1"><a href="#font-step-int-default-1" class="headerlink" title="font_step : int (default=1)"></a>font_step : int (default=1)</h4><div class="note default"><p>字体大小渐变步长。</p>
</div>
<h4 id="max-words-number-default-200"><a href="#max-words-number-default-200" class="headerlink" title="max_words : number (default=200)"></a>max_words : number (default=200)</h4><div class="note default"><p>最大词数。</p>
</div>
<h4 id="stopwords-set-of-strings-or-None"><a href="#stopwords-set-of-strings-or-None" class="headerlink" title="stopwords : set of strings or None"></a>stopwords : set of strings or None</h4><div class="note default"><p>不计入的词语集合。</p>
</div>
<h4 id="background-color-color-value-default-”black”"><a href="#background-color-color-value-default-”black”" class="headerlink" title="background_color : color value (default=”black”)"></a>background_color : color value (default=”black”)</h4><div class="note default"><p>词云图的背景颜色。</p>
</div>
<h4 id="max-font-size-int-or-None-default-None"><a href="#max-font-size-int-or-None-default-None" class="headerlink" title="max_font_size : int or None (default=None)"></a>max_font_size : int or None (default=None)</h4><div class="note default"><p>最大词语的字体大小。如果为 None，则使用图片的 height。</p>
</div>
<h4 id="mode-string-default-”RGB”"><a href="#mode-string-default-”RGB”" class="headerlink" title="mode : string (default=”RGB”)"></a>mode : string (default=”RGB”)</h4><div class="note default"><p>当模式为 “RGBA” 时，可以生成透明背景，background_color 可以为 None。</p>
</div>
<h4 id="relative-scaling-float-default-0-5"><a href="#relative-scaling-float-default-0-5" class="headerlink" title="relative_scaling : float (default=0.5)"></a>relative_scaling : float (default=0.5)</h4><div class="note default"><p>为 0 时，字体大小只考虑词的频率排名。<br>为 1 时，某个词频率为其它词频率 2 倍时，该字体的大小也是它的 2 倍。<br>一般设为 0.5 比较合适。</p>
</div>
<h4 id="color-func-callable-default-None"><a href="#color-func-callable-default-None" class="headerlink" title="color_func : callable (default=None)"></a>color_func : callable (default=None)</h4><div class="note default"><p>带有 word, font_size, position, orientation, font_path, random_state 参数，给每个词返回 PIL 颜色的调用对象。<br>会覆盖 “colormap”。</p>
</div>
<h4 id="regexp-string-or-None-optional"><a href="#regexp-string-or-None-optional" class="headerlink" title="regexp : string or None (optional)"></a>regexp : string or None (optional)</h4><div class="note default"><p>分词规则。如果为 None ，则使用 r”\w[\w’]+”。</p>
</div>
<h4 id="collocations-bool-default-True"><a href="#collocations-bool-default-True" class="headerlink" title="collocations : bool (default=True)"></a>collocations : bool (default=True)</h4><div class="note default"><p>是否需要包括两个词组成的词语。</p>
</div>
<h4 id="colormap-string-or-matplotlib-colormap-default-”viridis”"><a href="#colormap-string-or-matplotlib-colormap-default-”viridis”" class="headerlink" title="colormap : string or matplotlib colormap (default=”viridis”)"></a>colormap : string or matplotlib colormap (default=”viridis”)</h4><div class="note default"><p>从中任意选取颜色来绘制每个词。如果 “color_func” 指定的话，则忽略此参数。</p>
</div>
<h4 id="normalize-plurals-bool-default-True"><a href="#normalize-plurals-bool-default-True" class="headerlink" title="normalize_plurals : bool (default=True)"></a>normalize_plurals : bool (default=True)</h4><div class="note default"><p>是否需要把词语的 ‘s’ 后缀移除，并将其加入没有 ‘s’ 后缀的词的统计中。</p>
</div>
<h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><div class="note default"><p>大尺寸的画布会使代码运行缓慢。如果需要一个大的词云图，那就用”小尺寸画布”和”scale参数”。</p>
</div>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="words-list-of-tuples-string-float"><a href="#words-list-of-tuples-string-float" class="headerlink" title="words_ : list of tuples (string, float)"></a>words_ : list of tuples (string, float)</h4><div class="note default"><p>带有频率的词语</p>
</div>
<h4 id="layout-list-of-tuples-string-int-int-int-int-color"><a href="#layout-list-of-tuples-string-int-int-int-int-color" class="headerlink" title="layout_ : list of tuples (string, int, (int, int), int ,color)"></a>layout_ : list of tuples (string, int, (int, int), int ,color)</h4><div class="note default"><p>编码拟合好的词云。每个词语的字符串、字号、位置、方向和颜色的编码。</p>
</div>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="init-font-path-None-width-400-…"><a href="#init-font-path-None-width-400-…" class="headerlink" title="init(font_path=None, width=400, …)"></a><strong>init</strong>(font_path=None, width=400, …)</h4><div class="note default"><p>Parameters :<br>font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=’black’, max_font_size=None, font_step=1, mode=’RGB’, relative_scaling=0.5, regexp=None, collocations=True, colormap=None, normalize_plurals=True</p>
</div>
<h4 id="fit-words-frequencies"><a href="#fit-words-frequencies" class="headerlink" title="fit_words (frequencies)"></a>fit_words (frequencies)</h4><div class="note default"><p>通过 words 和 frequencies 创建 word_cloud。<br>generate_from_frequencies 的别名。</p>
<p>Parameters : </p>
<ul>
<li>frequencies : tuples 数组 （一个包含 word 和 frequency 的 tuple）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="generate-text"><a href="#generate-text" class="headerlink" title="generate (text)"></a>generate (text)</h4><div class="note default"><p>通过 text 生成 wordcloud<br>generate_from_text 的别名。<br>调用了 process_text 和 generate_from_frequencies。</p>
<p>Returns : self</p>
</div>
<h4 id="generate-from-frequencies-frequencies-…"><a href="#generate-from-frequencies-frequencies-…" class="headerlink" title="generate_from_frequencies (frequencies[, …])"></a>generate_from_frequencies (frequencies[, …])</h4><div class="note default"><p>通过 words 和 frequencies 创建 word_cloud。</p>
<p>Parameters : </p>
<ul>
<li>frequencies : 一个 string to float 的词典 （包含 words 和相关的频率）。</li>
<li>max_font_size : int （使用 font-size 而不是 self.max_font_size）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="generate-from-text-text"><a href="#generate-from-text-text" class="headerlink" title="generate_from_text (text)"></a>generate_from_text (text)</h4><div class="note default"><p>通过 text 生成 wordcloud。<br>调用了 process_text 和 generate_from_frequencies。</p>
<p><b> 版本变化(1.2.2)： </b><br>generate_from_frequencies() 的参数不再返回 process_text()。</p>
<p>Returns : self</p>
</div>
<h4 id="process-text-text"><a href="#process-text-text" class="headerlink" title="process_text (text)"></a>process_text (text)</h4><div class="note default"><p>把长文本分割成词语，移除 stopwords。</p>
<p>Parameters : </p>
<ul>
<li>text : string （要处理的文本）。</li>
</ul>
<p>Returns : </p>
<ul>
<li>words : 相关频率标记的词</li>
<li><b>版本变化(1.2.2)：</b>返回类型从 tuples 的 list 变为 dict。</li>
</ul>
</div>
<h4 id="recolor-random-state-color-func-colormap"><a href="#recolor-random-state-color-func-colormap" class="headerlink" title="recolor ([random_state, color_func, colormap])"></a>recolor ([random_state, color_func, colormap])</h4><div class="note default"><p>给已存在的布局重新上色。</p>
<p>Parameters : </p>
<ul>
<li>random_state : RandomState, int or None, default=None（如果不为 None 即使用了确定的随机状态 ，那么给的 int 值即为 random 的 seed）。</li>
<li>color_func : function or None, default=None （从 word count, font size, position 和 orientation 生成新颜色的 function, 如果为 None 则使用 self.color_func ）。</li>
<li>colormap : string or matplotlib colormap, default=None （使用这个 colormap 生成新的 colors. 如果 color_func 指定了则忽略此参数。如果为 None 则使用 self.color_func 或者 self.color_map ）。</li>
</ul>
<p>Returns : self</p>
</div>
<h4 id="to-array"><a href="#to-array" class="headerlink" title="to_array ()"></a>to_array ()</h4><div class="note default"><p>转换成 numpy 数组。</p>
<p>Returns : </p>
<ul>
<li>image : nd-array size (width, height, 3) （numpy 矩阵的词云图）。</li>
</ul>
</div>
<h4 id="to-file-filename"><a href="#to-file-filename" class="headerlink" title="to_file (filename)"></a>to_file (filename)</h4><div class="note default"><p>导出为图片文件。</p>
<p>Parameters : filename : string （写入位置）。</p>
<p>Returns : self</p>
</div>
<h4 id="to-html"><a href="#to-html" class="headerlink" title="to_html ()"></a>to_html ()</h4><h4 id="to-image"><a href="#to-image" class="headerlink" title="to_image ()"></a>to_image ()</h4><h2 id="wordcloud-ImageColorGenerator"><a href="#wordcloud-ImageColorGenerator" class="headerlink" title="wordcloud.ImageColorGenerator"></a>wordcloud.ImageColorGenerator</h2><p><table><tr><td bgcolor="#EEE8AA">class <font color="red"><b>wordcloud.ImageColorGenerator </b></font>(image)<br></td></tr></table><br>颜色生成器基于一张 RGB 颜色的图片。词的颜色由它所在图片中附近的颜色的均值决定。<br>生成之后，该对象可以作为 color_func 传入 wordcloud 构造器中，或者 recolor 方法中。</p>
<p>Parameters : </p>
<ul>
<li>image : nd-array, shape (height, width, 3)<div class="note default"><p>image 是用来生成词的颜色。忽略 Alpha 通道。 image应与画布大小尺寸一致。</p>
</div>
</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="call-word-font-size-font-path-…"><a href="#call-word-font-size-font-path-…" class="headerlink" title="call (word, font_size, font_path, …)"></a><strong>call</strong> (word, font_size, font_path, …)</h4><p>使用固定的图片给指定的词生成颜色。</p>
<h4 id="init-image"><a href="#init-image" class="headerlink" title="init (image)"></a><strong>init</strong> (image)</h4><h2 id="wordcloud-random-color-func"><a href="#wordcloud-random-color-func" class="headerlink" title="wordcloud.random_color_func"></a>wordcloud.random_color_func</h2><p><table><tr><td bgcolor="#EEE8AA"><font color="red"><b>wordcloud.random_color_func </b></font>(word=None, font_size=None, position=None, orientation=None, font_path=None, random_state=None)<br></td></tr></table><br>随机色相生成器。<br>默认的上色方法。该方法采取 80% 的色相和 50% 的亮度。</p>
<p>Parameters : </p>
<ul>
<li>word</li>
<li>font_size</li>
<li>position</li>
<li>orientation : ignored</li>
<li>random_state : random.Random 对象或者 None，默认为 None（如果指定了 random 对象，则使用此生成随机数）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Wordcloud-的-API-Reference-分三部分：&quot;&gt;&lt;a href=&quot;#Wordcloud-的-API-Reference-分三部分：&quot; class=&quot;headerlink&quot; title=&quot;Wordcloud 的 API Reference 分三部分：&quot;&gt;&lt;/a&gt;Wordcloud 的 API Reference 分三部分：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;WordCloud([font_path, width, height, …])&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Word cloud对象，用于生成以及绘制&lt;/li&gt;
&lt;li&gt;ImageColorGenerator(image)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;基于一个彩色图片的颜色生成器&lt;/li&gt;
&lt;li&gt;random_color_func([word, font_size, …])&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随机色相生成器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="模块文档" scheme="https://yuanblq.github.io/categories/%E6%A8%A1%E5%9D%97%E6%96%87%E6%A1%A3/"/>
    
      <category term="document" scheme="https://yuanblq.github.io/categories/%E6%A8%A1%E5%9D%97%E6%96%87%E6%A1%A3/document/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="词云" scheme="https://yuanblq.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="wordcloud" scheme="https://yuanblq.github.io/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>自定义Django表单样式</title>
    <link href="https://yuanblq.github.io/2017/04/03/%E8%87%AA%E5%AE%9A%E4%B9%89Django%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F/"/>
    <id>https://yuanblq.github.io/2017/04/03/自定义Django表单样式/</id>
    <published>2017-04-03T12:00:06.000Z</published>
    <updated>2017-08-02T14:06:54.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义-Django-表单样式"><a href="#自定义-Django-表单样式" class="headerlink" title="自定义 Django 表单样式"></a>自定义 Django 表单样式</h2><p>Django 提供了强大的表单系统，和 Django 的模板系统搭配使用分分钟搞定表单功能。</p>
<p>但是，Django 默认的表单样式非常丑陋，别说 BOSS 不同意，我们自己也绝不会容许这么丑的表单出现在网页上。</p>
<p>可能有些人通过查看渲染后的网页源码知道，每一个 Django 表单的字段都会有一个 <code>id</code>，然后直接给对应的 <code>id</code> 赋上样式就可以了。这样做可以是可以，但是不够优雅。</p>
<p>实际上 Django 为我们提供了 2 种优雅的实现方式。</p>
<a id="more"></a>
<h3 id="实例化的时候渲染样式"><a href="#实例化的时候渲染样式" class="headerlink" title="实例化的时候渲染样式"></a>实例化的时候渲染样式</h3><p>在表单中，实例化部件的时候添加 <code>attrs</code> 参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    name = forms.CharField(widget=forms.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'css_name'</span>&#125;))</div><div class="line">    url = forms.URLField()</div><div class="line">    comment = forms.CharField(widget=forms.TextInput(attrs=&#123;<span class="string">'placeholder'</span>: <span class="string">'comment here'</span>&#125;))</div></pre></td></tr></table></figure>
<p>这样，Django 在渲染的时候会输出以下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = CommentForm(auto_id=False)</div><div class="line">&gt;&gt;&gt; f.as_table()</div><div class="line">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="name" class="css_name"/&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;input type="url" name="url"/&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="comment" placeholder="comment here"/&gt;&lt;/td&gt;&lt;/tr&gt;</div></pre></td></tr></table></figure>
<h3 id="直接创建所需-widget-部件的子类"><a href="#直接创建所需-widget-部件的子类" class="headerlink" title="直接创建所需 widget 部件的子类"></a>直接创建所需 <code>widget</code> 部件的子类</h3><p>在创建对应子类的时候，通过声明一个叫 <code>Media</code> 的内部类，不单单可以轻松地定义样式，还可以给定 js 属性。</p>
<h4 id="静态定义"><a href="#静态定义" class="headerlink" title="静态定义"></a>静态定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarWidget</span><span class="params">(forms.TextInput)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></div><div class="line">        css = &#123;</div><div class="line">            <span class="string">'all'</span>: (<span class="string">'pretty.css'</span>,)</div><div class="line">        &#125;</div><div class="line">        js = (<span class="string">'animations.js'</span>, <span class="string">'actions.js'</span>)</div></pre></td></tr></table></figure>
<p>显而易见，我们定义了一个继承自 <code>TextInput</code> 的 <code>CalendarWidget</code> 部件。每当使用 <code>CalendarWidget</code> 部件的时候，都会使用 <code>pretty.css</code> 样式，例外还会附带 <code>animations.js</code> 和 <code>actions.js</code> 的行为。</p>
<h5 id="首先看-css-属性"><a href="#首先看-css-属性" class="headerlink" title="首先看 css 属性"></a>首先看 <code>css</code> 属性</h5><p>这是一个字典，键名为输出的 <code>media</code> 类型，和正常的 css 中的声明一样，包括：<code>all</code>，<code>aural</code>，<code>braille</code>，<code>screen</code>，<code>print</code>…如果对于不同的输出媒体，需要不同的样式，则可以添加多种键值对。</p>
<p>对应的键值是所引用的 css 文件的路径。</p>
<h5 id="js-属性"><a href="#js-属性" class="headerlink" title="js 属性"></a>js 属性</h5><p>同 css 属性的键值。</p>
<h4 id="动态定义"><a href="#动态定义" class="headerlink" title="动态定义"></a>动态定义</h4><p>上面静态定义的 <code>CalendarWidget</code> 也可以这样动态定义：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarWidget</span><span class="params">(forms.TextInput)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">media</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> forms.Media(css=&#123;<span class="string">'all'</span>: (<span class="string">'pretty.css'</span>,)&#125;,</div><div class="line">                           js=(<span class="string">'animations.js'</span>, <span class="string">'actions.js'</span>))</div></pre></td></tr></table></figure></p>
<p>创建完自定义的部件类后，就可以直接在表单类中使用了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">     date = DateField(widget=CalendarWidget)</div><div class="line">     name = CharField(max_length=<span class="number">40</span>, widget=OtherWidget)</div></pre></td></tr></table></figure>
<p>如果表单类也想添加 css，js 资源，同样可以声明 <code>Media</code> 内部类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">     date = DateField(widget=CalendarWidget)</div><div class="line">     name = CharField(max_length=<span class="number">40</span>, widget=OtherWidget)</div><div class="line"></div><div class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></div><div class="line">         css = &#123;</div><div class="line">             <span class="string">'all'</span>: (<span class="string">'layout.css'</span>,)</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义-Django-表单样式&quot;&gt;&lt;a href=&quot;#自定义-Django-表单样式&quot; class=&quot;headerlink&quot; title=&quot;自定义 Django 表单样式&quot;&gt;&lt;/a&gt;自定义 Django 表单样式&lt;/h2&gt;&lt;p&gt;Django 提供了强大的表单系统，和 Django 的模板系统搭配使用分分钟搞定表单功能。&lt;/p&gt;
&lt;p&gt;但是，Django 默认的表单样式非常丑陋，别说 BOSS 不同意，我们自己也绝不会容许这么丑的表单出现在网页上。&lt;/p&gt;
&lt;p&gt;可能有些人通过查看渲染后的网页源码知道，每一个 Django 表单的字段都会有一个 &lt;code&gt;id&lt;/code&gt;，然后直接给对应的 &lt;code&gt;id&lt;/code&gt; 赋上样式就可以了。这样做可以是可以，但是不够优雅。&lt;/p&gt;
&lt;p&gt;实际上 Django 为我们提供了 2 种优雅的实现方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yuanblq.github.io/categories/Django/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django提交表单以及类视图</title>
    <link href="https://yuanblq.github.io/2017/03/22/Django%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95/"/>
    <id>https://yuanblq.github.io/2017/03/22/Django提交表单/</id>
    <published>2017-03-22T12:54:14.000Z</published>
    <updated>2017-08-02T14:05:21.458Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Django 提交表单很简单，而且 Django 内置了跨站请求伪造攻击的防御方法。</p>
<p>先来看下 Django 中简单表单的提交。</p>
<a id="more"></a>
<h2 id="现在模板中添加以下代码"><a href="#现在模板中添加以下代码" class="headerlink" title="现在模板中添加以下代码"></a>现在模板中添加以下代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- polls/templates/polls/detail.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;  question.question_text &#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">&#123; % if error_message % &#125;</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123; &#123; error_message &#125;  &#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">&#123; % endif % &#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">”&#123;</span> % <span class="attr">url</span>  ‘<span class="attr">polls:vote</span>’ <span class="attr">question.id</span> % &#125;” <span class="attr">method</span>=<span class="string">”post”</span>&gt;</span></div><div class="line">    &#123; % csrf_token % &#125;</div><div class="line">    &#123; % for choice in question.choice_set.all %  &#125;</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”radio”</span> <span class="attr">name</span>=<span class="string">”choice”</span> <span class="attr">id</span>=<span class="string">”choice&#123;</span> &#123; <span class="attr">forloop.counter</span> &#125;  &#125;” <span class="attr">value</span>=<span class="string">”&#123;</span> &#123; <span class="attr">choice.id</span> &#125; &#125;”/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">”choice&#123;</span> &#123; <span class="attr">forloop.counter</span> &#125; &#125;”&gt;</span>&#123; &#123;  choice.choice_text &#125; &#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    &#123; % endfor % &#125;</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span> <span class="attr">value</span>=<span class="string">”Vote”/</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>解释一下：</p>
<ul>
<li><p>value=”{ { choice.id } }”，name=”choice”，表示提交表单后，POST的数据为choice=choice.id，即把当前选中的choice的id以choice为名发送到{ % url … % }</p>
</li>
<li><p>forloop.counter表示for循环当前进行到第几次（从1开始计）</p>
</li>
<li><p>label标签的for和radio的name一致，即可实现点击文本也可选中按钮</p>
</li>
</ul>
<h2 id="创建和该-template-对应的-view-视图"><a href="#创建和该-template-对应的-view-视图" class="headerlink" title="创建和该 template 对应的 view 视图"></a>创建和该 template 对应的 view 视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># polls/views.py</span></div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reversefrom .model impore Question,  Choice</div><div class="line"></div><div class="line"><span class="comment">#..</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        selected_choice = question.choice_set.get(pk=request.POST[‘choice‘])</div><div class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</div><div class="line">        <span class="keyword">return</span> render(request,  ‘polls/detail.html’, &#123;‘question’: question, ‘error_message’: “You didn’t  select a choice”&#125;)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        selected_choice.vote +=<span class="number">1</span></div><div class="line">        selected_choice.save()        </div><div class="line">        <span class="keyword">return</span>  HttpResponseRedirect(reverse(‘polls:results’, args=(question_id, )))</div></pre></td></tr></table></figure>
<p>同样，先解释一下：</p>
<ul>
<li><p>request.POST是一个类字典对象能通过key name访问submit的数据（其值永远是个str类型）</p>
</li>
<li><p>票数增加后返回了一个HttpResponseRedirect，接收重定向的url。我们使用reverse()函数，接收重定向的url和所需参数。</p>
</li>
</ul>
<h2 id="现在，我们创建一个-results-模板"><a href="#现在，我们创建一个-results-模板" class="headerlink" title="现在，我们创建一个 results 模板"></a>现在，我们创建一个 results 模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- polls/templates/polls/results.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;  question.question_text &#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">&#123; % for choice in question.choice_set.all % &#125;</div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        &#123; &#123; choice.choice_text &#125; &#125; – &#123; &#123;  choice.votes &#125; &#125; vote&#123; &#123; choice.votes|pluralize &#125; &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123; % endfor % &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”&#123;</span> % <span class="attr">url</span>  ‘<span class="attr">polls:detail</span>’ <span class="attr">question.id</span> % &#125;”&gt;</span>Vote again ? <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行服务器，访问-polls-1-就可以去投票了！"><a href="#运行服务器，访问-polls-1-就可以去投票了！" class="headerlink" title="运行服务器，访问 polls/1 就可以去投票了！"></a>运行服务器，访问 polls/1 就可以去投票了！</h2><h2 id="基于-less-code-is-better-理念，Django-提供了-generic-views-视图模板。因为-detail-和-results-视图有相同的部分（从数据库获取数据，根据-url-传来的参数加载-template，返回渲染后的-template），index-视图也同样，只是展示一个列表而已。所以-Django-提供了-generic-views-这个简便方式，使我们的代码更少更简洁"><a href="#基于-less-code-is-better-理念，Django-提供了-generic-views-视图模板。因为-detail-和-results-视图有相同的部分（从数据库获取数据，根据-url-传来的参数加载-template，返回渲染后的-template），index-视图也同样，只是展示一个列表而已。所以-Django-提供了-generic-views-这个简便方式，使我们的代码更少更简洁" class="headerlink" title="基于 less code is better 理念，Django 提供了 generic views 视图模板。因为 detail() 和 results() 视图有相同的部分（从数据库获取数据，根据 url 传来的参数加载 template，返回渲染后的 template），index() 视图也同样，只是展示一个列表而已。所以 Django 提供了 generic views 这个简便方式，使我们的代码更少更简洁"></a>基于 <code>less code is better</code> 理念，Django 提供了 <code>generic views</code> 视图模板。因为 <code>detail()</code> 和 <code>results()</code> 视图有相同的部分（从数据库获取数据，根据 url 传来的参数加载 template，返回渲染后的 template），<code>index()</code> 视图也同样，只是展示一个列表而已。所以 Django 提供了 <code>generic views</code> 这个简便方式，使我们的代码更少更简洁</h2><ul>
<li><p>更改URLconf</p>
</li>
<li><p>更改view视图</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># polls/urls.py</div><div class="line">from django.conf.urls import url</div><div class="line">from . import views</div><div class="line">app_name = ‘polls’</div><div class="line">urlpatterns = [</div><div class="line">    url(r’^$’, views.IndexView.as_view(), name=’index’),</div><div class="line">    url(r’^(?P&lt;pk&gt;[0-9]+)/$’, views.DetailView.as_view(),  name=’detail’),</div><div class="line">    url(r’^(?P&lt;pk&gt;[0-9]+)/results/$’, views.ResultsView.as_view(),  name=’results’),</div><div class="line">    url(r’^(?P&lt;question_id&gt;[0-9]+)/vote/$’, views.vote, name=’vote’),</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># polls/views.py</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reversefrom django.views </div><div class="line"><span class="keyword">import</span> genericfrom .models <span class="keyword">import</span> Choice, Question</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></div><div class="line">    template_name =  ‘polls/index.html’</div><div class="line">    context_object_name = ‘latest_question_list’</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span>  Question.objects.order_by(‘-pub_date’)[:]</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name =  ‘polls/detail.html’</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name =  ‘polls/results.html’</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(requestion, question_id)</span>:</span></div><div class="line">    <span class="comment">#..same as above</span></div></pre></td></tr></table></figure>
<ul>
<li><p>通过 <code>model</code> 属性使 Django 知道在操作什么模型</p>
</li>
<li><p><code>template_name</code> 属性使我们能自定义模板</p>
</li>
<li><p><code>context_object_name</code> 属性指定 html 中对应的变量，不然 Django 会使用默认变量名</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Django 提交表单很简单，而且 Django 内置了跨站请求伪造攻击的防御方法。&lt;/p&gt;
&lt;p&gt;先来看下 Django 中简单表单的提交。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yuanblq.github.io/categories/Django/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django创建数据模型</title>
    <link href="https://yuanblq.github.io/2017/03/10/Django%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yuanblq.github.io/2017/03/10/Django创建数据模型/</id>
    <published>2017-03-10T14:43:18.000Z</published>
    <updated>2017-08-02T13:53:50.730Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经创建了 Django 的视图，但还没有数据。由于我们使用的是 Django，所以我们不必担心自己不会使用 SQL 语言。Django 内置了众多 API 帮助我们处理数据库。</p>
<a id="more"></a>
<h2 id="我们只需在-model-py-中创建数据模型即可。"><a href="#我们只需在-model-py-中创建数据模型即可。" class="headerlink" title="我们只需在 model.py 中创建数据模型即可。"></a>我们只需在 <code>model.py</code> 中创建数据模型即可。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></div><div class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    pub_date = models.DateTimeField(verbose_name=<span class="string">'date published'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.question_text</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># 通过ForeignKey告诉Django每个Choice关联一个Question</span></div><div class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</div><div class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.choice_text</div></pre></td></tr></table></figure>
<h2 id="通过以下命令创建迁移文件"><a href="#通过以下命令创建迁移文件" class="headerlink" title="通过以下命令创建迁移文件"></a>通过以下命令创建迁移文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations polls</div></pre></td></tr></table></figure>
<h2 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure>
<h2 id="以下是-Django-内置的一些数据库-API"><a href="#以下是-Django-内置的一些数据库-API" class="headerlink" title="以下是 Django 内置的一些数据库 API"></a>以下是 Django 内置的一些数据库 API</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#--------------------一般API---------------------</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all()    <span class="comment">#所有Question实例的set集</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = Question(question_text=<span class="string">"xxx"</span>, pub_date=timezone.now())    <span class="comment">#创建Question实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.save()    <span class="comment">#保存实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.question_text    q.pub_date    q.id     <span class="comment">#调用实例的一些属性</span></div><div class="line"><span class="comment">#---------------------查找API---------------------</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.filter(id = <span class="number">1</span>)   <span class="comment">#根据id查找</span></div><div class="line">filter(question_text__startswith = <span class="string">"xxx"</span>)    <span class="comment">#通过某些关系函数查找</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.get(pub_date__year = current_year)     <span class="comment">#通过get查找具体实例</span></div><div class="line">get(pk = <span class="number">1</span>)    <span class="comment">#通过键值查找</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.choice_set.all()    <span class="comment">#返回与当前question实例相关的所有choice的set集</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = q.choice_set.create(choice_text=<span class="string">"xxx"</span>, vote=<span class="number">0</span>)    <span class="comment">#为当前question实例的choice集创建一个实例</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.question     <span class="comment">#返回与当前choice相关的question实例</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.delete()    <span class="comment">#删除当前实例，同时id和pk值也会删掉</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面已经创建了 Django 的视图，但还没有数据。由于我们使用的是 Django，所以我们不必担心自己不会使用 SQL 语言。Django 内置了众多 API 帮助我们处理数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yuanblq.github.io/categories/Django/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sina新闻爬虫</title>
    <link href="https://yuanblq.github.io/2017/02/26/sina%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB/"/>
    <id>https://yuanblq.github.io/2017/02/26/sina新闻爬虫/</id>
    <published>2017-02-26T14:09:12.000Z</published>
    <updated>2017-08-02T14:22:01.077Z</updated>
    
    <content type="html"><![CDATA[<p>现在是大数据的时代，而在这大数据时代，获取数据的一个重要来源就是爬虫。</p>
<p>今天我们就以最简单的 sina新闻爬虫为例，看看爬虫是到底怎么实现的。</p>
<a id="more"></a>
<h2 id="获取-sina新闻的-html"><a href="#获取-sina新闻的-html" class="headerlink" title="获取 sina新闻的 html"></a>获取 sina新闻的 html</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests  </div><div class="line">res = requests.get(<span class="string">r'http://news.sina.com.cn/china/'</span>)  </div><div class="line">res.encoding = <span class="string">'utf-8'</span></div><div class="line">html = res.text</div></pre></td></tr></table></figure>
<h2 id="解析-html-获取所要的信息"><a href="#解析-html-获取所要的信息" class="headerlink" title="解析 html 获取所要的信息"></a>解析 html 获取所要的信息</h2><p>我们先来分析一下 sina新闻的网页布局<br><img src="/2017/02/26/sina新闻爬虫/640.jpg" alt="jpg"></p>
<h2 id="通过-BeautifulSoup-处理，获取所需节点的内容"><a href="#通过-BeautifulSoup-处理，获取所需节点的内容" class="headerlink" title="通过 BeautifulSoup 处理，获取所需节点的内容"></a>通过 BeautifulSoup 处理，获取所需节点的内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </div><div class="line">soup = BeautifulSoup(html,<span class="string">'html.parser'</span>)  </div><div class="line"><span class="keyword">for</span> news <span class="keyword">in</span> soup.select(<span class="string">r'.news-item'</span>):  </div><div class="line">    <span class="keyword">if</span> len(news.select(<span class="string">'h2'</span>)) &gt;<span class="number">0</span>:  </div><div class="line">        h2 = news.select(<span class="string">'h2'</span>)[<span class="number">0</span>].text  </div><div class="line">        time = news.select(<span class="string">'.time'</span>)[<span class="number">0</span>].text  </div><div class="line">        href = news.select(<span class="string">'a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]  </div><div class="line">        print(time, h2, href)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">2月26日 16:29 丽江古城官微被指回复网友永远别来 称正在调查 http://news.sina.com.cn/o/2017-02-26/doc-ifyavrsx5185529.shtml</div><div class="line">2月26日 16:26 日媒:日首次将执勤战斗机增至4架 应对中国军机 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3629936.shtml</div><div class="line">2月26日 16:15 汶川抗震志愿者史业宽去世 捐献遗体作教学研究 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsh6842129.shtml</div><div class="line">2月26日 16:10 财政部部长：企业慈善行为将享更多税收优惠 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3627856.shtml</div><div class="line">2月26日 16:04 日本增加执勤战机 中国军机将在钓鱼岛以一敌四 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8969989.shtml</div><div class="line">2月26日 15:58 四川汶川4级地震系9年前地震余震 部分房屋裂纹 http://news.sina.com.cn/c/2017-02-26/doc-ifyavwcv8969612.shtml</div><div class="line">2月26日 15:47 湖南湘乡“村霸”被举报非法开矿占田 纪委回应 http://news.sina.com.cn/c/2017-02-26/doc-ifyavwcv8969074.shtml</div><div class="line">2月26日 15:40 一文看懂刘士余记者会亮点 这些妙喻又将刷屏 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3623611.shtml</div><div class="line">2月26日 15:27 浙江沉船事故7名获救船员无大碍 其余人仍失联 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8968162.shtml</div><div class="line">2月26日 15:09 湖南生育率连续下跌 报告建议提供二孩生育补助 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8967429.shtml</div><div class="line">2月26日 13:17 马拉松替跑者猝死家属索赔120多万 系国内首例 http://news.sina.com.cn/c/2017-02-26/doc-ifyavrsx5175978.shtml</div><div class="line">2月26日 16:56 全国人大法工委评罗尔事件:此类变相募捐违法 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3634939.shtml</div><div class="line">2月26日 16:29 丽江古城官微被指回复网友永远别来 称正在调查 http://news.sina.com.cn/o/2017-02-26/doc-ifyavrsx5185529.shtml</div><div class="line">2月26日 16:26 日媒:日首次将执勤战斗机增至4架 应对中国军机 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3629936.shtml</div><div class="line">2月26日 16:15 汶川抗震志愿者史业宽去世 捐献遗体作教学研究 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsh6842129.shtml</div><div class="line">2月26日 16:10 财政部部长：企业慈善行为将享更多税收优惠 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3627856.shtml</div><div class="line">2月26日 16:04 日本增加执勤战机 中国军机将在钓鱼岛以一敌四 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8969989.shtml</div><div class="line">2月26日 15:58 四川汶川4级地震系9年前地震余震 部分房屋裂纹 http://news.sina.com.cn/c/2017-02-26/doc-ifyavwcv8969612.shtml</div><div class="line">2月26日 15:58 南昌致10人死亡酒店火灾事故已控制涉事者24人 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3626073.shtml</div><div class="line">2月26日 15:47 湖南湘乡“村霸”被举报非法开矿占田 纪委回应 http://news.sina.com.cn/c/2017-02-26/doc-ifyavwcv8969074.shtml</div><div class="line">2月26日 15:40 一文看懂刘士余记者会亮点 这些妙喻又将刷屏 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3623611.shtml</div><div class="line">2月26日 15:27 浙江沉船事故7名获救船员无大碍 其余人仍失联 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8968162.shtml</div><div class="line">2月26日 15:09 湖南生育率连续下跌 报告建议提供二孩生育补助 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8967429.shtml</div><div class="line">2月26日 14:25 媒体:小学入学日期松动并不意味支持更早入学 http://news.sina.com.cn/o/2017-02-26/doc-ifyavwcv8965123.shtml</div><div class="line">2月26日 14:23 深莞惠联手望造巨无霸机场 惠州谋划千万级空港 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavrsx5179318.shtml</div><div class="line">2月26日 14:16 汶川抗震志愿者史业宽去世 曾徒手刨出被埋女孩 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3612873.shtml</div><div class="line">2月26日 14:02 重庆大足石刻藏千里眼顺风耳造像 全国罕见(图) http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavrsx5178288.shtml</div><div class="line">2月26日 13:59 有人跟拍陈满被骗3个月 家人愤怒:为何不说一声 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsk3612689.shtml</div><div class="line">2月26日 13:17 马拉松替跑者猝死家属索赔120多万 系国内首例 http://news.sina.com.cn/c/2017-02-26/doc-ifyavrsx5175978.shtml</div><div class="line">2月26日 12:55 广西融水违法嫌疑人拒捕被击毙 检察机关已介入 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsh6823933.shtml</div><div class="line">2月26日 12:53 南昌酒店因违规焊割致火灾 已控制涉事人员24人 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavvsh6823839.shtml</div><div class="line">2月26日 12:16 一文看懂刘士余记者会亮点 这些妙喻又要刷屏了 http://news.sina.com.cn/o/2017-02-26/doc-ifyavrsx5172927.shtml</div><div class="line">2月26日 12:13 浙江慈溪发生车祸致1死8伤 有人被撞出数米之远 http://news.sina.com.cn/c/nd/2017-02-26/doc-ifyavrsx5172738.shtml</div><div class="line">2月25日 18:57 台湾大学两名教授涉论文造假被解聘 http://news.sina.com.cn/c/gat/2017-02-25/doc-ifyavvsh6687141.shtml</div><div class="line">2月25日 17:55 外交部驻港公署:英方对港所谓“责任”并不存在 http://news.sina.com.cn/o/2017-02-25/doc-ifyavwcv8909652.shtml</div><div class="line">2月25日 11:15 台湾大学两名教授涉论文造假被解聘 http://news.sina.com.cn/o/2017-02-25/doc-ifyavwcv8846818.shtml</div><div class="line">2月25日 05:10 台湾同性婚姻专法曝光：书面约定“谁夫谁妻” http://news.sina.com.cn/c/gat/2017-02-25/doc-ifyavvsh6534117.shtml</div><div class="line">2月25日 04:55 台湾军方基地26名官兵采尿验毒 初检呈阳性 http://news.sina.com.cn/c/gat/2017-02-25/doc-ifyavvsh6533630.shtml</div><div class="line">2月24日 19:55 上海航空班机起飞后疑因引擎异常折返台北 http://news.sina.com.cn/o/2017-02-24/doc-ifyavrsx5002084.shtml</div><div class="line">2月24日 11:46 台财信传媒董事长：新台币成全球最强货币 http://news.sina.com.cn/c/2017-02-24/doc-ifyavwcv8724969.shtml</div><div class="line">2月24日 10:25 台湾解除家禽禁令 此前已禁宰禁运7天 http://news.sina.com.cn/o/2017-02-24/doc-ifyavwcv8712945.shtml</div><div class="line">2月24日 10:18 台北大巨蛋可能复工？ 议员：柯文哲已骑虎难下 http://news.sina.com.cn/o/2017-02-24/doc-ifyavwcv8711559.shtml</div><div class="line">2月24日 02:07 台中山大学或拆孙中山铜像 被批“去中国化” http://news.sina.com.cn/c/2017-02-24/doc-ifyavwcv8672157.shtml</div><div class="line">2月24日 02:07 国民党选举杀出“女黑马” 洪秀柱或遭冲击 http://news.sina.com.cn/c/2017-02-24/doc-ifyavwcv8672152.shtml</div><div class="line">2月23日 21:07 台湾H5N6疫情趋缓 家禽禁运宰24日解除 http://news.sina.com.cn/o/2017-02-23/doc-ifyavrsx4869265.shtml</div><div class="line">2月23日 17:52 台空军涉毒案最新进展：20人初验结果呈阳性 http://news.sina.com.cn/c/gat/2017-02-23/doc-ifyavvsk2885663.shtml</div><div class="line">2月23日 17:34 张晓明驳“干预特首选举”:中央关注是名正言顺 http://news.sina.com.cn/c/gat/2017-02-23/doc-ifyavvsh6106167.shtml</div><div class="line">2月23日 14:44 蔡英文出席台活动再提“维持两岸现状” http://news.sina.com.cn/c/gat/2017-02-23/doc-ifyavvsh6065765.shtml</div><div class="line">2月23日 13:23 临近二二八 台湾现“喷漆行动”蒋介石像遭殃 http://news.sina.com.cn/c/2017-02-23/doc-ifyavrsx4832888.shtml</div><div class="line">2月23日 11:55 女子自称在荒山野岭露宿11天 靠喝山涧水保命 http://news.sina.com.cn/o/2017-02-23/doc-ifyavrsx4824661.shtml</div><div class="line">2月23日 10:45 台湾33死游览车事故：哥哥领妹妹理赔金遭拒 http://news.sina.com.cn/o/2017-02-23/doc-ifyavrsx4814560.shtml</div><div class="line">2月23日 02:34 台当局担忧蔡英文遭毒针攻击 特勤将配解毒剂 http://news.sina.com.cn/c/2017-02-23/doc-ifyavrsx4769246.shtml</div><div class="line">2月23日 02:34 台空军基地现多包疑似毒品 对近3000人尿液筛检 http://news.sina.com.cn/c/2017-02-23/doc-ifyavrsx4769244.shtml</div><div class="line">2月25日 23:23 央视：保监会痛打姚振华释放了什么重大信号 http://news.sina.com.cn/c/zs/2017-02-25/doc-ifyavvsh6744567.shtml</div><div class="line">2月25日 05:25 江西宁都公务员下班禁打麻将 媒体盘点奇葩禁令 http://news.sina.com.cn/c/zs/2017-02-25/doc-ifyavvsk3310293.shtml</div><div class="line">2月24日 12:53 媒体：中国暂停进口朝鲜煤炭 旨在推动半岛和平 http://news.sina.com.cn/c/zs/2017-02-24/doc-ifyavvsh6276149.shtml</div><div class="line">2月23日 08:17 学者：“台独”将成为中国崛起面临的紧迫问题 http://news.sina.com.cn/c/2017-02-23/doc-ifyavrsx4790474.shtml</div><div class="line">2月23日 05:19 媒体：院士身份对杨振宁只能是荣誉而非利益 http://news.sina.com.cn/o/2017-02-23/doc-ifyavrsx4774727.shtml</div><div class="line">2月21日 11:19 最高法：证据不足案按疑罪从无原则 依法判无罪 http://news.sina.com.cn/o/2017-02-21/doc-ifyarrcc8386275.shtml</div><div class="line">2月21日 10:47 最高法：推动建立健全冤假错案防范和纠正机制 http://news.sina.com.cn/o/2017-02-21/doc-ifyarzzv3578109.shtml</div><div class="line">2月21日 07:04 学者:中国游客息事宁人纵容越方人员讨小费习惯 http://news.sina.com.cn/o/2017-02-21/doc-ifyarzzv3530923.shtml</div><div class="line">2月18日 10:11 台学者：特朗普重回“一中”有助两岸关系 http://news.sina.com.cn/c/gat/2017-02-18/doc-ifyarzzv3087698.shtml</div><div class="line">2月18日 01:59 媒体：中美“大警报”解除 讨价还价开始 http://news.sina.com.cn/o/2017-02-18/doc-ifyarref5815482.shtml</div><div class="line">2月17日 19:53 媒体：特殊时期 新疆这个大会开得很及时 http://news.sina.com.cn/c/nd/2017-02-18/doc-ifyarzzv3013845.shtml</div><div class="line">2月17日 14:12 检方提前介入重大案件后都需要做啥 http://news.sina.com.cn/c/2017-02-17/doc-ifyarzzv2937163.shtml</div><div class="line">2月17日 13:29 官方：普及高中阶段教育 促其毛入学率达到90% http://news.sina.com.cn/o/2017-02-17/doc-ifyarrcc7623040.shtml</div><div class="line">2月16日 10:31 教育部：在高校施诚信教育 建失信行为惩戒机制 http://news.sina.com.cn/o/2017-02-16/doc-ifyarref5447942.shtml</div><div class="line">2月16日 10:27 教育部：健全高校弹性学制 入学后可申休学创业 http://news.sina.com.cn/o/2017-02-16/doc-ifyarref5447069.shtml</div><div class="line">2月16日 08:58 媒体：国内20亿级别富豪2000余位 半数无高学历 http://news.sina.com.cn/c/nd/2017-02-16/doc-ifyarmcu6029038.shtml</div><div class="line">2月16日 07:54 港媒：内地单身青年达2亿人 找对象太难 http://news.sina.com.cn/c/nd/2017-02-16/doc-ifyarrqs9855789.shtml</div><div class="line">2月16日 03:38 专家:大陆高调纪念“二二八”粉碎“台独”论述 http://news.sina.com.cn/c/zs/2017-02-16/doc-ifyarmcu6023653.shtml</div><div class="line">2月16日 00:13 中国多地开始流行共享汽车 会否加剧交通拥堵？ http://news.sina.com.cn/o/2017-02-16/doc-ifyarref5391585.shtml</div><div class="line">2月15日 23:21 新华社：三大管理乱象导致台湾游览车事故频发 http://news.sina.com.cn/o/2017-02-15/doc-ifyarrcf4062961.shtml</div><div class="line">1月31日 19:12 大马沉船事故确认7名苏州游客身份 1死1失联 http://news.sina.com.cn/c/sd/2017-01-31/doc-ifxzyxmu8444643.shtml</div><div class="line">1月19日 00:01 中央时隔17年再下文加强政法队伍建设 有何用意 http://news.sina.com.cn/o/2017-01-19/doc-ifxzunxf1377803.shtml</div><div class="line">1月17日 01:59 哈萨克斯坦人集会反对姑娘嫁中国人 怕他们分地 http://news.sina.com.cn/o/2017-01-17/doc-ifxzqnva3778799.shtml</div><div class="line">1月12日 16:36 美没收中国红通3号人物乔建军前妻赵世兰房产 http://news.sina.com.cn/c/sd/2017-01-12/doc-ifxzqnip0848945.shtml</div><div class="line">1月12日 13:50 中科院最美的玫瑰走了 她当得起这一声“先生” http://news.sina.com.cn/c/sd/2017-01-12/doc-ifxzqnip0817768.shtml</div><div class="line">12月16日 21:53 落马贪官人大代表职务 为何有的请辞有的被罢免 http://news.sina.com.cn/c/sd/2016-12-16/doc-ifxytqqn8780142.shtml</div><div class="line">12月5日 08:20 大米走私链条曝光:进行抛光搀兑后销往多地市场 http://news.sina.com.cn/c/sd/2016-12-05/doc-ifxyicnf1572611.shtml</div><div class="line">12月1日 19:23 江苏广电总台原女台长被带走调查 疑涉经济问题 http://news.sina.com.cn/c/sd/2016-12-02/doc-ifxyhwyy0408568.shtml</div><div class="line">11月29日 03:39 小鱼塘兽药失禁 多地水产均曾检出孔雀石绿(图) http://news.sina.com.cn/c/sd/2016-11-29/doc-ifxyawxa3005371.shtml</div><div class="line">11月28日 23:53 国安部长任中政委委员 曾弃清华北大选这所大学 http://news.sina.com.cn/c/sd/2016-11-29/doc-ifxyasmv2125402.shtml</div><div class="line">11月28日 11:35 雾霾中现耐药菌人类将面临无药可医？揭秘真相 http://news.sina.com.cn/c/sd/2016-11-28/doc-ifxyawmm3624224.shtml</div><div class="line">11月28日 07:50 舰载机飞行员牺牲细节:4.4秒生死瞬间欲救战机 http://news.sina.com.cn/c/sd/2016-11-28/doc-ifxyawxa2907507.shtml</div><div class="line">11月28日 05:41 贵州童工多因贫困外出打工 有时连吃盐都成问题 http://news.sina.com.cn/o/2016-11-28/doc-ifxyasmv2025198.shtml</div><div class="line">11月27日 14:01 湖南从严推进县乡人大换届选举:铭记衡阳案教训 http://news.sina.com.cn/c/sd/2016-11-27/doc-ifxyawxa2866597.shtml</div><div class="line">11月21日 15:00 北京国I国Ⅱ车辆明年2月15日起五环内限行 http://news.sina.com.cn/c/sd/2016-11-21/doc-ifxxwrwh4831425.shtml</div><div class="line">11月21日 14:44 北京重污染应急预案为何5年4版本 http://news.sina.com.cn/c/2016-11-21/doc-ifxxwsix4256007.shtml</div><div class="line">11月15日 11:47 中央督察组:黑龙江自然保护区违建问题严重 http://news.sina.com.cn/c/2016-11-15/doc-ifxxsmuu5714118.shtml</div><div class="line">11月15日 07:16 这些贪官为什么被判终身监禁 http://news.sina.com.cn/c/sd/2016-11-15/doc-ifxxsmic6290399.shtml</div><div class="line">11月6日 05:09 遭贾敬龙射杀村支书之子接任父职 被指村官世袭 http://news.sina.com.cn/c/sd/2016-11-06/doc-ifxxnety7454000.shtml</div><div class="line">11月6日 03:36 揭秘职称评选之痛 教授称专注教学就是毁灭自己 http://news.sina.com.cn/c/sd/2016-11-06/doc-ifxxnety7452898.shtml</div></pre></td></tr></table></figure>
<h2 id="通过浏览器开发者工具获取对应信息的-url-并用-requests-抓取"><a href="#通过浏览器开发者工具获取对应信息的-url-并用-requests-抓取" class="headerlink" title="通过浏览器开发者工具获取对应信息的 url 并用 requests 抓取"></a>通过浏览器开发者工具获取对应信息的 url 并用 requests 抓取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests  </div><div class="line">res = requests.get(<span class="string">r'http://news.sina.com.cn/c/nd/2017-02-23/doc-ifyavvsk2741237.shtml'</span>)  </div><div class="line">res.encoding = <span class="string">'utf-8'</span></div></pre></td></tr></table></figure>
<h2 id="通过-BeautifulSoup-抓取时间及来源信息"><a href="#通过-BeautifulSoup-抓取时间及来源信息" class="headerlink" title="通过 BeautifulSoup 抓取时间及来源信息"></a>通过 BeautifulSoup 抓取时间及来源信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">html = res.text  </div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </div><div class="line">soup = BeautifulSoup(html,<span class="string">'html.parser'</span>)  </div><div class="line"><span class="comment"># 通过contents属性可以获得打标签内的不同内容的一个list</span></div><div class="line">timesource = soup.select(<span class="string">'#navtimeSource'</span>)[<span class="number">0</span>].contents[<span class="number">0</span>].strip()  </div><div class="line">timesource</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;2017年02月23日00:04&apos;</div></pre></td></tr></table></figure>
<h2 id="通过-datetime-模块把时间-str-转换为可以时间格式，方便以后在数据库中的存储"><a href="#通过-datetime-模块把时间-str-转换为可以时间格式，方便以后在数据库中的存储" class="headerlink" title="通过 datetime 模块把时间 str 转换为可以时间格式，方便以后在数据库中的存储"></a>通过 datetime 模块把时间 str 转换为可以时间格式，方便以后在数据库中的存储</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime  </div><div class="line">time = datetime.strptime(timesource,<span class="string">'%Y年%m月%d日%H:%M'</span>)  </div><div class="line">time</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">datetime.datetime(2017, 2, 23, 0, 4)</div></pre></td></tr></table></figure>
<h2 id="datetime-也可以把时间格式的数据转换为-str"><a href="#datetime-也可以把时间格式的数据转换为-str" class="headerlink" title="datetime 也可以把时间格式的数据转换为 str"></a>datetime 也可以把时间格式的数据转换为 str</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">timestr = datetime.strftime(time, &apos;%Y-%m-%d&apos;)  </div><div class="line">timestr2 = time.strftime(&apos;%Y-%m-%d&apos;)  </div><div class="line">print(timestr, timestr2)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-02-23 2017-02-23</div></pre></td></tr></table></figure>
<h2 id="通过多次-select-获取新闻来源"><a href="#通过多次-select-获取新闻来源" class="headerlink" title="通过多次 select 获取新闻来源"></a>通过多次 <code>select</code> 获取新闻来源</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(soup.select(<span class="string">'#navtimeSource'</span>))  </div><div class="line">source = soup.select(<span class="string">'#navtimeSource span a'</span>)[<span class="number">0</span>].text  </div><div class="line">print(source)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[&lt;span class=&quot;time-source&quot; id=&quot;navtimeSource&quot;&gt;2017年02月23日00:04        &lt;span&gt;</div><div class="line">&lt;span data-sudaclick=&quot;media_name&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzI5NjA5Ng==&amp;amp;mid=2247485847&amp;amp;idx=3&amp;amp;sn=fb13d17edf9d16699bfe28910c782270&amp;amp;scene=0#wechat_redirect&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;法制晚报&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;</div><div class="line">&lt;/span&gt;]</div><div class="line">法制晚报</div></pre></td></tr></table></figure>
<h2 id="获取新闻正文"><a href="#获取新闻正文" class="headerlink" title="获取新闻正文"></a>获取新闻正文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paragraph = <span class="string">'\n'</span>.join([p.text.strip() <span class="keyword">for</span> p <span class="keyword">in</span> soup.select(<span class="string">'#artibody p'</span>)])  </div><div class="line">print(paragraph)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">原标题：市委书记履新巧合一幕：学弟接棒学长</div><div class="line">2月20日，大连召开领导干部大会，宣布辽宁省委常委谭作钧接棒另一位省委常委唐军，任大连市委书记。</div><div class="line">观海解局记者注意到，两人毕业于同一所高校——武汉大学，只是唐军为1983届，中国文学专业；谭作钧为1990届，国际法专业。两人毕业时间相差仅7年。</div><div class="line">这种校友间接棒的情形在高校系统时有发生，政界则较为少见。</div><div class="line">省委书记出席市委书记就职大会</div><div class="line">据《大连日报》报道，辽宁省委书记李希亲自出席了大连领导干部大会，并讲话。</div><div class="line">辽宁省委常委、组织部部长王正谱宣读中央和省委的决定。中央批准：谭作钧任大连市委书记，唐军不再担任辽宁省委常委、大连市委书记。</div><div class="line">李希在讲话中指出，这次大连市委主要领导调整，是中央根据辽宁工作大局需要，本着干部交流的原则，着眼于加强辽宁省和大连市领导班子建设的实际，通盘考虑作出的重要决策。</div><div class="line">在评价唐军的成绩时，李希指出，在唐军主持下，大连经济社会及各项事业发展都取得了新的进步。至于对新班子的期望，李希提出了11个“要”，其中两个即为“在辽宁新一轮振兴发展中当好领头羊”“深刻吸取辽宁拉票贿选案沉痛教训”。</div><div class="line">唐军在表态发言时饱含深情地说，我对大连人民的感情真挚而深沉，无论身在哪里，都始终心系大连、永远祝福大连。谭作钧在表态发言中作出6个承诺，其一为严格遵守党章党规，公道正派，清正廉洁，打造风清气正的政治环境。</div><div class="line">新老书记相差7年毕业</div><div class="line">观海解局记者发现，大连两任市委书记均毕业于武汉大学，且“老书记”为“新书记”的学长。</div><div class="line">公开简历显示，离开大连市委书记一职的唐军1962年5月生，江苏建湖人，1983年毕业于武汉大学中文系中国文学专业，获文学学士。</div><div class="line">毕业后，唐军进入原劳动人事部工作。此后24年间，他由干部局干部累升至副部长。2008年3月，唐军“空降”为辽宁任省委常委、组织部长，3年后转任大连市委书记。算下来，他在大连任职已近6年。</div><div class="line">此次履新的谭作钧1968年10月生，湖南茶陵人，比唐军小6岁。1990年，他于武汉大学毕业，专业则为国际法。</div><div class="line">据《第一财经日报》报道，谭作钧屡创“最年轻”记录。</div><div class="line">毕业后，他先在江南造船厂锻炼，后入中国船舶工业贸易公司。1998年后，他先后担任香港华联船舶有限公司副总经理、总经理等职务。10年之后，40岁的谭作钧出任中船集团总经理，成为当时最年轻的央企总经理。</div><div class="line">4年后，“商而优则仕”的谭作钧北上辽宁担任副省长。2015年1月，谭作钧升任辽宁省委常委，兼任省委秘书长，成为当时最年轻的省级常委。直至2016年11月，出生于1970年1月刘捷当选江西省委常委。</div><div class="line">出任大连市委书记后，谭作钧再次刷新一记录——目前全国15个副省级城市中最年轻的市委书记。</div><div class="line">辽宁曾有3常委同校毕业</div><div class="line">观海解局记者还发现，除了唐军、谭作钧，辽宁省委常委班子里还有一位武汉大学毕业生——省纪委书记陈小江。</div><div class="line">简历显示，陈小江出生于1962年6月，浙江龙游人，1984年毕业于武汉水利电力学院电力系统及自动化专业。</div><div class="line">据武汉大学官网介绍，1954年，水利学院从该校分出，成立武汉水利学院，即为武汉水利电力学院前身。2000年，武汉大学与武汉水利电力大学、武汉测绘科技大学、湖北医科大学合并组建新的武汉大学。</div><div class="line">毕业后，陈小江进入媒体工作，直至1996年任中国水利报社社长、党委书记。两年后，他开始担任水利部直属机关党委常务副书记，正式迈入仕途，直至2009年担任水利部党组成员、办公厅主任。</div><div class="line">2015年8月，离开熟悉的水利电力领域，陈小江进入纪检系统，接任第二位中纪委宣传部部长。不到一年，他再次受到重用，“空降”辽宁抓反腐，任省委常委、纪委书记。</div><div class="line">观海解局记者注意到，这种校友间接棒的情形在高校系统时有发生，政界则较为少见。</div><div class="line">比如去年12月13日，北京大学党委书记换人，郝平接棒朱善璐履新。</div><div class="line">公开简历显示，郝平1959年升出，1982年毕业于北京大学历史专业。此后留校，20多年后出任副校长，2005年6月，郝平离开北大，到北京外国语大学担任校长。2009年，他又出任教育部副部长。</div><div class="line">朱善璐1953年出生，同样于1982年毕业北京大学，专业则是哲学。此后留校，一直干到党委副书记。此后，朱善璐离开燕园，在北京、江苏两地担任党政领导。2011年8月，阔别北大15年后，朱善璐回归校园，担任北大党委书记。</div><div class="line">阮成发曾回母校武大交“作业”</div><div class="line">除了唐军、陈小江、谭作钧，武汉大学毕业的政要还有不少。比如现任江西省委书记鹿心社、云南省长阮成发，以及北京市委常委、纪委书记张硕辅等。</div><div class="line">2016年7月15日，武汉大学官网刊登了一则消息——江西省委书记鹿心社致信母校话合作。</div><div class="line">简历显示，鹿心社1978年进入武汉水利电力学院农田水利工程专业学习。文章称，时年6月，鹿心社接任江西省委书记。获悉消息后，武汉大学给他发去贺信。</div><div class="line">鹿心社在回信中称，他诚挚感谢母校的关心和培养，并为母校的发展感到高兴，希望武汉大学充分发挥知识、人才、信息和科技优势，推动与江西更高水平、更深层次、更宽领域的合作，促进省校共同发展。</div><div class="line">据《长江日报》报道，2012年6月27日，时任武汉市委书记的阮成发来到武汉大学经济与管理学院，为600余名师生作了《建设国家中心城市 复兴大武汉》报告。</div><div class="line">报道称，阮成发此行有着双重身份：毕业于武汉大学的他，自称以一名学生身份回到母校交“作业”，全面介绍了武汉近年来经济社会快速发展的良好势头；代表市委、市政府，他向这所百年名校致以崇高敬意和衷心感谢，“武汉大学与武汉唇齿相依，武汉一直因武大而骄傲、因武大而发展”。</div><div class="line">政要排行榜 北大第一</div><div class="line">哪些名校出身的政要最多？</div><div class="line">2014年3月，中国校友会网编制完成《2014中国大学评价研究报告》，报告显示，北京大学毕业生中有92名杰出政要校友，为2014中国大学杰出政要校友榜第一名。清华大学有78人，中国人民大学有70人。</div><div class="line">2015年6月，艾瑞深中国校友会网公布了《2015中国大学教学质量评价报告》。</div><div class="line">报告显示，北京大学培养和造就杰出政界英才校友人数最多，有96人；清华大学79人，居第2；中国人民大学73人，居第3；清华北大人大三校培养的杰出政界校友人数遥遥领先于其他大学，是我国政界大学毕业生质量最高、校友最为杰出的大学，堪称“中国政界英才摇篮”。</div><div class="line">前十名里还有吉林大学、复旦大学、北京师范大学、山东大学、南开大学、同济大学、哈尔滨工业大学等，堪称“中国最具政坛影响力的十大高校”。</div><div class="line">责任编辑：李鹏</div></pre></td></tr></table></figure>
<p>获取数据后，你想存哪就有你决定啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在是大数据的时代，而在这大数据时代，获取数据的一个重要来源就是爬虫。&lt;/p&gt;
&lt;p&gt;今天我们就以最简单的 sina新闻爬虫为例，看看爬虫是到底怎么实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://yuanblq.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>三门问题</title>
    <link href="https://yuanblq.github.io/2017/02/21/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://yuanblq.github.io/2017/02/21/三门问题/</id>
    <published>2017-02-21T02:07:45.000Z</published>
    <updated>2017-08-02T13:47:26.731Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？</p>
</div>
<a id="more"></a>
<h5 id="如果假设只是从三扇门中选，没有交换，则："><a href="#如果假设只是从三扇门中选，没有交换，则：" class="headerlink" title="如果假设只是从三扇门中选，没有交换，则："></a>如果假设只是从三扇门中选，没有交换，则：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">total = <span class="number">100000</span></div><div class="line">bingo = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(total):</div><div class="line">    my_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    car = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    <span class="keyword">if</span> my_choice == car:</div><div class="line">        bingo += <span class="number">1</span></div><div class="line">print(<span class="string">"一共选中 %d 次"</span> % bingo)</div><div class="line">print(<span class="string">"选中概率为：%.2f"</span> %(bingo / total))</div></pre></td></tr></table></figure>
<pre><code>一共选中 33164 次
选中概率为：0.33
</code></pre><h5 id="加上询问交换这一流程后："><a href="#加上询问交换这一流程后：" class="headerlink" title="加上询问交换这一流程后："></a>加上询问交换这一流程后：</h5><ul>
<li>先从三扇门中选一个</li>
<li>然后主持人在剩下的两扇门中选一个打开</li>
<li>询问是否更换：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">total = <span class="number">100000</span></div><div class="line">bingo_change = <span class="number">0</span></div><div class="line">change = <span class="number">0</span></div><div class="line">bingo_not_change = <span class="number">0</span></div><div class="line">not_change = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(total):</div><div class="line">    car = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    my_choice = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    is_switch = random.choice([<span class="keyword">True</span>, <span class="keyword">False</span>])</div><div class="line">    <span class="keyword">if</span> is_switch:</div><div class="line">        change += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> my_choice != car:</div><div class="line">            bingo_change += <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        not_change += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> my_choice == car:</div><div class="line">            bingo_not_change += <span class="number">1</span></div><div class="line">print(<span class="string">"选手更换了 %d 次，选对的次数：%d，即选中的概率为：%.2f"</span> % (change, bingo_change, bingo_change / change))</div><div class="line">print(<span class="string">"选手不更换 %d 次，选对的次数：%d，即选中的概率为：%.2f"</span> % (not_change, bingo_not_change, bingo_not_change / not_change))</div></pre></td></tr></table></figure>
<pre><code>选手更换了 49956 次，选对的次数：33180，即选中的概率为：0.66
选手不更换 50044 次，选对的次数：16677，即选中的概率为：0.33
</code></pre><h5 id="通过暴力计算，可见三门问题的结论就一个字：换。"><a href="#通过暴力计算，可见三门问题的结论就一个字：换。" class="headerlink" title="通过暴力计算，可见三门问题的结论就一个字：换。"></a>通过暴力计算，可见三门问题的结论就一个字：换。</h5><h5 id="有位知友-“邢可”-的答案把三门问题解释得很形象。"><a href="#有位知友-“邢可”-的答案把三门问题解释得很形象。" class="headerlink" title="有位知友 “邢可” 的答案把三门问题解释得很形象。"></a>有位知友<a href="https://www.zhihu.com/question/26709273/answer/65418012?utm_source=com.samsung.android.app.memo&utm_medium=social" target="_blank" rel="external"> “邢可” </a>的答案把三门问题解释得很形象。</h5>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="小练习" scheme="https://yuanblq.github.io/categories/%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
      <category term="三门问题" scheme="https://yuanblq.github.io/tags/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Django设计模式（二）</title>
    <link href="https://yuanblq.github.io/2017/02/09/Django%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yuanblq.github.io/2017/02/09/Django设计模式/</id>
    <published>2017-02-09T13:38:12.000Z</published>
    <updated>2017-08-02T13:48:04.262Z</updated>
    
    <content type="html"><![CDATA[<p>Django 大致的逻辑思路是这样的：用户在地址栏输入 url 由 <code>urls.py</code> 通过正则表达式传到 <code>views.py</code>，然后在 views 中处理最终传到 templates 返回渲染生成的页面。</p>
<a id="more"></a>
<h2 id="假设前一篇创建的-app-名称为-polls"><a href="#假设前一篇创建的-app-名称为-polls" class="headerlink" title="假设前一篇创建的 app 名称为 polls"></a>假设前一篇创建的 app 名称为 polls</h2><h3 id="在-polls-views-py-中创建第一个视图"><a href="#在-polls-views-py-中创建第一个视图" class="headerlink" title="在 polls/views.py 中创建第一个视图"></a>在 <code>polls/views.py</code> 中创建第一个视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">	returnHttpResponse(“You’re at the polls index”)</div></pre></td></tr></table></figure>
<h3 id="在-polls-文件夹中新建-urls-py-文件，并创建-url-和-view-的映射关系"><a href="#在-polls-文件夹中新建-urls-py-文件，并创建-url-和-view-的映射关系" class="headerlink" title="在 polls 文件夹中新建 urls.py 文件，并创建 url 和 view 的映射关系"></a>在 polls 文件夹中新建 <code>urls.py</code> 文件，并创建 <code>url</code> 和 <code>view</code> 的映射关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns=[</div><div class="line">	url(r’^$’,view.index, name=’index’)</div><div class="line">]</div></pre></td></tr></table></figure>
<p>然后在 mysite(项目名)/urls.py 中添加如下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns=[</div><div class="line">	url(r’^polls/’,include(‘polls.url’))   <span class="comment">#这里的正则表达式不能加$，因为要捕获后面的参数</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><code>include()</code> 函数中指定其他地方的 <code>urlconf</code> ，并把正则表达式中截取的参数传过去</p>
<h3 id="python-manage-pyrunserver-运行服务器，输入-127-0-0-1-8000-polls-即可看到-views-py-中定义的视图"><a href="#python-manage-pyrunserver-运行服务器，输入-127-0-0-1-8000-polls-即可看到-views-py-中定义的视图" class="headerlink" title="python manage.pyrunserver 运行服务器，输入 127.0.0.1:8000/polls 即可看到 views.py 中定义的视图"></a><code>python manage.pyrunserver</code> 运行服务器，输入 <code>127.0.0.1:8000/polls</code> 即可看到 <code>views.py</code> 中定义的视图</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django 大致的逻辑思路是这样的：用户在地址栏输入 url 由 &lt;code&gt;urls.py&lt;/code&gt; 通过正则表达式传到 &lt;code&gt;views.py&lt;/code&gt;，然后在 views 中处理最终传到 templates 返回渲染生成的页面。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yuanblq.github.io/categories/Django/"/>
    
    
      <category term="python" scheme="https://yuanblq.github.io/tags/python/"/>
    
  </entry>
  
</feed>
